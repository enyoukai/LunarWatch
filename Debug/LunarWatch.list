
LunarWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000658c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec4  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008628  08008628  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000078  080086a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080086a8  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e60  00000000  00000000  00033de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00036c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025518  00000000  00000000  00038e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001786c  00000000  00000000  0005e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db022  00000000  00000000  00075b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150bae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005028  00000000  00000000  00150c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006744 	.word	0x08006744

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006744 	.word	0x08006744

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xfc>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000642:	f002 f901 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	481b      	ldr	r0, [pc, #108]	; (80006b8 <MX_GPIO_Init+0x104>)
 800064c:	f002 f8fc 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000656:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <MX_GPIO_Init+0x108>)
 8000668:	f001 ff5a 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 800066c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000686:	f001 ff4b 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800068a:	2340      	movs	r3, #64	; 0x40
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_GPIO_Init+0x104>)
 80006a2:	f001 ff3d 	bl	8002520 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40020800 	.word	0x40020800

080006c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006c8:	1d39      	adds	r1, r7, #4
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	2201      	movs	r2, #1
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <__io_putchar+0x20>)
 80006d2:	f004 fc8c 	bl	8004fee <HAL_UART_Transmit>
  return ch;
 80006d6:	687b      	ldr	r3, [r7, #4]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000158 	.word	0x20000158

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f001 fd9d 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f8b1 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ff5f 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f6:	f000 fc2b 	bl	8000f50 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006fa:	f000 fb73 	bl	8000de4 <MX_TIM3_Init>
  MX_SPI1_Init();
 80006fe:	f000 f9eb 	bl	8000ad8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000702:	f000 f965 	bl	80009d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  LCDInit();
 8000706:	f000 f917 	bl	8000938 <LCDInit>
  LCDBootScreen();
 800070a:	f000 f93d 	bl	8000988 <LCDBootScreen>

  Paint_Clear(WHITE);
 800070e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000712:	f000 fe07 	bl	8001324 <Paint_Clear>

	Paint_DrawCircle(120,120, 120, BLACK ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY); // outside circle
 8000716:	2300      	movs	r3, #0
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2278      	movs	r2, #120	; 0x78
 8000722:	2178      	movs	r1, #120	; 0x78
 8000724:	2078      	movs	r0, #120	; 0x78
 8000726:	f000 ff59 	bl	80015dc <Paint_DrawCircle>
	Paint_DrawLine  (120, 0, 120, 12,BLACK ,DOT_PIXEL_4X4,LINE_STYLE_SOLID); // four inner lines
 800072a:	2300      	movs	r3, #0
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2304      	movs	r3, #4
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	230c      	movs	r3, #12
 8000738:	2278      	movs	r2, #120	; 0x78
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 fe9d 	bl	800147c <Paint_DrawLine>
	Paint_DrawLine  (120, 228, 120, 240,BLACK ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8000742:	2300      	movs	r3, #0
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	2304      	movs	r3, #4
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	2300      	movs	r3, #0
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	23f0      	movs	r3, #240	; 0xf0
 8000750:	2278      	movs	r2, #120	; 0x78
 8000752:	21e4      	movs	r1, #228	; 0xe4
 8000754:	2078      	movs	r0, #120	; 0x78
 8000756:	f000 fe91 	bl	800147c <Paint_DrawLine>
	Paint_DrawLine  (0, 120, 12, 120,BLACK ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800075a:	2300      	movs	r3, #0
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2304      	movs	r3, #4
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2378      	movs	r3, #120	; 0x78
 8000768:	220c      	movs	r2, #12
 800076a:	2178      	movs	r1, #120	; 0x78
 800076c:	2000      	movs	r0, #0
 800076e:	f000 fe85 	bl	800147c <Paint_DrawLine>
	Paint_DrawLine  (228, 120, 240, 120,BLACK ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8000772:	2300      	movs	r3, #0
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2304      	movs	r3, #4
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2300      	movs	r3, #0
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2378      	movs	r3, #120	; 0x78
 8000780:	22f0      	movs	r2, #240	; 0xf0
 8000782:	2178      	movs	r1, #120	; 0x78
 8000784:	20e4      	movs	r0, #228	; 0xe4
 8000786:	f000 fe79 	bl	800147c <Paint_DrawLine>

//	Paint_DrawImage(gImage_70X70, 85, 25, 70, 70);
//	Paint_DrawString_CN(56,140, "΢ѩ����",   &Font24CN,BLACK,  WHITE);

	Paint_DrawLine  (120, 120, 70, 70,BLACK ,DOT_PIXEL_3X3,LINE_STYLE_SOLID); // hour
 800078a:	2300      	movs	r3, #0
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2303      	movs	r3, #3
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2300      	movs	r3, #0
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2346      	movs	r3, #70	; 0x46
 8000798:	2246      	movs	r2, #70	; 0x46
 800079a:	2178      	movs	r1, #120	; 0x78
 800079c:	2078      	movs	r0, #120	; 0x78
 800079e:	f000 fe6d 	bl	800147c <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 176, 64,BLACK ,DOT_PIXEL_3X3,LINE_STYLE_SOLID); // minute
 80007a2:	2300      	movs	r3, #0
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	2303      	movs	r3, #3
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2300      	movs	r3, #0
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	22b0      	movs	r2, #176	; 0xb0
 80007b2:	2178      	movs	r1, #120	; 0x78
 80007b4:	2078      	movs	r0, #120	; 0x78
 80007b6:	f000 fe61 	bl	800147c <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID); // seconds
 80007ba:	2300      	movs	r3, #0
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2302      	movs	r3, #2
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	23d2      	movs	r3, #210	; 0xd2
 80007ca:	2278      	movs	r2, #120	; 0x78
 80007cc:	2178      	movs	r1, #120	; 0x78
 80007ce:	2078      	movs	r0, #120	; 0x78
 80007d0:	f000 fe54 	bl	800147c <Paint_DrawLine>

	printf("quit...\r\n");
 80007d4:	481b      	ldr	r0, [pc, #108]	; (8000844 <main+0x160>)
 80007d6:	f005 f917 	bl	8005a08 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		RTC_DateTypeDef getDate = {0};
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
		RTC_TimeTypeDef getTime = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <main+0x164>)
 80007f4:	f003 fa64 	bl	8003cc0 <HAL_RTC_GetTime>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <main+0x11e>
		{
		Error_Handler();
 80007fe:	f000 f8e1 	bl	80009c4 <Error_Handler>
		}
		if (HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <main+0x164>)
 800080c:	f003 fb3a 	bl	8003e84 <HAL_RTC_GetDate>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <main+0x136>
		{
		Error_Handler();
 8000816:	f000 f8d5 	bl	80009c4 <Error_Handler>
		}
		printf("%02d:%02d:%02d\n", getTime.Hours, getTime.Minutes, getTime.Seconds);
 800081a:	783b      	ldrb	r3, [r7, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	787b      	ldrb	r3, [r7, #1]
 8000820:	461a      	mov	r2, r3
 8000822:	78bb      	ldrb	r3, [r7, #2]
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <main+0x168>)
 8000826:	f005 f869 	bl	80058fc <iprintf>
		printf("%02d/%02d/%02d\n", getDate.Date, getDate.Month, getDate.Year);
 800082a:	7dbb      	ldrb	r3, [r7, #22]
 800082c:	4619      	mov	r1, r3
 800082e:	7d7b      	ldrb	r3, [r7, #21]
 8000830:	461a      	mov	r2, r3
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x16c>)
 8000836:	f005 f861 	bl	80058fc <iprintf>
		HAL_Delay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800083e:	f001 fd65 	bl	800230c <HAL_Delay>
  {
 8000842:	e7ca      	b.n	80007da <main+0xf6>
 8000844:	0800675c 	.word	0x0800675c
 8000848:	20000094 	.word	0x20000094
 800084c:	08006768 	.word	0x08006768
 8000850:	08006778 	.word	0x08006778

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	; 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f004 ff62 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SystemClock_Config+0xdc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <SystemClock_Config+0xdc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0xdc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xe0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a24      	ldr	r2, [pc, #144]	; (8000934 <SystemClock_Config+0xe0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xe0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008b4:	230a      	movs	r3, #10
 80008b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2310      	movs	r3, #16
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008da:	2304      	movs	r3, #4
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fe3a 	bl	8003564 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008f6:	f000 f865 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 ffb0 	bl	800287c <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000922:	f000 f84f 	bl	80009c4 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <LCDInit>:

/* USER CODE BEGIN 4 */

void LCDInit() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	DEV_Module_Init();
 800093c:	f000 fbb6 	bl	80010ac <DEV_Module_Init>

	LCD_1IN28_SetBackLight(10000);
 8000940:	f242 7010 	movw	r0, #10000	; 0x2710
 8000944:	f001 fc60 	bl	8002208 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8000948:	2001      	movs	r0, #1
 800094a:	f001 fbc1 	bl	80020d0 <LCD_1IN28_Init>

	printf("Paint_NewImage\r\n");
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <LCDInit+0x40>)
 8000950:	f005 f85a 	bl	8005a08 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, WHITE);
 8000954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000958:	2200      	movs	r2, #0
 800095a:	21f0      	movs	r1, #240	; 0xf0
 800095c:	20f0      	movs	r0, #240	; 0xf0
 800095e:	f000 fbc5 	bl	80010ec <Paint_NewImage>

	printf("Set Clear and Display Funtion\r\n");
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <LCDInit+0x44>)
 8000964:	f005 f850 	bl	8005a08 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <LCDInit+0x48>)
 800096a:	f000 fc0b 	bl	8001184 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <LCDInit+0x4c>)
 8000970:	f000 fc18 	bl	80011a4 <Paint_SetDisplayFuntion>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08006788 	.word	0x08006788
 800097c:	08006798 	.word	0x08006798
 8000980:	0800216d 	.word	0x0800216d
 8000984:	080021d9 	.word	0x080021d9

08000988 <LCDBootScreen>:

void LCDBootScreen() {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af02      	add	r7, sp, #8
	Paint_Clear(WHITE);
 800098e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000992:	f000 fcc7 	bl	8001324 <Paint_Clear>
	Paint_DrawString_EN(56, 120, "LunarWatch",&Font24,  WHITE, BLUE);
 8000996:	231f      	movs	r3, #31
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <LCDBootScreen+0x34>)
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <LCDBootScreen+0x38>)
 80009a4:	2178      	movs	r1, #120	; 0x78
 80009a6:	2038      	movs	r0, #56	; 0x38
 80009a8:	f001 f852 	bl	8001a50 <Paint_DrawString_EN>

	HAL_Delay(2000);
 80009ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b0:	f001 fcac 	bl	800230c <HAL_Delay>

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000004 	.word	0x20000004
 80009c0:	080067b8 	.word	0x080067b8

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_RTC_Init+0xac>)
 80009ea:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <MX_RTC_Init+0xb0>)
 80009ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <MX_RTC_Init+0xac>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_RTC_Init+0xac>)
 80009f6:	227f      	movs	r2, #127	; 0x7f
 80009f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_RTC_Init+0xac>)
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a12:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a14:	f003 f844 	bl	8003aa0 <HAL_RTC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f7ff ffd1 	bl	80009c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a3e:	f003 f8a5 	bl	8003b8c <HAL_RTC_SetTime>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a48:	f7ff ffbc 	bl	80009c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a50:	2301      	movs	r3, #1
 8000a52:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_RTC_Init+0xac>)
 8000a64:	f003 f98a 	bl	8003d7c <HAL_RTC_SetDate>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a6e:	f7ff ffa9 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000094 	.word	0x20000094
 8000a80:	40002800 	.word	0x40002800

08000a84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09a      	sub	sp, #104	; 0x68
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	225c      	movs	r2, #92	; 0x5c
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fe49 	bl	800572c <memset>
  if(rtcHandle->Instance==RTC)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_RTC_MspInit+0x4c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d111      	bne.n	8000ac8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fffc 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000abe:	f7ff ff81 	bl	80009c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <HAL_RTC_MspInit+0x50>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3768      	adds	r7, #104	; 0x68
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40002800 	.word	0x40002800
 8000ad4:	42470e3c 	.word	0x42470e3c

08000ad8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <MX_SPI1_Init+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_SPI1_Init+0x64>)
 8000b2a:	f003 fab7 	bl	800409c <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b34:	f7ff ff46 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000b4 	.word	0x200000b4
 8000b40:	40013000 	.word	0x40013000

08000b44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f001 fcb1 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f001 fc50 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f001 fb2c 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
  }

  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fcf7 	bl	80006c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
  }
  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f004 fca8 	bl	80056d8 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	2000010c 	.word	0x2000010c
 8000dbc:	200001d8 	.word	0x200001d8

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e08:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <MX_TIM3_Init+0xb0>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e0e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e30:	f003 fbc4 	bl	80045bc <HAL_TIM_PWM_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e3a:	f7ff fdc3 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e4e:	f004 f805 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e58:	f7ff fdb4 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5c:	2360      	movs	r3, #96	; 0x60
 8000e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e74:	f003 fcba 	bl	80047ec <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e7e:	f7ff fda1 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM3_Init+0xac>)
 8000e84:	f000 f82a 	bl	8000edc <HAL_TIM_MspPostInit>

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000110 	.word	0x20000110
 8000e94:	40000400 	.word	0x40000400

08000e98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40000400 	.word	0x40000400
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_TIM_MspPostInit+0x68>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d11d      	bne.n	8000f3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_MspPostInit+0x6c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_TIM_MspPostInit+0x70>)
 8000f36:	f001 faf3 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40000400 	.word	0x40000400
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800

08000f50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_USART2_UART_Init+0x50>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_USART2_UART_Init+0x4c>)
 8000f88:	f003 ffe4 	bl	8004f54 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f92:	f7ff fd17 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000158 	.word	0x20000158
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_UART_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0x8c>)
 800101a:	f001 fa81 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff feaf 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f004 fb3f 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fb3d 	bl	80006e4 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001078:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 800107c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001080:	200001d8 	.word	0x200001d8

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>
	...

08001088 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8001092:	1df9      	adds	r1, r7, #7
 8001094:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001098:	2201      	movs	r2, #1
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <DEV_SPI_WRite+0x20>)
 800109c:	f003 f887 	bl	80041ae <HAL_SPI_Transmit>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b4 	.word	0x200000b4

080010ac <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <DEV_Module_Init+0x34>)
 80010b8:	f001 fbc6 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <DEV_Module_Init+0x38>)
 80010c2:	f001 fbc1 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <DEV_Module_Init+0x34>)
 80010ce:	f001 fbbb 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d2:	2104      	movs	r1, #4
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <DEV_Module_Init+0x3c>)
 80010d6:	f003 fac1 	bl	800465c <HAL_TIM_PWM_Start>
		return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	20000110 	.word	0x20000110

080010ec <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	80fb      	strh	r3, [r7, #6]
 80010fe:	4603      	mov	r3, r0
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	4613      	mov	r3, r2
 8001108:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <Paint_NewImage+0x90>)
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <Paint_NewImage+0x90>)
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <Paint_NewImage+0x90>)
 8001118:	883b      	ldrh	r3, [r7, #0]
 800111a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <Paint_NewImage+0x90>)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <Paint_NewImage+0x90>)
 8001124:	88bb      	ldrh	r3, [r7, #4]
 8001126:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <Paint_NewImage+0x90>)
 800112a:	8a5b      	ldrh	r3, [r3, #18]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <Paint_NewImage+0x90>)
 8001132:	8a9b      	ldrh	r3, [r3, #20]
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <Paint_NewImage+0x94>)
 800113a:	f004 fbdf 	bl	80058fc <iprintf>
   
    Paint.Rotate = Rotate;
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <Paint_NewImage+0x90>)
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <Paint_NewImage+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <Paint_NewImage+0x6a>
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	2bb4      	cmp	r3, #180	; 0xb4
 8001154:	d106      	bne.n	8001164 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <Paint_NewImage+0x90>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <Paint_NewImage+0x90>)
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	80d3      	strh	r3, [r2, #6]
 8001162:	e006      	b.n	8001172 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8001164:	4a05      	ldr	r2, [pc, #20]	; (800117c <Paint_NewImage+0x90>)
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <Paint_NewImage+0x90>)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	80d3      	strh	r3, [r2, #6]
    }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	bf00      	nop
 800117c:	2000019c 	.word	0x2000019c
 8001180:	080067c4 	.word	0x080067c4

08001184 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <Paint_SetClearFuntion+0x1c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200001b8 	.word	0x200001b8

080011a4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <Paint_SetDisplayFuntion+0x1c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	200001b4 	.word	0x200001b4

080011c4 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	460b      	mov	r3, r1
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80011d6:	4b50      	ldr	r3, [pc, #320]	; (8001318 <Paint_SetPixel+0x154>)
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	88fa      	ldrh	r2, [r7, #6]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d805      	bhi.n	80011ee <Paint_SetPixel+0x2a>
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <Paint_SetPixel+0x154>)
 80011e4:	88db      	ldrh	r3, [r3, #6]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	88ba      	ldrh	r2, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d903      	bls.n	80011f6 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80011ee:	484b      	ldr	r0, [pc, #300]	; (800131c <Paint_SetPixel+0x158>)
 80011f0:	f004 fc0a 	bl	8005a08 <puts>
        return;
 80011f4:	e08c      	b.n	8001310 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80011f6:	4b48      	ldr	r3, [pc, #288]	; (8001318 <Paint_SetPixel+0x154>)
 80011f8:	89db      	ldrh	r3, [r3, #14]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001200:	d02d      	beq.n	800125e <Paint_SetPixel+0x9a>
 8001202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001206:	f300 8080 	bgt.w	800130a <Paint_SetPixel+0x146>
 800120a:	2bb4      	cmp	r3, #180	; 0xb4
 800120c:	d016      	beq.n	800123c <Paint_SetPixel+0x78>
 800120e:	2bb4      	cmp	r3, #180	; 0xb4
 8001210:	dc7b      	bgt.n	800130a <Paint_SetPixel+0x146>
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <Paint_SetPixel+0x58>
 8001216:	2b5a      	cmp	r3, #90	; 0x5a
 8001218:	d005      	beq.n	8001226 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800121a:	e076      	b.n	800130a <Paint_SetPixel+0x146>
        X = Xpoint;
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	81bb      	strh	r3, [r7, #12]
        break;
 8001224:	e026      	b.n	8001274 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <Paint_SetPixel+0x154>)
 8001228:	891b      	ldrh	r3, [r3, #8]
 800122a:	b29a      	uxth	r2, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	3b01      	subs	r3, #1
 8001234:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	81bb      	strh	r3, [r7, #12]
        break;
 800123a:	e01b      	b.n	8001274 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <Paint_SetPixel+0x154>)
 800123e:	891b      	ldrh	r3, [r3, #8]
 8001240:	b29a      	uxth	r2, r3
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <Paint_SetPixel+0x154>)
 800124e:	895b      	ldrh	r3, [r3, #10]
 8001250:	b29a      	uxth	r2, r3
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	3b01      	subs	r3, #1
 800125a:	81bb      	strh	r3, [r7, #12]
        break;
 800125c:	e00a      	b.n	8001274 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <Paint_SetPixel+0x154>)
 8001264:	895b      	ldrh	r3, [r3, #10]
 8001266:	b29a      	uxth	r2, r3
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	3b01      	subs	r3, #1
 8001270:	81bb      	strh	r3, [r7, #12]
        break;
 8001272:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <Paint_SetPixel+0x154>)
 8001276:	8a1b      	ldrh	r3, [r3, #16]
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d847      	bhi.n	800130e <Paint_SetPixel+0x14a>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <Paint_SetPixel+0xc0>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012db 	.word	0x080012db
 8001288:	08001295 	.word	0x08001295
 800128c:	080012a7 	.word	0x080012a7
 8001290:	080012b9 	.word	0x080012b9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <Paint_SetPixel+0x154>)
 8001296:	891b      	ldrh	r3, [r3, #8]
 8001298:	b29a      	uxth	r2, r3
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	3b01      	subs	r3, #1
 80012a2:	81fb      	strh	r3, [r7, #14]
        break;
 80012a4:	e01a      	b.n	80012dc <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <Paint_SetPixel+0x154>)
 80012a8:	895b      	ldrh	r3, [r3, #10]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	89bb      	ldrh	r3, [r7, #12]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3b01      	subs	r3, #1
 80012b4:	81bb      	strh	r3, [r7, #12]
        break;
 80012b6:	e011      	b.n	80012dc <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <Paint_SetPixel+0x154>)
 80012ba:	891b      	ldrh	r3, [r3, #8]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <Paint_SetPixel+0x154>)
 80012ca:	895b      	ldrh	r3, [r3, #10]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3b01      	subs	r3, #1
 80012d6:	81bb      	strh	r3, [r7, #12]
        break;
 80012d8:	e000      	b.n	80012dc <Paint_SetPixel+0x118>
        break;
 80012da:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <Paint_SetPixel+0x154>)
 80012de:	891b      	ldrh	r3, [r3, #8]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	89fa      	ldrh	r2, [r7, #14]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d805      	bhi.n	80012f4 <Paint_SetPixel+0x130>
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <Paint_SetPixel+0x154>)
 80012ea:	895b      	ldrh	r3, [r3, #10]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	89ba      	ldrh	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d903      	bls.n	80012fc <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <Paint_SetPixel+0x158>)
 80012f6:	f004 fb87 	bl	8005a08 <puts>
        return;
 80012fa:	e009      	b.n	8001310 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <Paint_SetPixel+0x15c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	89b9      	ldrh	r1, [r7, #12]
 8001304:	89f8      	ldrh	r0, [r7, #14]
 8001306:	4798      	blx	r3
 8001308:	e002      	b.n	8001310 <Paint_SetPixel+0x14c>
        return;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <Paint_SetPixel+0x14c>
        return;
 800130e:	bf00      	nop
}
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000019c 	.word	0x2000019c
 800131c:	080068c4 	.word	0x080068c4
 8001320:	200001b4 	.word	0x200001b4

08001324 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <Paint_Clear+0x1c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	4610      	mov	r0, r2
 8001336:	4798      	blx	r3
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001b8 	.word	0x200001b8

08001344 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	80fb      	strh	r3, [r7, #6]
 8001356:	4603      	mov	r3, r0
 8001358:	80bb      	strh	r3, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	807b      	strh	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <Paint_DrawPoint+0x130>)
 8001364:	889b      	ldrh	r3, [r3, #4]
 8001366:	b29b      	uxth	r3, r3
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	429a      	cmp	r2, r3
 800136c:	d805      	bhi.n	800137a <Paint_DrawPoint+0x36>
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <Paint_DrawPoint+0x130>)
 8001370:	88db      	ldrh	r3, [r3, #6]
 8001372:	b29b      	uxth	r3, r3
 8001374:	88ba      	ldrh	r2, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	d903      	bls.n	8001382 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800137a:	483f      	ldr	r0, [pc, #252]	; (8001478 <Paint_DrawPoint+0x134>)
 800137c:	f004 fb44 	bl	8005a08 <puts>
        return;
 8001380:	e074      	b.n	800146c <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8001382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d144      	bne.n	8001414 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 800138a:	2300      	movs	r3, #0
 800138c:	81fb      	strh	r3, [r7, #14]
 800138e:	e039      	b.n	8001404 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001390:	2300      	movs	r3, #0
 8001392:	81bb      	strh	r3, [r7, #12]
 8001394:	e029      	b.n	80013ea <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800139c:	441a      	add	r2, r3
 800139e:	787b      	ldrb	r3, [r7, #1]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db28      	blt.n	80013f8 <Paint_DrawPoint+0xb4>
 80013a6:	88ba      	ldrh	r2, [r7, #4]
 80013a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ac:	441a      	add	r2, r3
 80013ae:	787b      	ldrb	r3, [r7, #1]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db20      	blt.n	80013f8 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80013b6:	89fa      	ldrh	r2, [r7, #14]
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	787b      	ldrb	r3, [r7, #1]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b298      	uxth	r0, r3
 80013c6:	89ba      	ldrh	r2, [r7, #12]
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	787b      	ldrb	r3, [r7, #1]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fef3 	bl	80011c4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80013de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	81bb      	strh	r3, [r7, #12]
 80013ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013ee:	787b      	ldrb	r3, [r7, #1]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3b01      	subs	r3, #1
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbce      	blt.n	8001396 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80013f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	b29b      	uxth	r3, r3
 8001402:	81fb      	strh	r3, [r7, #14]
 8001404:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	3b01      	subs	r3, #1
 800140e:	429a      	cmp	r2, r3
 8001410:	dbbe      	blt.n	8001390 <Paint_DrawPoint+0x4c>
 8001412:	e02b      	b.n	800146c <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001414:	2300      	movs	r3, #0
 8001416:	81fb      	strh	r3, [r7, #14]
 8001418:	e023      	b.n	8001462 <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800141a:	2300      	movs	r3, #0
 800141c:	81bb      	strh	r3, [r7, #12]
 800141e:	e015      	b.n	800144c <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001420:	89fa      	ldrh	r2, [r7, #14]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	4413      	add	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	3b01      	subs	r3, #1
 800142a:	b298      	uxth	r0, r3
 800142c:	89ba      	ldrh	r2, [r7, #12]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	3b01      	subs	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fec2 	bl	80011c4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001444:	b29b      	uxth	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	81bb      	strh	r3, [r7, #12]
 800144c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	429a      	cmp	r2, r3
 8001454:	dbe4      	blt.n	8001420 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001466:	787b      	ldrb	r3, [r7, #1]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbd6      	blt.n	800141a <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	2000019c 	.word	0x2000019c
 8001478:	080068ec 	.word	0x080068ec

0800147c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08d      	sub	sp, #52	; 0x34
 8001480:	af02      	add	r7, sp, #8
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	4603      	mov	r3, r0
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	807b      	strh	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <Paint_DrawLine+0x154>)
 800149c:	889b      	ldrh	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d811      	bhi.n	80014ca <Paint_DrawLine+0x4e>
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <Paint_DrawLine+0x154>)
 80014a8:	88db      	ldrh	r3, [r3, #6]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	88ba      	ldrh	r2, [r7, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d80b      	bhi.n	80014ca <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <Paint_DrawLine+0x154>)
 80014b4:	889b      	ldrh	r3, [r3, #4]
 80014b6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80014b8:	887a      	ldrh	r2, [r7, #2]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d805      	bhi.n	80014ca <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <Paint_DrawLine+0x154>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	883a      	ldrh	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d903      	bls.n	80014d2 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80014ca:	4842      	ldr	r0, [pc, #264]	; (80015d4 <Paint_DrawLine+0x158>)
 80014cc:	f004 fa9c 	bl	8005a08 <puts>
        return;
 80014d0:	e07b      	b.n	80015ca <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfb8      	it	lt
 80014e4:	425b      	neglt	r3, r3
 80014e6:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80014e8:	883a      	ldrh	r2, [r7, #0]
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	425b      	negs	r3, r3
 80014f6:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d201      	bcs.n	8001504 <Paint_DrawLine+0x88>
 8001500:	2301      	movs	r3, #1
 8001502:	e001      	b.n	8001508 <Paint_DrawLine+0x8c>
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800150a:	88ba      	ldrh	r2, [r7, #4]
 800150c:	883b      	ldrh	r3, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d201      	bcs.n	8001516 <Paint_DrawLine+0x9a>
 8001512:	2301      	movs	r3, #1
 8001514:	e001      	b.n	800151a <Paint_DrawLine+0x9e>
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	4413      	add	r3, r2
 8001522:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001528:	7ffb      	ldrb	r3, [r7, #31]
 800152a:	3301      	adds	r3, #1
 800152c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800152e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001532:	2b01      	cmp	r3, #1
 8001534:	d118      	bne.n	8001568 <Paint_DrawLine+0xec>
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <Paint_DrawLine+0x15c>)
 800153a:	fba3 1302 	umull	r1, r3, r3, r2
 800153e:	0859      	lsrs	r1, r3, #1
 8001540:	460b      	mov	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	440b      	add	r3, r1
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10c      	bne.n	8001568 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800154e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001552:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001554:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001556:	2201      	movs	r2, #1
 8001558:	9200      	str	r2, [sp, #0]
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	f7ff fef1 	bl	8001344 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	77fb      	strb	r3, [r7, #31]
 8001566:	e008      	b.n	800157a <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8001568:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800156c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800156e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001570:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001572:	2401      	movs	r4, #1
 8001574:	9400      	str	r4, [sp, #0]
 8001576:	f7ff fee5 	bl	8001344 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	dc0c      	bgt.n	800159e <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8001584:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	429a      	cmp	r2, r3
 800158a:	d01b      	beq.n	80015c4 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800158c:	6a3a      	ldr	r2, [r7, #32]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4413      	add	r3, r2
 8001592:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	b29a      	uxth	r2, r3
 8001598:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159a:	4413      	add	r3, r2
 800159c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbbf      	blt.n	8001528 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 80015a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015aa:	883b      	ldrh	r3, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d00b      	beq.n	80015c8 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4413      	add	r3, r2
 80015b6:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015be:	4413      	add	r3, r2
 80015c0:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80015c2:	e7b1      	b.n	8001528 <Paint_DrawLine+0xac>
                break;
 80015c4:	bf00      	nop
 80015c6:	e000      	b.n	80015ca <Paint_DrawLine+0x14e>
                break;
 80015c8:	bf00      	nop
        }
    }
}
 80015ca:	372c      	adds	r7, #44	; 0x2c
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	2000019c 	.word	0x2000019c
 80015d4:	0800692c 	.word	0x0800692c
 80015d8:	aaaaaaab 	.word	0xaaaaaaab

080015dc <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	4604      	mov	r4, r0
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	4603      	mov	r3, r0
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <Paint_DrawCircle+0x1c0>)
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d805      	bhi.n	8001612 <Paint_DrawCircle+0x36>
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <Paint_DrawCircle+0x1c0>)
 8001608:	88db      	ldrh	r3, [r3, #6]
 800160a:	b29b      	uxth	r3, r3
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d303      	bcc.n	800161a <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8001612:	4863      	ldr	r0, [pc, #396]	; (80017a0 <Paint_DrawCircle+0x1c4>)
 8001614:	f004 f9f8 	bl	8005a08 <puts>
        return;
 8001618:	e16b      	b.n	80018f2 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	f1c3 0303 	rsb	r3, r3, #3
 800162c:	b29b      	uxth	r3, r3
 800162e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001634:	2b01      	cmp	r3, #1
 8001636:	f040 8155 	bne.w	80018e4 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800163a:	e0a6      	b.n	800178a <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800163c:	89fb      	ldrh	r3, [r7, #14]
 800163e:	813b      	strh	r3, [r7, #8]
 8001640:	e075      	b.n	800172e <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001642:	89fa      	ldrh	r2, [r7, #14]
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	4413      	add	r3, r2
 8001648:	b298      	uxth	r0, r3
 800164a:	893a      	ldrh	r2, [r7, #8]
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	b299      	uxth	r1, r3
 8001652:	883a      	ldrh	r2, [r7, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	f7ff fe73 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b298      	uxth	r0, r3
 8001666:	893a      	ldrh	r2, [r7, #8]
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	b299      	uxth	r1, r3
 800166e:	883a      	ldrh	r2, [r7, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2301      	movs	r3, #1
 8001676:	f7ff fe65 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800167a:	893b      	ldrh	r3, [r7, #8]
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b298      	uxth	r0, r3
 8001682:	89fa      	ldrh	r2, [r7, #14]
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	b299      	uxth	r1, r3
 800168a:	883a      	ldrh	r2, [r7, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	f7ff fe57 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8001696:	893b      	ldrh	r3, [r7, #8]
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	b298      	uxth	r0, r3
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	b299      	uxth	r1, r3
 80016a6:	883a      	ldrh	r2, [r7, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	f7ff fe49 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b298      	uxth	r0, r3
 80016ba:	893b      	ldrh	r3, [r7, #8]
 80016bc:	88ba      	ldrh	r2, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b299      	uxth	r1, r3
 80016c2:	883a      	ldrh	r2, [r7, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2301      	movs	r3, #1
 80016ca:	f7ff fe3b 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 80016ce:	89fa      	ldrh	r2, [r7, #14]
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4413      	add	r3, r2
 80016d4:	b298      	uxth	r0, r3
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	88ba      	ldrh	r2, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b299      	uxth	r1, r3
 80016de:	883a      	ldrh	r2, [r7, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	f7ff fe2d 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 80016ea:	893a      	ldrh	r2, [r7, #8]
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4413      	add	r3, r2
 80016f0:	b298      	uxth	r0, r3
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b299      	uxth	r1, r3
 80016fa:	883a      	ldrh	r2, [r7, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	f7ff fe1f 	bl	8001344 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001706:	893a      	ldrh	r2, [r7, #8]
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	4413      	add	r3, r2
 800170c:	b298      	uxth	r0, r3
 800170e:	89fa      	ldrh	r2, [r7, #14]
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	b299      	uxth	r1, r3
 8001716:	883a      	ldrh	r2, [r7, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	f7ff fe11 	bl	8001344 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001722:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001726:	b29b      	uxth	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001736:	429a      	cmp	r2, r3
 8001738:	dd83      	ble.n	8001642 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800173a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800173e:	2b00      	cmp	r3, #0
 8001740:	da09      	bge.n	8001756 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b29a      	uxth	r2, r3
 8001748:	897b      	ldrh	r3, [r7, #10]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	3306      	adds	r3, #6
 8001750:	b29b      	uxth	r3, r3
 8001752:	817b      	strh	r3, [r7, #10]
 8001754:	e013      	b.n	800177e <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001756:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800175a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	b29a      	uxth	r2, r3
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	4413      	add	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	330a      	adds	r3, #10
 800176e:	b29b      	uxth	r3, r3
 8001770:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001772:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800177e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001782:	b29b      	uxth	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	b29b      	uxth	r3, r3
 8001788:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800178a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800178e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	f77f af52 	ble.w	800163c <Paint_DrawCircle+0x60>
 8001798:	e0ab      	b.n	80018f2 <Paint_DrawCircle+0x316>
 800179a:	bf00      	nop
 800179c:	2000019c 	.word	0x2000019c
 80017a0:	0800699c 	.word	0x0800699c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80017a4:	89fa      	ldrh	r2, [r7, #14]
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4413      	add	r3, r2
 80017aa:	b298      	uxth	r0, r3
 80017ac:	89ba      	ldrh	r2, [r7, #12]
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	b299      	uxth	r1, r3
 80017b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b8:	883a      	ldrh	r2, [r7, #0]
 80017ba:	2401      	movs	r4, #1
 80017bc:	9400      	str	r4, [sp, #0]
 80017be:	f7ff fdc1 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 80017c2:	89fb      	ldrh	r3, [r7, #14]
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	b298      	uxth	r0, r3
 80017ca:	89ba      	ldrh	r2, [r7, #12]
 80017cc:	88bb      	ldrh	r3, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	b299      	uxth	r1, r3
 80017d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	2401      	movs	r4, #1
 80017da:	9400      	str	r4, [sp, #0]
 80017dc:	f7ff fdb2 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 80017e0:	89bb      	ldrh	r3, [r7, #12]
 80017e2:	88fa      	ldrh	r2, [r7, #6]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b298      	uxth	r0, r3
 80017e8:	89fa      	ldrh	r2, [r7, #14]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	b299      	uxth	r1, r3
 80017f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f4:	883a      	ldrh	r2, [r7, #0]
 80017f6:	2401      	movs	r4, #1
 80017f8:	9400      	str	r4, [sp, #0]
 80017fa:	f7ff fda3 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 80017fe:	89bb      	ldrh	r3, [r7, #12]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	b298      	uxth	r0, r3
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	88ba      	ldrh	r2, [r7, #4]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b299      	uxth	r1, r3
 800180e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001812:	883a      	ldrh	r2, [r7, #0]
 8001814:	2401      	movs	r4, #1
 8001816:	9400      	str	r4, [sp, #0]
 8001818:	f7ff fd94 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b298      	uxth	r0, r3
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	88ba      	ldrh	r2, [r7, #4]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b299      	uxth	r1, r3
 800182c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001830:	883a      	ldrh	r2, [r7, #0]
 8001832:	2401      	movs	r4, #1
 8001834:	9400      	str	r4, [sp, #0]
 8001836:	f7ff fd85 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800183a:	89fa      	ldrh	r2, [r7, #14]
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4413      	add	r3, r2
 8001840:	b298      	uxth	r0, r3
 8001842:	89bb      	ldrh	r3, [r7, #12]
 8001844:	88ba      	ldrh	r2, [r7, #4]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b299      	uxth	r1, r3
 800184a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800184e:	883a      	ldrh	r2, [r7, #0]
 8001850:	2401      	movs	r4, #1
 8001852:	9400      	str	r4, [sp, #0]
 8001854:	f7ff fd76 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001858:	89ba      	ldrh	r2, [r7, #12]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4413      	add	r3, r2
 800185e:	b298      	uxth	r0, r3
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	88ba      	ldrh	r2, [r7, #4]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b299      	uxth	r1, r3
 8001868:	f897 3020 	ldrb.w	r3, [r7, #32]
 800186c:	883a      	ldrh	r2, [r7, #0]
 800186e:	2401      	movs	r4, #1
 8001870:	9400      	str	r4, [sp, #0]
 8001872:	f7ff fd67 	bl	8001344 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8001876:	89ba      	ldrh	r2, [r7, #12]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4413      	add	r3, r2
 800187c:	b298      	uxth	r0, r3
 800187e:	89fa      	ldrh	r2, [r7, #14]
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	b299      	uxth	r1, r3
 8001886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188a:	883a      	ldrh	r2, [r7, #0]
 800188c:	2401      	movs	r4, #1
 800188e:	9400      	str	r4, [sp, #0]
 8001890:	f7ff fd58 	bl	8001344 <Paint_DrawPoint>

            if (Esp < 0 )
 8001894:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001898:	2b00      	cmp	r3, #0
 800189a:	da09      	bge.n	80018b0 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800189c:	89fb      	ldrh	r3, [r7, #14]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3306      	adds	r3, #6
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	817b      	strh	r3, [r7, #10]
 80018ae:	e013      	b.n	80018d8 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80018b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	897b      	ldrh	r3, [r7, #10]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	330a      	adds	r3, #10
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80018cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80018d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80018e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f77f af59 	ble.w	80017a4 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	4603      	mov	r3, r0
 8001902:	81fb      	strh	r3, [r7, #14]
 8001904:	460b      	mov	r3, r1
 8001906:	81bb      	strh	r3, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800190c:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <Paint_DrawChar+0x150>)
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	b29b      	uxth	r3, r3
 8001912:	89fa      	ldrh	r2, [r7, #14]
 8001914:	429a      	cmp	r2, r3
 8001916:	d805      	bhi.n	8001924 <Paint_DrawChar+0x2c>
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <Paint_DrawChar+0x150>)
 800191a:	88db      	ldrh	r3, [r3, #6]
 800191c:	b29b      	uxth	r3, r3
 800191e:	89ba      	ldrh	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d903      	bls.n	800192c <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001924:	4849      	ldr	r0, [pc, #292]	; (8001a4c <Paint_DrawChar+0x154>)
 8001926:	f004 f86f 	bl	8005a08 <puts>
        return;
 800192a:	e089      	b.n	8001a40 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	3b20      	subs	r3, #32
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	88d2      	ldrh	r2, [r2, #6]
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	8892      	ldrh	r2, [r2, #4]
 800193c:	08d2      	lsrs	r2, r2, #3
 800193e:	b292      	uxth	r2, r2
 8001940:	4611      	mov	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	8892      	ldrh	r2, [r2, #4]
 8001946:	f002 0207 	and.w	r2, r2, #7
 800194a:	b292      	uxth	r2, r2
 800194c:	2a00      	cmp	r2, #0
 800194e:	bf14      	ite	ne
 8001950:	2201      	movne	r2, #1
 8001952:	2200      	moveq	r2, #0
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440a      	add	r2, r1
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001968:	2300      	movs	r3, #0
 800196a:	83fb      	strh	r3, [r7, #30]
 800196c:	e063      	b.n	8001a36 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800196e:	2300      	movs	r3, #0
 8001970:	83bb      	strh	r3, [r7, #28]
 8001972:	e04e      	b.n	8001a12 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001974:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197a:	4293      	cmp	r3, r2
 800197c:	d118      	bne.n	80019b0 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	8bbb      	ldrh	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	fa42 f303 	asr.w	r3, r2, r3
 8001990:	400b      	ands	r3, r1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d031      	beq.n	80019fa <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001996:	89fa      	ldrh	r2, [r7, #14]
 8001998:	8bbb      	ldrh	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	b298      	uxth	r0, r3
 800199e:	89ba      	ldrh	r2, [r7, #12]
 80019a0:	8bfb      	ldrh	r3, [r7, #30]
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff fc0b 	bl	80011c4 <Paint_SetPixel>
 80019ae:	e024      	b.n	80019fa <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	8bbb      	ldrh	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	fa42 f303 	asr.w	r3, r2, r3
 80019c2:	400b      	ands	r3, r1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	8bbb      	ldrh	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	b298      	uxth	r0, r3
 80019d0:	89ba      	ldrh	r2, [r7, #12]
 80019d2:	8bfb      	ldrh	r3, [r7, #30]
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff fbf2 	bl	80011c4 <Paint_SetPixel>
 80019e0:	e00b      	b.n	80019fa <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80019e2:	89fa      	ldrh	r2, [r7, #14]
 80019e4:	8bbb      	ldrh	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	b298      	uxth	r0, r3
 80019ea:	89ba      	ldrh	r2, [r7, #12]
 80019ec:	8bfb      	ldrh	r3, [r7, #30]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff fbe5 	bl	80011c4 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80019fa:	8bbb      	ldrh	r3, [r7, #28]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d102      	bne.n	8001a0c <Paint_DrawChar+0x114>
                ptr++;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001a0c:	8bbb      	ldrh	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	83bb      	strh	r3, [r7, #28]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	889b      	ldrh	r3, [r3, #4]
 8001a16:	8bba      	ldrh	r2, [r7, #28]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3ab      	bcc.n	8001974 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	889b      	ldrh	r3, [r3, #4]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <Paint_DrawChar+0x138>
            ptr++;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001a30:	8bfb      	ldrh	r3, [r7, #30]
 8001a32:	3301      	adds	r3, #1
 8001a34:	83fb      	strh	r3, [r7, #30]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	88db      	ldrh	r3, [r3, #6]
 8001a3a:	8bfa      	ldrh	r2, [r7, #30]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d396      	bcc.n	800196e <Paint_DrawChar+0x76>
    }// Write all
}
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000019c 	.word	0x2000019c
 8001a4c:	080069e0 	.word	0x080069e0

08001a50 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <Paint_DrawString_EN+0xa8>)
 8001a6c:	889b      	ldrh	r3, [r3, #4]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	89fa      	ldrh	r2, [r7, #14]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d805      	bhi.n	8001a82 <Paint_DrawString_EN+0x32>
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <Paint_DrawString_EN+0xa8>)
 8001a78:	88db      	ldrh	r3, [r3, #6]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	89ba      	ldrh	r2, [r7, #12]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d933      	bls.n	8001aea <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001a82:	481e      	ldr	r0, [pc, #120]	; (8001afc <Paint_DrawString_EN+0xac>)
 8001a84:	f003 ffc0 	bl	8005a08 <puts>
        return;
 8001a88:	e033      	b.n	8001af2 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001a8a:	8afb      	ldrh	r3, [r7, #22]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	8892      	ldrh	r2, [r2, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <Paint_DrawString_EN+0xa8>)
 8001a94:	8892      	ldrh	r2, [r2, #4]
 8001a96:	b292      	uxth	r2, r2
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	dd06      	ble.n	8001aaa <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	88da      	ldrh	r2, [r3, #6]
 8001aa4:	8abb      	ldrh	r3, [r7, #20]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001aaa:	8abb      	ldrh	r3, [r7, #20]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	88d2      	ldrh	r2, [r2, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <Paint_DrawString_EN+0xa8>)
 8001ab4:	88d2      	ldrh	r2, [r2, #6]
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dd03      	ble.n	8001ac4 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001ac0:	89bb      	ldrh	r3, [r7, #12]
 8001ac2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	8ab9      	ldrh	r1, [r7, #20]
 8001aca:	8af8      	ldrh	r0, [r7, #22]
 8001acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	8c3b      	ldrh	r3, [r7, #32]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f7ff ff0f 	bl	80018f8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	889a      	ldrh	r2, [r3, #4]
 8001ae4:	8afb      	ldrh	r3, [r7, #22]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1cb      	bne.n	8001a8a <Paint_DrawString_EN+0x3a>
    }
}
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000019c 	.word	0x2000019c
 8001afc:	08006a20 	.word	0x08006a20

08001b00 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LCD_1IN28_Reset+0x40>)
 8001b0c:	f000 fe9c 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001b10:	2064      	movs	r0, #100	; 0x64
 8001b12:	f000 fbfb 	bl	800230c <HAL_Delay>
    LCD_1IN28_RST_0;
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <LCD_1IN28_Reset+0x40>)
 8001b1e:	f000 fe93 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001b22:	2064      	movs	r0, #100	; 0x64
 8001b24:	f000 fbf2 	bl	800230c <HAL_Delay>
    LCD_1IN28_RST_1;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <LCD_1IN28_Reset+0x40>)
 8001b30:	f000 fe8a 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	f000 fbe9 	bl	800230c <HAL_Delay>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020000 	.word	0x40020000

08001b44 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <LCD_1IN28_SendCommand+0x30>)
 8001b56:	f000 fe77 	bl	8002848 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <LCD_1IN28_SendCommand+0x34>)
 8001b60:	f000 fe72 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa8e 	bl	8001088 <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400

08001b7c <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001b8e:	f000 fe5b 	bl	8002848 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001b92:	2200      	movs	r2, #0
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <LCD_1IN28_SendData_8Bit+0x40>)
 8001b98:	f000 fe56 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fa72 	bl	8001088 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <LCD_1IN28_SendData_8Bit+0x40>)
 8001baa:	f000 fe4d 	bl	8002848 <HAL_GPIO_WritePin>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <LCD_1IN28_SendData_16Bit+0x4c>)
 8001bd2:	f000 fe39 	bl	8002848 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2140      	movs	r1, #64	; 0x40
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <LCD_1IN28_SendData_16Bit+0x50>)
 8001bdc:	f000 fe34 	bl	8002848 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa4d 	bl	8001088 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa48 	bl	8001088 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <LCD_1IN28_SendData_16Bit+0x50>)
 8001bfe:	f000 fe23 	bl	8002848 <HAL_GPIO_WritePin>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400

08001c14 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001c18:	20ef      	movs	r0, #239	; 0xef
 8001c1a:	f7ff ff93 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8001c1e:	20eb      	movs	r0, #235	; 0xeb
 8001c20:	f7ff ff90 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffa9 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8001c2a:	20fe      	movs	r0, #254	; 0xfe
 8001c2c:	f7ff ff8a 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8001c30:	20ef      	movs	r0, #239	; 0xef
 8001c32:	f7ff ff87 	bl	8001b44 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8001c36:	20eb      	movs	r0, #235	; 0xeb
 8001c38:	f7ff ff84 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001c3c:	2014      	movs	r0, #20
 8001c3e:	f7ff ff9d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8001c42:	2084      	movs	r0, #132	; 0x84
 8001c44:	f7ff ff7e 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001c48:	2040      	movs	r0, #64	; 0x40
 8001c4a:	f7ff ff97 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8001c4e:	2085      	movs	r0, #133	; 0x85
 8001c50:	f7ff ff78 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001c54:	20ff      	movs	r0, #255	; 0xff
 8001c56:	f7ff ff91 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8001c5a:	2086      	movs	r0, #134	; 0x86
 8001c5c:	f7ff ff72 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001c60:	20ff      	movs	r0, #255	; 0xff
 8001c62:	f7ff ff8b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8001c66:	2087      	movs	r0, #135	; 0x87
 8001c68:	f7ff ff6c 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001c6c:	20ff      	movs	r0, #255	; 0xff
 8001c6e:	f7ff ff85 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8001c72:	2088      	movs	r0, #136	; 0x88
 8001c74:	f7ff ff66 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f7ff ff7f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8001c7e:	2089      	movs	r0, #137	; 0x89
 8001c80:	f7ff ff60 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001c84:	2021      	movs	r0, #33	; 0x21
 8001c86:	f7ff ff79 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001c8a:	208a      	movs	r0, #138	; 0x8a
 8001c8c:	f7ff ff5a 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff ff73 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001c96:	208b      	movs	r0, #139	; 0x8b
 8001c98:	f7ff ff54 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001c9c:	2080      	movs	r0, #128	; 0x80
 8001c9e:	f7ff ff6d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8001ca2:	208c      	movs	r0, #140	; 0x8c
 8001ca4:	f7ff ff4e 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff ff67 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001cae:	208d      	movs	r0, #141	; 0x8d
 8001cb0:	f7ff ff48 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff ff61 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001cba:	208e      	movs	r0, #142	; 0x8e
 8001cbc:	f7ff ff42 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001cc0:	20ff      	movs	r0, #255	; 0xff
 8001cc2:	f7ff ff5b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8001cc6:	208f      	movs	r0, #143	; 0x8f
 8001cc8:	f7ff ff3c 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001ccc:	20ff      	movs	r0, #255	; 0xff
 8001cce:	f7ff ff55 	bl	8001b7c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8001cd2:	20b6      	movs	r0, #182	; 0xb6
 8001cd4:	f7ff ff36 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff ff4f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8001cde:	2020      	movs	r0, #32
 8001ce0:	f7ff ff4c 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001ce4:	2036      	movs	r0, #54	; 0x36
 8001ce6:	f7ff ff2d 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001cea:	2008      	movs	r0, #8
 8001cec:	f7ff ff46 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001cf0:	203a      	movs	r0, #58	; 0x3a
 8001cf2:	f7ff ff27 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f7ff ff40 	bl	8001b7c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001cfc:	2090      	movs	r0, #144	; 0x90
 8001cfe:	f7ff ff21 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001d02:	2008      	movs	r0, #8
 8001d04:	f7ff ff3a 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001d08:	2008      	movs	r0, #8
 8001d0a:	f7ff ff37 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001d0e:	2008      	movs	r0, #8
 8001d10:	f7ff ff34 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001d14:	2008      	movs	r0, #8
 8001d16:	f7ff ff31 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001d1a:	20bd      	movs	r0, #189	; 0xbd
 8001d1c:	f7ff ff12 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001d20:	2006      	movs	r0, #6
 8001d22:	f7ff ff2b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001d26:	20bc      	movs	r0, #188	; 0xbc
 8001d28:	f7ff ff0c 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff ff25 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8001d32:	20ff      	movs	r0, #255	; 0xff
 8001d34:	f7ff ff06 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001d38:	2060      	movs	r0, #96	; 0x60
 8001d3a:	f7ff ff1f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff ff1c 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001d44:	2004      	movs	r0, #4
 8001d46:	f7ff ff19 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001d4a:	20c3      	movs	r0, #195	; 0xc3
 8001d4c:	f7ff fefa 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001d50:	2013      	movs	r0, #19
 8001d52:	f7ff ff13 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001d56:	20c4      	movs	r0, #196	; 0xc4
 8001d58:	f7ff fef4 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001d5c:	2013      	movs	r0, #19
 8001d5e:	f7ff ff0d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8001d62:	20c9      	movs	r0, #201	; 0xc9
 8001d64:	f7ff feee 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001d68:	2022      	movs	r0, #34	; 0x22
 8001d6a:	f7ff ff07 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8001d6e:	20be      	movs	r0, #190	; 0xbe
 8001d70:	f7ff fee8 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001d74:	2011      	movs	r0, #17
 8001d76:	f7ff ff01 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001d7a:	20e1      	movs	r0, #225	; 0xe1
 8001d7c:	f7ff fee2 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001d80:	2010      	movs	r0, #16
 8001d82:	f7ff fefb 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001d86:	200e      	movs	r0, #14
 8001d88:	f7ff fef8 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001d8c:	20df      	movs	r0, #223	; 0xdf
 8001d8e:	f7ff fed9 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001d92:	2021      	movs	r0, #33	; 0x21
 8001d94:	f7ff fef2 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001d98:	200c      	movs	r0, #12
 8001d9a:	f7ff feef 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f7ff feec 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001da4:	20f0      	movs	r0, #240	; 0xf0
 8001da6:	f7ff fecd 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001daa:	2045      	movs	r0, #69	; 0x45
 8001dac:	f7ff fee6 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001db0:	2009      	movs	r0, #9
 8001db2:	f7ff fee3 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001db6:	2008      	movs	r0, #8
 8001db8:	f7ff fee0 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f7ff fedd 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001dc2:	2026      	movs	r0, #38	; 0x26
 8001dc4:	f7ff feda 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001dc8:	202a      	movs	r0, #42	; 0x2a
 8001dca:	f7ff fed7 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8001dce:	20f1      	movs	r0, #241	; 0xf1
 8001dd0:	f7ff feb8 	bl	8001b44 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001dd4:	2043      	movs	r0, #67	; 0x43
 8001dd6:	f7ff fed1 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001dda:	2070      	movs	r0, #112	; 0x70
 8001ddc:	f7ff fece 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001de0:	2072      	movs	r0, #114	; 0x72
 8001de2:	f7ff fecb 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001de6:	2036      	movs	r0, #54	; 0x36
 8001de8:	f7ff fec8 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001dec:	2037      	movs	r0, #55	; 0x37
 8001dee:	f7ff fec5 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001df2:	206f      	movs	r0, #111	; 0x6f
 8001df4:	f7ff fec2 	bl	8001b7c <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001df8:	20f2      	movs	r0, #242	; 0xf2
 8001dfa:	f7ff fea3 	bl	8001b44 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8001dfe:	2045      	movs	r0, #69	; 0x45
 8001e00:	f7ff febc 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001e04:	2009      	movs	r0, #9
 8001e06:	f7ff feb9 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001e0a:	2008      	movs	r0, #8
 8001e0c:	f7ff feb6 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001e10:	2008      	movs	r0, #8
 8001e12:	f7ff feb3 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001e16:	2026      	movs	r0, #38	; 0x26
 8001e18:	f7ff feb0 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001e1c:	202a      	movs	r0, #42	; 0x2a
 8001e1e:	f7ff fead 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8001e22:	20f3      	movs	r0, #243	; 0xf3
 8001e24:	f7ff fe8e 	bl	8001b44 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001e28:	2043      	movs	r0, #67	; 0x43
 8001e2a:	f7ff fea7 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001e2e:	2070      	movs	r0, #112	; 0x70
 8001e30:	f7ff fea4 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001e34:	2072      	movs	r0, #114	; 0x72
 8001e36:	f7ff fea1 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001e3a:	2036      	movs	r0, #54	; 0x36
 8001e3c:	f7ff fe9e 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001e40:	2037      	movs	r0, #55	; 0x37
 8001e42:	f7ff fe9b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001e46:	206f      	movs	r0, #111	; 0x6f
 8001e48:	f7ff fe98 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001e4c:	20ed      	movs	r0, #237	; 0xed
 8001e4e:	f7ff fe79 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8001e52:	201b      	movs	r0, #27
 8001e54:	f7ff fe92 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001e58:	200b      	movs	r0, #11
 8001e5a:	f7ff fe8f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8001e5e:	20ae      	movs	r0, #174	; 0xae
 8001e60:	f7ff fe70 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001e64:	2077      	movs	r0, #119	; 0x77
 8001e66:	f7ff fe89 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001e6a:	20cd      	movs	r0, #205	; 0xcd
 8001e6c:	f7ff fe6a 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001e70:	2063      	movs	r0, #99	; 0x63
 8001e72:	f7ff fe83 	bl	8001b7c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001e76:	2070      	movs	r0, #112	; 0x70
 8001e78:	f7ff fe64 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001e7c:	2007      	movs	r0, #7
 8001e7e:	f7ff fe7d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001e82:	2007      	movs	r0, #7
 8001e84:	f7ff fe7a 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001e88:	2004      	movs	r0, #4
 8001e8a:	f7ff fe77 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001e8e:	200e      	movs	r0, #14
 8001e90:	f7ff fe74 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001e94:	200f      	movs	r0, #15
 8001e96:	f7ff fe71 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001e9a:	2009      	movs	r0, #9
 8001e9c:	f7ff fe6e 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001ea0:	2007      	movs	r0, #7
 8001ea2:	f7ff fe6b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f7ff fe68 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f7ff fe65 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8001eb2:	20e8      	movs	r0, #232	; 0xe8
 8001eb4:	f7ff fe46 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001eb8:	2034      	movs	r0, #52	; 0x34
 8001eba:	f7ff fe5f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001ebe:	2062      	movs	r0, #98	; 0x62
 8001ec0:	f7ff fe40 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001ec4:	2018      	movs	r0, #24
 8001ec6:	f7ff fe59 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001eca:	200d      	movs	r0, #13
 8001ecc:	f7ff fe56 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001ed0:	2071      	movs	r0, #113	; 0x71
 8001ed2:	f7ff fe53 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001ed6:	20ed      	movs	r0, #237	; 0xed
 8001ed8:	f7ff fe50 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001edc:	2070      	movs	r0, #112	; 0x70
 8001ede:	f7ff fe4d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001ee2:	2070      	movs	r0, #112	; 0x70
 8001ee4:	f7ff fe4a 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001ee8:	2018      	movs	r0, #24
 8001eea:	f7ff fe47 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff fe44 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001ef4:	2071      	movs	r0, #113	; 0x71
 8001ef6:	f7ff fe41 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001efa:	20ef      	movs	r0, #239	; 0xef
 8001efc:	f7ff fe3e 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001f00:	2070      	movs	r0, #112	; 0x70
 8001f02:	f7ff fe3b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001f06:	2070      	movs	r0, #112	; 0x70
 8001f08:	f7ff fe38 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001f0c:	2063      	movs	r0, #99	; 0x63
 8001f0e:	f7ff fe19 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001f12:	2018      	movs	r0, #24
 8001f14:	f7ff fe32 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001f18:	2011      	movs	r0, #17
 8001f1a:	f7ff fe2f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001f1e:	2071      	movs	r0, #113	; 0x71
 8001f20:	f7ff fe2c 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001f24:	20f1      	movs	r0, #241	; 0xf1
 8001f26:	f7ff fe29 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001f2a:	2070      	movs	r0, #112	; 0x70
 8001f2c:	f7ff fe26 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001f30:	2070      	movs	r0, #112	; 0x70
 8001f32:	f7ff fe23 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001f36:	2018      	movs	r0, #24
 8001f38:	f7ff fe20 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001f3c:	2013      	movs	r0, #19
 8001f3e:	f7ff fe1d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001f42:	2071      	movs	r0, #113	; 0x71
 8001f44:	f7ff fe1a 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001f48:	20f3      	movs	r0, #243	; 0xf3
 8001f4a:	f7ff fe17 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001f4e:	2070      	movs	r0, #112	; 0x70
 8001f50:	f7ff fe14 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001f54:	2070      	movs	r0, #112	; 0x70
 8001f56:	f7ff fe11 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001f5a:	2064      	movs	r0, #100	; 0x64
 8001f5c:	f7ff fdf2 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001f60:	2028      	movs	r0, #40	; 0x28
 8001f62:	f7ff fe0b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001f66:	2029      	movs	r0, #41	; 0x29
 8001f68:	f7ff fe08 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001f6c:	20f1      	movs	r0, #241	; 0xf1
 8001f6e:	f7ff fe05 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff fe02 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001f78:	20f1      	movs	r0, #241	; 0xf1
 8001f7a:	f7ff fdff 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fdfc 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001f84:	2007      	movs	r0, #7
 8001f86:	f7ff fdf9 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001f8a:	2066      	movs	r0, #102	; 0x66
 8001f8c:	f7ff fdda 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001f90:	203c      	movs	r0, #60	; 0x3c
 8001f92:	f7ff fdf3 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fdf0 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001f9c:	20cd      	movs	r0, #205	; 0xcd
 8001f9e:	f7ff fded 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8001fa2:	2067      	movs	r0, #103	; 0x67
 8001fa4:	f7ff fdea 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001fa8:	2045      	movs	r0, #69	; 0x45
 8001faa:	f7ff fde7 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001fae:	2045      	movs	r0, #69	; 0x45
 8001fb0:	f7ff fde4 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001fb4:	2010      	movs	r0, #16
 8001fb6:	f7ff fde1 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fdde 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fddb 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fdd8 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001fcc:	2067      	movs	r0, #103	; 0x67
 8001fce:	f7ff fdb9 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff fdd2 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001fd8:	203c      	movs	r0, #60	; 0x3c
 8001fda:	f7ff fdcf 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff fdcc 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff fdc9 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff fdc6 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7ff fdc3 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001ff6:	2054      	movs	r0, #84	; 0x54
 8001ff8:	f7ff fdc0 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff fdbd 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8002002:	2032      	movs	r0, #50	; 0x32
 8002004:	f7ff fdba 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8002008:	2098      	movs	r0, #152	; 0x98
 800200a:	f7ff fdb7 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 800200e:	2074      	movs	r0, #116	; 0x74
 8002010:	f7ff fd98 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8002014:	2010      	movs	r0, #16
 8002016:	f7ff fdb1 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 800201a:	2085      	movs	r0, #133	; 0x85
 800201c:	f7ff fdae 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8002020:	2080      	movs	r0, #128	; 0x80
 8002022:	f7ff fdab 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fda8 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fda5 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8002032:	204e      	movs	r0, #78	; 0x4e
 8002034:	f7ff fda2 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fd9f 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 800203e:	2098      	movs	r0, #152	; 0x98
 8002040:	f7ff fd80 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8002044:	203e      	movs	r0, #62	; 0x3e
 8002046:	f7ff fd99 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800204a:	2007      	movs	r0, #7
 800204c:	f7ff fd96 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8002050:	2035      	movs	r0, #53	; 0x35
 8002052:	f7ff fd77 	bl	8001b44 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8002056:	2021      	movs	r0, #33	; 0x21
 8002058:	f7ff fd74 	bl	8001b44 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 800205c:	2011      	movs	r0, #17
 800205e:	f7ff fd71 	bl	8001b44 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 8002062:	2078      	movs	r0, #120	; 0x78
 8002064:	f000 f952 	bl	800230c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8002068:	2029      	movs	r0, #41	; 0x29
 800206a:	f7ff fd6b 	bl	8001b44 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 800206e:	2014      	movs	r0, #20
 8002070:	f000 f94c 	bl	800230c <HAL_Delay>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <LCD_1IN28_SetAttributes+0x54>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8002088:	2308      	movs	r3, #8
 800208a:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <LCD_1IN28_SetAttributes+0x54>)
 8002094:	22f0      	movs	r2, #240	; 0xf0
 8002096:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <LCD_1IN28_SetAttributes+0x54>)
 800209a:	22f0      	movs	r2, #240	; 0xf0
 800209c:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 800209e:	23c8      	movs	r3, #200	; 0xc8
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e007      	b.n	80020b4 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <LCD_1IN28_SetAttributes+0x54>)
 80020a6:	22f0      	movs	r2, #240	; 0xf0
 80020a8:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LCD_1IN28_SetAttributes+0x54>)
 80020ac:	22f0      	movs	r2, #240	; 0xf0
 80020ae:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80020b0:	2368      	movs	r3, #104	; 0x68
 80020b2:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80020b4:	2036      	movs	r0, #54	; 0x36
 80020b6:	f7ff fd45 	bl	8001b44 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fd5d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001bc 	.word	0x200001bc

080020d0 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80020da:	f7ff fd11 	bl	8001b00 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffc9 	bl	8002078 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80020e6:	f7ff fd95 	bl	8001c14 <LCD_1IN28_InitReg>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80020f2:	b590      	push	{r4, r7, lr}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4604      	mov	r4, r0
 80020fa:	4608      	mov	r0, r1
 80020fc:	4611      	mov	r1, r2
 80020fe:	461a      	mov	r2, r3
 8002100:	4623      	mov	r3, r4
 8002102:	80fb      	strh	r3, [r7, #6]
 8002104:	4603      	mov	r3, r0
 8002106:	80bb      	strh	r3, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8002110:	202a      	movs	r0, #42	; 0x2a
 8002112:	f7ff fd17 	bl	8001b44 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fd30 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fd2b 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff fd28 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd23 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8002136:	202b      	movs	r0, #43	; 0x2b
 8002138:	f7ff fd04 	bl	8001b44 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fd1d 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fd18 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fd15 	bl	8001b7c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8002152:	883b      	ldrh	r3, [r7, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fd10 	bl	8001b7c <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	f7ff fcf1 	bl	8001b44 <LCD_1IN28_SendCommand>
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
	...

0800216c <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8002176:	23ef      	movs	r3, #239	; 0xef
 8002178:	22ef      	movs	r2, #239	; 0xef
 800217a:	2100      	movs	r1, #0
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff ffb8 	bl	80020f2 <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002188:	4812      	ldr	r0, [pc, #72]	; (80021d4 <LCD_1IN28_Clear+0x68>)
 800218a:	f000 fb5d 	bl	8002848 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800218e:	2300      	movs	r3, #0
 8002190:	81fb      	strh	r3, [r7, #14]
 8002192:	e017      	b.n	80021c4 <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8002194:	2300      	movs	r3, #0
 8002196:	81bb      	strh	r3, [r7, #12]
 8002198:	e00e      	b.n	80021b8 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe ff70 	bl	8001088 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff6b 	bl	8001088 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	81bb      	strh	r3, [r7, #12]
 80021b8:	89bb      	ldrh	r3, [r7, #12]
 80021ba:	2bef      	cmp	r3, #239	; 0xef
 80021bc:	d9ed      	bls.n	800219a <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	3301      	adds	r3, #1
 80021c2:	81fb      	strh	r3, [r7, #14]
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	2bef      	cmp	r3, #239	; 0xef
 80021c8:	d9e4      	bls.n	8002194 <LCD_1IN28_Clear+0x28>
		}
	 }
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40020000 	.word	0x40020000

080021d8 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80021ea:	88bb      	ldrh	r3, [r7, #4]
 80021ec:	88fa      	ldrh	r2, [r7, #6]
 80021ee:	88b9      	ldrh	r1, [r7, #4]
 80021f0:	88f8      	ldrh	r0, [r7, #6]
 80021f2:	f7ff ff7e 	bl	80020f2 <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fce1 	bl	8001bc0 <LCD_1IN28_SendData_16Bit>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~10000   Duty cycle is value/10000
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <LCD_1IN28_SetBackLight+0x1c>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40000400 	.word	0x40000400

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <HAL_Init+0x40>)
 8002232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_Init+0x40>)
 800223e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_Init+0x40>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f931 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7fe fcba 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f93b 	bl	8002506 <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 f911 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000010 	.word	0x20000010
 80022c8:	2000000c 	.word	0x2000000c

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000010 	.word	0x20000010
 80022f0:	200001c4 	.word	0x200001c4

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200001c4 	.word	0x200001c4

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff ffee 	bl	80022f4 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffde 	bl	80022f4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000010 	.word	0x20000010

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff47 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff5c 	bl	800239c <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffb0 	bl	8002474 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e165      	b.n	8002808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 8154 	bne.w	8002802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80ae 	beq.w	8002802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b5d      	ldr	r3, [pc, #372]	; (8002820 <HAL_GPIO_Init+0x300>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <HAL_GPIO_Init+0x300>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_GPIO_Init+0x300>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_GPIO_Init+0x304>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x310>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	; (8002834 <HAL_GPIO_Init+0x314>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_GPIO_Init+0x318>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x20a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_GPIO_Init+0x31c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x206>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_GPIO_Init+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x202>
 800271e:	2306      	movs	r3, #6
 8002720:	e00c      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002722:	2307      	movs	r3, #7
 8002724:	e00a      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002726:	2305      	movs	r3, #5
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800272a:	2304      	movs	r3, #4
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x21c>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x21c>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x304>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_GPIO_Init+0x324>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_GPIO_Init+0x324>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <HAL_GPIO_Init+0x324>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_GPIO_Init+0x324>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_GPIO_Init+0x324>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_GPIO_Init+0x324>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_GPIO_Init+0x324>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_GPIO_Init+0x324>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f ae96 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40021400 	.word	0x40021400
 8002840:	40021800 	.word	0x40021800
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7ff fcc2 	bl	80022f4 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7ff fcbe 	bl	80022f4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 fb7f 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fc22 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08006ab8 	.word	0x08006ab8
 8002a40:	20000000 	.word	0x20000000
 8002a44:	2000000c 	.word	0x2000000c

08002a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000000 	.word	0x20000000

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a64:	f7ff fff0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08006ac8 	.word	0x08006ac8

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f7ff ffdc 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0b5b      	lsrs	r3, r3, #13
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08006ac8 	.word	0x08006ac8

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	496c      	ldr	r1, [pc, #432]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002b06:	2301      	movs	r3, #1
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b16:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	4960      	ldr	r1, [pc, #384]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002b34:	2301      	movs	r3, #1
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b44:	4b58      	ldr	r3, [pc, #352]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4955      	ldr	r1, [pc, #340]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b62:	d101      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002b70:	2301      	movs	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b80:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4946      	ldr	r1, [pc, #280]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808a 	beq.w	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a38      	ldr	r2, [pc, #224]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a33      	ldr	r2, [pc, #204]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be6:	f7ff fb85 	bl	80022f4 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7ff fb81 	bl	80022f4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e278      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c14:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02f      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d114      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c52:	f7ff fb4f 	bl	80022f4 <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7ff fb4b 	bl	80022f4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e240      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ee      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c88:	d114      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9e:	4902      	ldr	r1, [pc, #8]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
 8002ca4:	e00c      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	42470e40 	.word	0x42470e40
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a49      	ldr	r2, [pc, #292]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cbe:	6093      	str	r3, [r2, #8]
 8002cc0:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	4944      	ldr	r1, [pc, #272]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002ce4:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ce6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4937      	ldr	r1, [pc, #220]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d16:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	492e      	ldr	r1, [pc, #184]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d011      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	4926      	ldr	r1, [pc, #152]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d56:	d101      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	491a      	ldr	r1, [pc, #104]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d011      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	4911      	ldr	r1, [pc, #68]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002daa:	2301      	movs	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	f040 80ff 	bne.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc6:	f7ff fa95 	bl	80022f4 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dcc:	e00e      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dce:	f7ff fa91 	bl	80022f4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d907      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e188      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	424711e0 	.word	0x424711e0
 8002de8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ea      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d028      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d124      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e20:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	3b01      	subs	r3, #1
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	431a      	orrs	r2, r3
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	071b      	lsls	r3, r3, #28
 8002e62:	4961      	ldr	r1, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d035      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d130      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ea8:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eae:	0f1b      	lsrs	r3, r3, #28
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	019b      	lsls	r3, r3, #6
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	071b      	lsls	r3, r3, #28
 8002ed8:	4943      	ldr	r1, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ee0:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee6:	f023 021f 	bic.w	r2, r3, #31
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	493d      	ldr	r1, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d029      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d124      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	0f1b      	lsrs	r3, r3, #28
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	019b      	lsls	r3, r3, #6
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	4925      	ldr	r1, [pc, #148]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f98:	f7ff f9ac 	bl	80022f4 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fa0:	f7ff f9a8 	bl	80022f4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e09f      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 8095 	bne.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fcc:	f7ff f992 	bl	80022f4 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fd4:	f7ff f98e 	bl	80022f4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e085      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	42470068 	.word	0x42470068
 8002ff0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff4:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003000:	d0e8      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	d127      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	431a      	orrs	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	4928      	ldr	r1, [pc, #160]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003066:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	3b01      	subs	r3, #1
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01d      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308e:	d118      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	019b      	lsls	r3, r3, #6
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	4910      	ldr	r1, [pc, #64]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c8:	f7ff f914 	bl	80022f4 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030d0:	f7ff f910 	bl	80022f4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e007      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030ee:	d1ef      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3730      	adds	r7, #48	; 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470070 	.word	0x42470070

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0ae      	sub	sp, #184	; 0xb8
 800310a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312a:	4bcb      	ldr	r3, [pc, #812]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b0c      	cmp	r3, #12
 8003134:	f200 8206 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x440>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_RCC_GetSysClockFreq+0x3c>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003175 	.word	0x08003175
 8003144:	08003545 	.word	0x08003545
 8003148:	08003545 	.word	0x08003545
 800314c:	08003545 	.word	0x08003545
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003545 	.word	0x08003545
 8003158:	08003545 	.word	0x08003545
 800315c:	08003545 	.word	0x08003545
 8003160:	08003185 	.word	0x08003185
 8003164:	08003545 	.word	0x08003545
 8003168:	08003545 	.word	0x08003545
 800316c:	08003545 	.word	0x08003545
 8003170:	08003375 	.word	0x08003375
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4bb9      	ldr	r3, [pc, #740]	; (800345c <HAL_RCC_GetSysClockFreq+0x358>)
 8003176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800317a:	e1e7      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317c:	4bb8      	ldr	r3, [pc, #736]	; (8003460 <HAL_RCC_GetSysClockFreq+0x35c>)
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003182:	e1e3      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	4bb4      	ldr	r3, [pc, #720]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800318c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003190:	4bb1      	ldr	r3, [pc, #708]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	4bae      	ldr	r3, [pc, #696]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	f04f 0000 	mov.w	r0, #0
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	0159      	lsls	r1, r3, #5
 80031d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d4:	0150      	lsls	r0, r2, #5
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4621      	mov	r1, r4
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	6439      	str	r1, [r7, #64]	; 0x40
 80031e0:	4629      	mov	r1, r5
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80031f4:	4649      	mov	r1, r9
 80031f6:	018b      	lsls	r3, r1, #6
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fe:	4641      	mov	r1, r8
 8003200:	018a      	lsls	r2, r1, #6
 8003202:	4641      	mov	r1, r8
 8003204:	1a51      	subs	r1, r2, r1
 8003206:	63b9      	str	r1, [r7, #56]	; 0x38
 8003208:	4649      	mov	r1, r9
 800320a:	eb63 0301 	sbc.w	r3, r3, r1
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800321c:	4649      	mov	r1, r9
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4641      	mov	r1, r8
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4641      	mov	r1, r8
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4622      	mov	r2, r4
 8003232:	189b      	adds	r3, r3, r2
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
 8003236:	462b      	mov	r3, r5
 8003238:	460a      	mov	r2, r1
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800324c:	4629      	mov	r1, r5
 800324e:	024b      	lsls	r3, r1, #9
 8003250:	4621      	mov	r1, r4
 8003252:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003256:	4621      	mov	r1, r4
 8003258:	024a      	lsls	r2, r1, #9
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003268:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800326c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003270:	f7fd f81e 	bl	80002b0 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800327e:	e067      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003280:	4b75      	ldr	r3, [pc, #468]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800328c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	67bb      	str	r3, [r7, #120]	; 0x78
 800329a:	2300      	movs	r3, #0
 800329c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800329e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	f04f 0000 	mov.w	r0, #0
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b4:	0150      	lsls	r0, r2, #5
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4621      	mov	r1, r4
 80032bc:	1a51      	subs	r1, r2, r1
 80032be:	62b9      	str	r1, [r7, #40]	; 0x28
 80032c0:	4629      	mov	r1, r5
 80032c2:	eb63 0301 	sbc.w	r3, r3, r1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80032d4:	4649      	mov	r1, r9
 80032d6:	018b      	lsls	r3, r1, #6
 80032d8:	4641      	mov	r1, r8
 80032da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032de:	4641      	mov	r1, r8
 80032e0:	018a      	lsls	r2, r1, #6
 80032e2:	4641      	mov	r1, r8
 80032e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80032e8:	4649      	mov	r1, r9
 80032ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003302:	4692      	mov	sl, r2
 8003304:	469b      	mov	fp, r3
 8003306:	4623      	mov	r3, r4
 8003308:	eb1a 0303 	adds.w	r3, sl, r3
 800330c:	623b      	str	r3, [r7, #32]
 800330e:	462b      	mov	r3, r5
 8003310:	eb4b 0303 	adc.w	r3, fp, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003338:	2200      	movs	r2, #0
 800333a:	673b      	str	r3, [r7, #112]	; 0x70
 800333c:	677a      	str	r2, [r7, #116]	; 0x74
 800333e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003342:	f7fc ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003372:	e0eb      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003374:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003380:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d06b      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_RCC_GetSysClockFreq+0x354>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	2200      	movs	r2, #0
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68
 8003396:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
 80033a0:	2300      	movs	r3, #0
 80033a2:	667b      	str	r3, [r7, #100]	; 0x64
 80033a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033a8:	4622      	mov	r2, r4
 80033aa:	462b      	mov	r3, r5
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ba:	0150      	lsls	r0, r2, #5
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4621      	mov	r1, r4
 80033c2:	1a51      	subs	r1, r2, r1
 80033c4:	61b9      	str	r1, [r7, #24]
 80033c6:	4629      	mov	r1, r5
 80033c8:	eb63 0301 	sbc.w	r3, r3, r1
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033da:	4659      	mov	r1, fp
 80033dc:	018b      	lsls	r3, r1, #6
 80033de:	4651      	mov	r1, sl
 80033e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e4:	4651      	mov	r1, sl
 80033e6:	018a      	lsls	r2, r1, #6
 80033e8:	4651      	mov	r1, sl
 80033ea:	ebb2 0801 	subs.w	r8, r2, r1
 80033ee:	4659      	mov	r1, fp
 80033f0:	eb63 0901 	sbc.w	r9, r3, r1
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003400:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003404:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	4623      	mov	r3, r4
 800340e:	eb18 0303 	adds.w	r3, r8, r3
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003428:	4629      	mov	r1, r5
 800342a:	024b      	lsls	r3, r1, #9
 800342c:	4621      	mov	r1, r4
 800342e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003432:	4621      	mov	r1, r4
 8003434:	024a      	lsls	r2, r1, #9
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800343e:	2200      	movs	r2, #0
 8003440:	65bb      	str	r3, [r7, #88]	; 0x58
 8003442:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003444:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003448:	f7fc ff32 	bl	80002b0 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003456:	e065      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x420>
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400
 8003460:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_GetSysClockFreq+0x458>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	2200      	movs	r2, #0
 800346c:	4618      	mov	r0, r3
 800346e:	4611      	mov	r1, r2
 8003470:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
 8003476:	2300      	movs	r3, #0
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
 800347a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800347e:	4642      	mov	r2, r8
 8003480:	464b      	mov	r3, r9
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4641      	mov	r1, r8
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	4649      	mov	r1, r9
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b0:	4659      	mov	r1, fp
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4651      	mov	r1, sl
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4651      	mov	r1, sl
 80034c0:	1a54      	subs	r4, r2, r1
 80034c2:	4659      	mov	r1, fp
 80034c4:	eb63 0501 	sbc.w	r5, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	00eb      	lsls	r3, r5, #3
 80034d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034d6:	00e2      	lsls	r2, r4, #3
 80034d8:	4614      	mov	r4, r2
 80034da:	461d      	mov	r5, r3
 80034dc:	4643      	mov	r3, r8
 80034de:	18e3      	adds	r3, r4, r3
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	464b      	mov	r3, r9
 80034e4:	eb45 0303 	adc.w	r3, r5, r3
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034f6:	4629      	mov	r1, r5
 80034f8:	028b      	lsls	r3, r1, #10
 80034fa:	4621      	mov	r1, r4
 80034fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003500:	4621      	mov	r1, r4
 8003502:	028a      	lsls	r2, r1, #10
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800350c:	2200      	movs	r2, #0
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003510:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003516:	f7fc fecb 	bl	80002b0 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4613      	mov	r3, r2
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_GetSysClockFreq+0x458>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0f1b      	lsrs	r3, r3, #28
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003542:	e003      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800354a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003550:	4618      	mov	r0, r3
 8003552:	37b8      	adds	r7, #184	; 0xb8
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400

08003564 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e28d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8083 	beq.w	800368a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003584:	4b94      	ldr	r3, [pc, #592]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b04      	cmp	r3, #4
 800358e:	d019      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003590:	4b91      	ldr	r3, [pc, #580]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003598:	2b08      	cmp	r3, #8
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800359c:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b8b      	ldr	r3, [pc, #556]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x124>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e25a      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x90>
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0xb4>
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a72      	ldr	r2, [pc, #456]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xcc>
 8003618:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6b      	ldr	r2, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fe5c 	bl	80022f4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe fe58 	bl	80022f4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e21f      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xdc>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fe48 	bl	80022f4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fe44 	bl	80022f4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e20b      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x104>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06f      	beq.n	8003776 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003696:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1d3      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4937      	ldr	r1, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x278>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe fdf1 	bl	80022f4 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe fded 	bl	80022f4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1b4      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4925      	ldr	r1, [pc, #148]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x278>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fdd0 	bl	80022f4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003758:	f7fe fdcc 	bl	80022f4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e193      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe fdb0 	bl	80022f4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe fdac 	bl	80022f4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e173      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x274>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x234>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe fd99 	bl	80022f4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe fd95 	bl	80022f4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e15c      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b7f      	ldr	r3, [pc, #508]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a7e      	ldr	r2, [pc, #504]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe fd55 	bl	80022f4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe fd51 	bl	80022f4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e118      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b6c      	ldr	r3, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x4b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x31e>
 8003874:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x340>
 800388a:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a60      	ldr	r2, [pc, #384]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	4b5e      	ldr	r3, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x358>
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	4a56      	ldr	r2, [pc, #344]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fd16 	bl	80022f4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe fd12 	bl	80022f4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0d7      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x368>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe fd00 	bl	80022f4 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe fcfc 	bl	80022f4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0c1      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ee      	bne.n	80038f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a3a      	ldr	r2, [pc, #232]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80ad 	beq.w	8003a90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d060      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d145      	bne.n	80039d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fcd0 	bl	80022f4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fccc 	bl	80022f4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e093      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ae:	f7fe fca1 	bl	80022f4 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fe fc9d 	bl	80022f4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e064      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x452>
 80039d4:	e05c      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4b4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fc8a 	bl	80022f4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe fc86 	bl	80022f4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e04d      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
 8003a02:	e045      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e040      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_RCC_OscConfig+0x538>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d030      	beq.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d129      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d122      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d119      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d10f      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e066      	b.n	8003b84 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7f5b      	ldrb	r3, [r3, #29]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fc ffdc 	bl	8000a84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	22ca      	movs	r2, #202	; 0xca
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2253      	movs	r2, #83	; 0x53
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa45 	bl	8003f72 <RTC_EnterInitMode>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d12c      	bne.n	8003b4c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b04:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68d2      	ldr	r2, [r2, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6919      	ldr	r1, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa4c 	bl	8003fe0 <RTC_ExitInitMode>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	7f1b      	ldrb	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RTC_SetTime+0x1c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e087      	b.n	8003cb8 <HAL_RTC_SetTime+0x12c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d126      	bne.n	8003c08 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fa29 	bl	800402a <RTC_ByteToBcd2>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fa22 	bl	800402a <RTC_ByteToBcd2>
 8003be6:	4603      	mov	r3, r0
 8003be8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003bea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	789b      	ldrb	r3, [r3, #2]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fa1a 	bl	800402a <RTC_ByteToBcd2>
 8003bf6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bf8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e018      	b.n	8003c3a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c28:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003c2e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	78db      	ldrb	r3, [r3, #3]
 8003c34:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	22ca      	movs	r2, #202	; 0xca
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2253      	movs	r2, #83	; 0x53
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f991 	bl	8003f72 <RTC_EnterInitMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d120      	bne.n	8003c9c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c64:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c68:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f9a4 	bl	8003fe0 <RTC_ExitInitMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	771a      	strb	r2, [r3, #28]

  return status;
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}

08003cc0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003cf2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	0d9b      	lsrs	r3, r3, #22
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11a      	bne.n	8003d72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f98f 	bl	8004064 <RTC_Bcd2ToByte>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f986 	bl	8004064 <RTC_Bcd2ToByte>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	789b      	ldrb	r3, [r3, #2]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f97d 	bl	8004064 <RTC_Bcd2ToByte>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	7f1b      	ldrb	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RTC_SetDate+0x1c>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e071      	b.n	8003e7c <HAL_RTC_SetDate+0x100>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <HAL_RTC_SetDate+0x4c>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	330a      	adds	r3, #10
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f929 	bl	800402a <RTC_ByteToBcd2>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f922 	bl	800402a <RTC_ByteToBcd2>
 8003de6:	4603      	mov	r3, r0
 8003de8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003dea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	789b      	ldrb	r3, [r3, #2]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f91a 	bl	800402a <RTC_ByteToBcd2>
 8003df6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003df8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e00e      	b.n	8003e26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	78db      	ldrb	r3, [r3, #3]
 8003e0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e14:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	22ca      	movs	r2, #202	; 0xca
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2253      	movs	r2, #83	; 0x53
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f89b 	bl	8003f72 <RTC_EnterInitMode>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10c      	bne.n	8003e60 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f8c2 	bl	8003fe0 <RTC_ExitInitMode>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	771a      	strb	r2, [r3, #28]

  return status;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}

08003e84 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11a      	bne.n	8003f18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	78db      	ldrb	r3, [r3, #3]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f8bc 	bl	8004064 <RTC_Bcd2ToByte>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f8b3 	bl	8004064 <RTC_Bcd2ToByte>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	789b      	ldrb	r3, [r3, #2]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f8aa 	bl	8004064 <RTC_Bcd2ToByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3e:	f7fe f9d9 	bl	80022f4 <HAL_GetTick>
 8003f42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f44:	e009      	b.n	8003f5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f46:	f7fe f9d5 	bl	80022f4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f54:	d901      	bls.n	8003f5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e007      	b.n	8003f6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ee      	beq.n	8003f46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d122      	bne.n	8003fd6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7fe f9a8 	bl	80022f4 <HAL_GetTick>
 8003fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fa6:	e00c      	b.n	8003fc2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fa8:	f7fe f9a4 	bl	80022f4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fb6:	d904      	bls.n	8003fc2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <RTC_EnterInitMode+0x64>
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d1e8      	bne.n	8003fa8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff89 	bl	8003f22 <HAL_RTC_WaitForSynchro>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2204      	movs	r2, #4
 800401a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	4603      	mov	r3, r0
 8004032:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004038:	e005      	b.n	8004046 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	3301      	adds	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	3b0a      	subs	r3, #10
 8004044:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b09      	cmp	r3, #9
 800404a:	d8f6      	bhi.n	800403a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	b2da      	uxtb	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	4313      	orrs	r3, r2
 8004056:	b2db      	uxtb	r3, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	4413      	add	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	b2da      	uxtb	r2, r3
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	4413      	add	r3, r2
 800408e:	b2db      	uxtb	r3, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07b      	b.n	80041a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d009      	beq.n	80040d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
 80040c6:	e005      	b.n	80040d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fd28 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	f003 0104 	and.w	r1, r3, #4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0210 	and.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b088      	sub	sp, #32
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_SPI_Transmit+0x22>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e126      	b.n	800441e <HAL_SPI_Transmit+0x270>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041d8:	f7fe f88c 	bl	80022f4 <HAL_GetTick>
 80041dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f2:	e10b      	b.n	800440c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_SPI_Transmit+0x52>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004204:	e102      	b.n	800440c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2203      	movs	r2, #3
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	d10f      	bne.n	800426e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d007      	beq.n	800428c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004294:	d14b      	bne.n	800432e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_SPI_Transmit+0xf6>
 800429e:	8afb      	ldrh	r3, [r7, #22]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d13e      	bne.n	8004322 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	1c9a      	adds	r2, r3, #2
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042c8:	e02b      	b.n	8004322 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d112      	bne.n	80042fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	881a      	ldrh	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80042fc:	e011      	b.n	8004322 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042fe:	f7fd fff9 	bl	80022f4 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d803      	bhi.n	8004316 <HAL_SPI_Transmit+0x168>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d102      	bne.n	800431c <HAL_SPI_Transmit+0x16e>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004320:	e074      	b.n	800440c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ce      	bne.n	80042ca <HAL_SPI_Transmit+0x11c>
 800432c:	e04c      	b.n	80043c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SPI_Transmit+0x18e>
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d140      	bne.n	80043be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004362:	e02c      	b.n	80043be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d113      	bne.n	800439a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	86da      	strh	r2, [r3, #54]	; 0x36
 8004398:	e011      	b.n	80043be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439a:	f7fd ffab 	bl	80022f4 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d803      	bhi.n	80043b2 <HAL_SPI_Transmit+0x204>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d102      	bne.n	80043b8 <HAL_SPI_Transmit+0x20a>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043bc:	e026      	b.n	800440c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1cd      	bne.n	8004364 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	6839      	ldr	r1, [r7, #0]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f8b3 	bl	8004538 <SPI_EndRxTxTransaction>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e000      	b.n	800440c <HAL_SPI_Transmit+0x25e>
  }

error:
 800440a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800441c:	7ffb      	ldrb	r3, [r7, #31]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004438:	f7fd ff5c 	bl	80022f4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4413      	add	r3, r2
 8004446:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004448:	f7fd ff54 	bl	80022f4 <HAL_GetTick>
 800444c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	015b      	lsls	r3, r3, #5
 8004454:	0d1b      	lsrs	r3, r3, #20
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	fb02 f303 	mul.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445e:	e054      	b.n	800450a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d050      	beq.n	800450a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004468:	f7fd ff44 	bl	80022f4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	429a      	cmp	r2, r3
 8004476:	d902      	bls.n	800447e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d13d      	bne.n	80044fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800448c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004496:	d111      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	d004      	beq.n	80044ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044aa:	d107      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c4:	d10f      	bne.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e017      	b.n	800452a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3b01      	subs	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d19b      	bne.n	8004460 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000000 	.word	0x20000000

08004538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <SPI_EndRxTxTransaction+0x7c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <SPI_EndRxTxTransaction+0x80>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0d5b      	lsrs	r3, r3, #21
 8004550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004562:	d112      	bne.n	800458a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff ff5a 	bl	8004428 <SPI_WaitFlagStateUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e00f      	b.n	80045aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	3b01      	subs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d0f2      	beq.n	800458a <SPI_EndRxTxTransaction+0x52>
 80045a4:	e000      	b.n	80045a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80045a6:	bf00      	nop
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000000 	.word	0x20000000
 80045b8:	165e9f81 	.word	0x165e9f81

080045bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e041      	b.n	8004652 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fc58 	bl	8000e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 f9b8 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x24>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e022      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d109      	bne.n	800469a <HAL_TIM_PWM_Start+0x3e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e015      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x58>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07c      	b.n	80047c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0x82>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	e013      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0x92>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	e00b      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	e003      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb7e 	bl	8004e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_TIM_PWM_Start+0x174>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_PWM_Start+0xcc>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <HAL_TIM_PWM_Start+0x178>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_TIM_PWM_Start+0xd0>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_TIM_PWM_Start+0xd2>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_TIM_PWM_Start+0x174>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d022      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d01d      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_TIM_PWM_Start+0x17c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d018      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_TIM_PWM_Start+0x180>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d013      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <HAL_TIM_PWM_Start+0x184>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a16      	ldr	r2, [pc, #88]	; (80047d4 <HAL_TIM_PWM_Start+0x178>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_TIM_PWM_Start+0x188>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIM_PWM_Start+0x136>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_TIM_PWM_Start+0x18c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d111      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d010      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	e007      	b.n	80047c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004806:	2302      	movs	r3, #2
 8004808:	e0ae      	b.n	8004968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	f200 809f 	bhi.w	8004958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004855 	.word	0x08004855
 8004824:	08004959 	.word	0x08004959
 8004828:	08004959 	.word	0x08004959
 800482c:	08004959 	.word	0x08004959
 8004830:	08004895 	.word	0x08004895
 8004834:	08004959 	.word	0x08004959
 8004838:	08004959 	.word	0x08004959
 800483c:	08004959 	.word	0x08004959
 8004840:	080048d7 	.word	0x080048d7
 8004844:	08004959 	.word	0x08004959
 8004848:	08004959 	.word	0x08004959
 800484c:	08004959 	.word	0x08004959
 8004850:	08004917 	.word	0x08004917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f928 	bl	8004ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	619a      	str	r2, [r3, #24]
      break;
 8004892:	e064      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f978 	bl	8004b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	619a      	str	r2, [r3, #24]
      break;
 80048d4:	e043      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f9cd 	bl	8004c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0208 	orr.w	r2, r2, #8
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0204 	bic.w	r2, r2, #4
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	61da      	str	r2, [r3, #28]
      break;
 8004914:	e023      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa21 	bl	8004d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	021a      	lsls	r2, r3, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	61da      	str	r2, [r3, #28]
      break;
 8004956:	e002      	b.n	800495e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
      break;
 800495c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d00f      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d027      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d023      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <TIM_Base_SetConfig+0x128>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <TIM_Base_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <TIM_Base_SetConfig+0x134>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <TIM_Base_SetConfig+0x138>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <TIM_Base_SetConfig+0x13c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	40001800 	.word	0x40001800
 8004aa8:	40001c00 	.word	0x40001c00
 8004aac:	40002000 	.word	0x40002000

08004ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 0302 	bic.w	r3, r3, #2
 8004af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <TIM_OC1_SetConfig+0xd8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_OC1_SetConfig+0x64>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <TIM_OC1_SetConfig+0xdc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10c      	bne.n	8004b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0308 	bic.w	r3, r3, #8
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <TIM_OC1_SetConfig+0xd8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC1_SetConfig+0x8e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <TIM_OC1_SetConfig+0xdc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d111      	bne.n	8004b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40010400 	.word	0x40010400

08004b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f023 0210 	bic.w	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0320 	bic.w	r3, r3, #32
 8004bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a22      	ldr	r2, [pc, #136]	; (8004c74 <TIM_OC2_SetConfig+0xe4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_OC2_SetConfig+0x68>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <TIM_OC2_SetConfig+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10d      	bne.n	8004c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <TIM_OC2_SetConfig+0xe4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_OC2_SetConfig+0x94>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <TIM_OC2_SetConfig+0xe8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d113      	bne.n	8004c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40010400 	.word	0x40010400

08004c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <TIM_OC3_SetConfig+0xe0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC3_SetConfig+0x66>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <TIM_OC3_SetConfig+0xe4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <TIM_OC3_SetConfig+0xe0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_OC3_SetConfig+0x92>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a15      	ldr	r2, [pc, #84]	; (8004d60 <TIM_OC3_SetConfig+0xe4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d113      	bne.n	8004d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400

08004d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <TIM_OC4_SetConfig+0xa4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC4_SetConfig+0x68>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <TIM_OC4_SetConfig+0xa8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d109      	bne.n	8004de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40010400 	.word	0x40010400

08004e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2201      	movs	r2, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1a      	ldr	r2, [r3, #32]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	401a      	ands	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e05a      	b.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec0:	d01d      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d10c      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40001800 	.word	0x40001800

08004f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03f      	b.n	8004fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc f812 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f929 	bl	80051f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af02      	add	r7, sp, #8
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d17c      	bne.n	8005108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Transmit+0x2c>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e075      	b.n	800510a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit+0x3e>
 8005028:	2302      	movs	r3, #2
 800502a:	e06e      	b.n	800510a <HAL_UART_Transmit+0x11c>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2221      	movs	r2, #33	; 0x21
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fd f957 	bl	80022f4 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d108      	bne.n	8005070 <HAL_UART_Transmit+0x82>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e003      	b.n	8005078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005080:	e02a      	b.n	80050d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f840 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e036      	b.n	800510a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3302      	adds	r3, #2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e007      	b.n	80050ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1cf      	bne.n	8005082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f810 	bl	8005112 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b090      	sub	sp, #64	; 0x40
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005122:	e050      	b.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d04c      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <UART_WaitOnFlagUntilTimeout+0x30>
 8005132:	f7fd f8df 	bl	80022f4 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800513e:	429a      	cmp	r2, r3
 8005140:	d241      	bcs.n	80051c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005162:	637a      	str	r2, [r7, #52]	; 0x34
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	63bb      	str	r3, [r7, #56]	; 0x38
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005196:	623a      	str	r2, [r7, #32]
 8005198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	69f9      	ldr	r1, [r7, #28]
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e5      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e00f      	b.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d09f      	beq.n	8005124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3740      	adds	r7, #64	; 0x40
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f4:	b0c0      	sub	sp, #256	; 0x100
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	68d9      	ldr	r1, [r3, #12]
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	ea40 0301 	orr.w	r3, r0, r1
 8005218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	431a      	orrs	r2, r3
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	431a      	orrs	r2, r3
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005248:	f021 010c 	bic.w	r1, r1, #12
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005256:	430b      	orrs	r3, r1
 8005258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	6999      	ldr	r1, [r3, #24]
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	ea40 0301 	orr.w	r3, r0, r1
 8005276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b8f      	ldr	r3, [pc, #572]	; (80054bc <UART_SetConfig+0x2cc>)
 8005280:	429a      	cmp	r2, r3
 8005282:	d005      	beq.n	8005290 <UART_SetConfig+0xa0>
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <UART_SetConfig+0x2d0>)
 800528c:	429a      	cmp	r2, r3
 800528e:	d104      	bne.n	800529a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fd fbfa 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8005294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005298:	e003      	b.n	80052a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7fd fbe1 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 800529e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ac:	f040 810c 	bne.w	80054c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052ca:	415b      	adcs	r3, r3
 80052cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052d2:	4621      	mov	r1, r4
 80052d4:	eb12 0801 	adds.w	r8, r2, r1
 80052d8:	4629      	mov	r1, r5
 80052da:	eb43 0901 	adc.w	r9, r3, r1
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f2:	4690      	mov	r8, r2
 80052f4:	4699      	mov	r9, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	eb18 0303 	adds.w	r3, r8, r3
 80052fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005300:	462b      	mov	r3, r5
 8005302:	eb49 0303 	adc.w	r3, r9, r3
 8005306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800531a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800531e:	460b      	mov	r3, r1
 8005320:	18db      	adds	r3, r3, r3
 8005322:	653b      	str	r3, [r7, #80]	; 0x50
 8005324:	4613      	mov	r3, r2
 8005326:	eb42 0303 	adc.w	r3, r2, r3
 800532a:	657b      	str	r3, [r7, #84]	; 0x54
 800532c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005334:	f7fa ffbc 	bl	80002b0 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <UART_SetConfig+0x2d4>)
 800533e:	fba3 2302 	umull	r2, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	011c      	lsls	r4, r3, #4
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005360:	415b      	adcs	r3, r3
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005368:	4641      	mov	r1, r8
 800536a:	eb12 0a01 	adds.w	sl, r2, r1
 800536e:	4649      	mov	r1, r9
 8005370:	eb43 0b01 	adc.w	fp, r3, r1
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005388:	4692      	mov	sl, r2
 800538a:	469b      	mov	fp, r3
 800538c:	4643      	mov	r3, r8
 800538e:	eb1a 0303 	adds.w	r3, sl, r3
 8005392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005396:	464b      	mov	r3, r9
 8005398:	eb4b 0303 	adc.w	r3, fp, r3
 800539c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053b4:	460b      	mov	r3, r1
 80053b6:	18db      	adds	r3, r3, r3
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ba:	4613      	mov	r3, r2
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
 80053c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053ca:	f7fa ff71 	bl	80002b0 <__aeabi_uldivmod>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	4b3b      	ldr	r3, [pc, #236]	; (80054c4 <UART_SetConfig+0x2d4>)
 80053d6:	fba3 2301 	umull	r2, r3, r3, r1
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2264      	movs	r2, #100	; 0x64
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	1acb      	subs	r3, r1, r3
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053ea:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <UART_SetConfig+0x2d4>)
 80053ec:	fba3 2302 	umull	r2, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053f8:	441c      	add	r4, r3
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	1891      	adds	r1, r2, r2
 8005412:	63b9      	str	r1, [r7, #56]	; 0x38
 8005414:	415b      	adcs	r3, r3
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800541c:	4641      	mov	r1, r8
 800541e:	1851      	adds	r1, r2, r1
 8005420:	6339      	str	r1, [r7, #48]	; 0x30
 8005422:	4649      	mov	r1, r9
 8005424:	414b      	adcs	r3, r1
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005434:	4659      	mov	r1, fp
 8005436:	00cb      	lsls	r3, r1, #3
 8005438:	4651      	mov	r1, sl
 800543a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543e:	4651      	mov	r1, sl
 8005440:	00ca      	lsls	r2, r1, #3
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	4603      	mov	r3, r0
 8005448:	4642      	mov	r2, r8
 800544a:	189b      	adds	r3, r3, r2
 800544c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005450:	464b      	mov	r3, r9
 8005452:	460a      	mov	r2, r1
 8005454:	eb42 0303 	adc.w	r3, r2, r3
 8005458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800546c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005470:	460b      	mov	r3, r1
 8005472:	18db      	adds	r3, r3, r3
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
 8005476:	4613      	mov	r3, r2
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005486:	f7fa ff13 	bl	80002b0 <__aeabi_uldivmod>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <UART_SetConfig+0x2d4>)
 8005490:	fba3 1302 	umull	r1, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	2164      	movs	r1, #100	; 0x64
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	3332      	adds	r3, #50	; 0x32
 80054a2:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <UART_SetConfig+0x2d4>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f003 0207 	and.w	r2, r3, #7
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4422      	add	r2, r4
 80054b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054b8:	e105      	b.n	80056c6 <UART_SetConfig+0x4d6>
 80054ba:	bf00      	nop
 80054bc:	40011000 	.word	0x40011000
 80054c0:	40011400 	.word	0x40011400
 80054c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054da:	4642      	mov	r2, r8
 80054dc:	464b      	mov	r3, r9
 80054de:	1891      	adds	r1, r2, r2
 80054e0:	6239      	str	r1, [r7, #32]
 80054e2:	415b      	adcs	r3, r3
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ea:	4641      	mov	r1, r8
 80054ec:	1854      	adds	r4, r2, r1
 80054ee:	4649      	mov	r1, r9
 80054f0:	eb43 0501 	adc.w	r5, r3, r1
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	00eb      	lsls	r3, r5, #3
 80054fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005502:	00e2      	lsls	r2, r4, #3
 8005504:	4614      	mov	r4, r2
 8005506:	461d      	mov	r5, r3
 8005508:	4643      	mov	r3, r8
 800550a:	18e3      	adds	r3, r4, r3
 800550c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005510:	464b      	mov	r3, r9
 8005512:	eb45 0303 	adc.w	r3, r5, r3
 8005516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005536:	4629      	mov	r1, r5
 8005538:	008b      	lsls	r3, r1, #2
 800553a:	4621      	mov	r1, r4
 800553c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005540:	4621      	mov	r1, r4
 8005542:	008a      	lsls	r2, r1, #2
 8005544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005548:	f7fa feb2 	bl	80002b0 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4b60      	ldr	r3, [pc, #384]	; (80056d4 <UART_SetConfig+0x4e4>)
 8005552:	fba3 2302 	umull	r2, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	011c      	lsls	r4, r3, #4
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	61b9      	str	r1, [r7, #24]
 8005574:	415b      	adcs	r3, r3
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800557c:	4641      	mov	r1, r8
 800557e:	1851      	adds	r1, r2, r1
 8005580:	6139      	str	r1, [r7, #16]
 8005582:	4649      	mov	r1, r9
 8005584:	414b      	adcs	r3, r1
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005594:	4659      	mov	r1, fp
 8005596:	00cb      	lsls	r3, r1, #3
 8005598:	4651      	mov	r1, sl
 800559a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559e:	4651      	mov	r1, sl
 80055a0:	00ca      	lsls	r2, r1, #3
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	4642      	mov	r2, r8
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055b0:	464b      	mov	r3, r9
 80055b2:	460a      	mov	r2, r1
 80055b4:	eb42 0303 	adc.w	r3, r2, r3
 80055b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055d4:	4649      	mov	r1, r9
 80055d6:	008b      	lsls	r3, r1, #2
 80055d8:	4641      	mov	r1, r8
 80055da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055de:	4641      	mov	r1, r8
 80055e0:	008a      	lsls	r2, r1, #2
 80055e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055e6:	f7fa fe63 	bl	80002b0 <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4b39      	ldr	r3, [pc, #228]	; (80056d4 <UART_SetConfig+0x4e4>)
 80055f0:	fba3 1302 	umull	r1, r3, r3, r2
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	2164      	movs	r1, #100	; 0x64
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	3332      	adds	r3, #50	; 0x32
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <UART_SetConfig+0x4e4>)
 8005604:	fba2 2303 	umull	r2, r3, r2, r3
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800560e:	441c      	add	r4, r3
 8005610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005614:	2200      	movs	r2, #0
 8005616:	673b      	str	r3, [r7, #112]	; 0x70
 8005618:	677a      	str	r2, [r7, #116]	; 0x74
 800561a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	1891      	adds	r1, r2, r2
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	415b      	adcs	r3, r3
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800562e:	4641      	mov	r1, r8
 8005630:	1851      	adds	r1, r2, r1
 8005632:	6039      	str	r1, [r7, #0]
 8005634:	4649      	mov	r1, r9
 8005636:	414b      	adcs	r3, r1
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005646:	4659      	mov	r1, fp
 8005648:	00cb      	lsls	r3, r1, #3
 800564a:	4651      	mov	r1, sl
 800564c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005650:	4651      	mov	r1, sl
 8005652:	00ca      	lsls	r2, r1, #3
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	4603      	mov	r3, r0
 800565a:	4642      	mov	r2, r8
 800565c:	189b      	adds	r3, r3, r2
 800565e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005660:	464b      	mov	r3, r9
 8005662:	460a      	mov	r2, r1
 8005664:	eb42 0303 	adc.w	r3, r2, r3
 8005668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	663b      	str	r3, [r7, #96]	; 0x60
 8005674:	667a      	str	r2, [r7, #100]	; 0x64
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005682:	4649      	mov	r1, r9
 8005684:	008b      	lsls	r3, r1, #2
 8005686:	4641      	mov	r1, r8
 8005688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568c:	4641      	mov	r1, r8
 800568e:	008a      	lsls	r2, r1, #2
 8005690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005694:	f7fa fe0c 	bl	80002b0 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <UART_SetConfig+0x4e4>)
 800569e:	fba3 1302 	umull	r1, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2164      	movs	r1, #100	; 0x64
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	3332      	adds	r3, #50	; 0x32
 80056b0:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <UART_SetConfig+0x4e4>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4422      	add	r2, r4
 80056c4:	609a      	str	r2, [r3, #8]
}
 80056c6:	bf00      	nop
 80056c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056cc:	46bd      	mov	sp, r7
 80056ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d2:	bf00      	nop
 80056d4:	51eb851f 	.word	0x51eb851f

080056d8 <__errno>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <__errno+0x8>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000014 	.word	0x20000014

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f001 f824 	bl	8006744 <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08008628 	.word	0x08008628
 8005720:	08008628 	.word	0x08008628
 8005724:	08008628 	.word	0x08008628
 8005728:	0800862c 	.word	0x0800862c

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <_free_r>:
 800573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800573e:	2900      	cmp	r1, #0
 8005740:	d044      	beq.n	80057cc <_free_r+0x90>
 8005742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005746:	9001      	str	r0, [sp, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f1a1 0404 	sub.w	r4, r1, #4
 800574e:	bfb8      	it	lt
 8005750:	18e4      	addlt	r4, r4, r3
 8005752:	f000 fc51 	bl	8005ff8 <__malloc_lock>
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <_free_r+0x94>)
 8005758:	9801      	ldr	r0, [sp, #4]
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	b933      	cbnz	r3, 800576c <_free_r+0x30>
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	b003      	add	sp, #12
 8005764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005768:	f000 bc4c 	b.w	8006004 <__malloc_unlock>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x46>
 8005770:	6825      	ldr	r5, [r4, #0]
 8005772:	1961      	adds	r1, r4, r5
 8005774:	428b      	cmp	r3, r1
 8005776:	bf01      	itttt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	e7ed      	b.n	800575e <_free_r+0x22>
 8005782:	461a      	mov	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b10b      	cbz	r3, 800578c <_free_r+0x50>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d9fa      	bls.n	8005782 <_free_r+0x46>
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	1855      	adds	r5, r2, r1
 8005790:	42a5      	cmp	r5, r4
 8005792:	d10b      	bne.n	80057ac <_free_r+0x70>
 8005794:	6824      	ldr	r4, [r4, #0]
 8005796:	4421      	add	r1, r4
 8005798:	1854      	adds	r4, r2, r1
 800579a:	42a3      	cmp	r3, r4
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	d1e0      	bne.n	8005762 <_free_r+0x26>
 80057a0:	681c      	ldr	r4, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	4421      	add	r1, r4
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	e7da      	b.n	8005762 <_free_r+0x26>
 80057ac:	d902      	bls.n	80057b4 <_free_r+0x78>
 80057ae:	230c      	movs	r3, #12
 80057b0:	6003      	str	r3, [r0, #0]
 80057b2:	e7d6      	b.n	8005762 <_free_r+0x26>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf04      	itt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	bf04      	itt	eq
 80057c4:	1949      	addeq	r1, r1, r5
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	6054      	str	r4, [r2, #4]
 80057ca:	e7ca      	b.n	8005762 <_free_r+0x26>
 80057cc:	b003      	add	sp, #12
 80057ce:	bd30      	pop	{r4, r5, pc}
 80057d0:	200001c8 	.word	0x200001c8

080057d4 <sbrk_aligned>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0e      	ldr	r6, [pc, #56]	; (8005810 <sbrk_aligned+0x3c>)
 80057d8:	460c      	mov	r4, r1
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	4605      	mov	r5, r0
 80057de:	b911      	cbnz	r1, 80057e6 <sbrk_aligned+0x12>
 80057e0:	f000 f91a 	bl	8005a18 <_sbrk_r>
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f915 	bl	8005a18 <_sbrk_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d00a      	beq.n	8005808 <sbrk_aligned+0x34>
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d007      	beq.n	800580c <sbrk_aligned+0x38>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f90a 	bl	8005a18 <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d101      	bne.n	800580c <sbrk_aligned+0x38>
 8005808:	f04f 34ff 	mov.w	r4, #4294967295
 800580c:	4620      	mov	r0, r4
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	200001cc 	.word	0x200001cc

08005814 <_malloc_r>:
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	1ccd      	adds	r5, r1, #3
 800581a:	f025 0503 	bic.w	r5, r5, #3
 800581e:	3508      	adds	r5, #8
 8005820:	2d0c      	cmp	r5, #12
 8005822:	bf38      	it	cc
 8005824:	250c      	movcc	r5, #12
 8005826:	2d00      	cmp	r5, #0
 8005828:	4607      	mov	r7, r0
 800582a:	db01      	blt.n	8005830 <_malloc_r+0x1c>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d905      	bls.n	800583c <_malloc_r+0x28>
 8005830:	230c      	movs	r3, #12
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	2600      	movs	r6, #0
 8005836:	4630      	mov	r0, r6
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	4e2e      	ldr	r6, [pc, #184]	; (80058f8 <_malloc_r+0xe4>)
 800583e:	f000 fbdb 	bl	8005ff8 <__malloc_lock>
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	461c      	mov	r4, r3
 8005846:	bb34      	cbnz	r4, 8005896 <_malloc_r+0x82>
 8005848:	4629      	mov	r1, r5
 800584a:	4638      	mov	r0, r7
 800584c:	f7ff ffc2 	bl	80057d4 <sbrk_aligned>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	4604      	mov	r4, r0
 8005854:	d14d      	bne.n	80058f2 <_malloc_r+0xde>
 8005856:	6834      	ldr	r4, [r6, #0]
 8005858:	4626      	mov	r6, r4
 800585a:	2e00      	cmp	r6, #0
 800585c:	d140      	bne.n	80058e0 <_malloc_r+0xcc>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	4631      	mov	r1, r6
 8005862:	4638      	mov	r0, r7
 8005864:	eb04 0803 	add.w	r8, r4, r3
 8005868:	f000 f8d6 	bl	8005a18 <_sbrk_r>
 800586c:	4580      	cmp	r8, r0
 800586e:	d13a      	bne.n	80058e6 <_malloc_r+0xd2>
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	3503      	adds	r5, #3
 8005874:	1a6d      	subs	r5, r5, r1
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	4629      	mov	r1, r5
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff ffa5 	bl	80057d4 <sbrk_aligned>
 800588a:	3001      	adds	r0, #1
 800588c:	d02b      	beq.n	80058e6 <_malloc_r+0xd2>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	442b      	add	r3, r5
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	e00e      	b.n	80058b4 <_malloc_r+0xa0>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	1b52      	subs	r2, r2, r5
 800589a:	d41e      	bmi.n	80058da <_malloc_r+0xc6>
 800589c:	2a0b      	cmp	r2, #11
 800589e:	d916      	bls.n	80058ce <_malloc_r+0xba>
 80058a0:	1961      	adds	r1, r4, r5
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	6025      	str	r5, [r4, #0]
 80058a6:	bf18      	it	ne
 80058a8:	6059      	strne	r1, [r3, #4]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	bf08      	it	eq
 80058ae:	6031      	streq	r1, [r6, #0]
 80058b0:	5162      	str	r2, [r4, r5]
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	4638      	mov	r0, r7
 80058b6:	f104 060b 	add.w	r6, r4, #11
 80058ba:	f000 fba3 	bl	8006004 <__malloc_unlock>
 80058be:	f026 0607 	bic.w	r6, r6, #7
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	1af2      	subs	r2, r6, r3
 80058c6:	d0b6      	beq.n	8005836 <_malloc_r+0x22>
 80058c8:	1b9b      	subs	r3, r3, r6
 80058ca:	50a3      	str	r3, [r4, r2]
 80058cc:	e7b3      	b.n	8005836 <_malloc_r+0x22>
 80058ce:	6862      	ldr	r2, [r4, #4]
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	bf0c      	ite	eq
 80058d4:	6032      	streq	r2, [r6, #0]
 80058d6:	605a      	strne	r2, [r3, #4]
 80058d8:	e7ec      	b.n	80058b4 <_malloc_r+0xa0>
 80058da:	4623      	mov	r3, r4
 80058dc:	6864      	ldr	r4, [r4, #4]
 80058de:	e7b2      	b.n	8005846 <_malloc_r+0x32>
 80058e0:	4634      	mov	r4, r6
 80058e2:	6876      	ldr	r6, [r6, #4]
 80058e4:	e7b9      	b.n	800585a <_malloc_r+0x46>
 80058e6:	230c      	movs	r3, #12
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4638      	mov	r0, r7
 80058ec:	f000 fb8a 	bl	8006004 <__malloc_unlock>
 80058f0:	e7a1      	b.n	8005836 <_malloc_r+0x22>
 80058f2:	6025      	str	r5, [r4, #0]
 80058f4:	e7de      	b.n	80058b4 <_malloc_r+0xa0>
 80058f6:	bf00      	nop
 80058f8:	200001c8 	.word	0x200001c8

080058fc <iprintf>:
 80058fc:	b40f      	push	{r0, r1, r2, r3}
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <iprintf+0x2c>)
 8005900:	b513      	push	{r0, r1, r4, lr}
 8005902:	681c      	ldr	r4, [r3, #0]
 8005904:	b124      	cbz	r4, 8005910 <iprintf+0x14>
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	b913      	cbnz	r3, 8005910 <iprintf+0x14>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 fa6e 	bl	8005dec <__sinit>
 8005910:	ab05      	add	r3, sp, #20
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fba3 	bl	8006064 <_vfiprintf_r>
 800591e:	b002      	add	sp, #8
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	b004      	add	sp, #16
 8005926:	4770      	bx	lr
 8005928:	20000014 	.word	0x20000014

0800592c <_puts_r>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	460e      	mov	r6, r1
 8005930:	4605      	mov	r5, r0
 8005932:	b118      	cbz	r0, 800593c <_puts_r+0x10>
 8005934:	6983      	ldr	r3, [r0, #24]
 8005936:	b90b      	cbnz	r3, 800593c <_puts_r+0x10>
 8005938:	f000 fa58 	bl	8005dec <__sinit>
 800593c:	69ab      	ldr	r3, [r5, #24]
 800593e:	68ac      	ldr	r4, [r5, #8]
 8005940:	b913      	cbnz	r3, 8005948 <_puts_r+0x1c>
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fa52 	bl	8005dec <__sinit>
 8005948:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <_puts_r+0xd0>)
 800594a:	429c      	cmp	r4, r3
 800594c:	d120      	bne.n	8005990 <_puts_r+0x64>
 800594e:	686c      	ldr	r4, [r5, #4]
 8005950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005952:	07db      	lsls	r3, r3, #31
 8005954:	d405      	bmi.n	8005962 <_puts_r+0x36>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	0598      	lsls	r0, r3, #22
 800595a:	d402      	bmi.n	8005962 <_puts_r+0x36>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f000 fae3 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	0719      	lsls	r1, r3, #28
 8005966:	d51d      	bpl.n	80059a4 <_puts_r+0x78>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	b1db      	cbz	r3, 80059a4 <_puts_r+0x78>
 800596c:	3e01      	subs	r6, #1
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005974:	3b01      	subs	r3, #1
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	bb39      	cbnz	r1, 80059ca <_puts_r+0x9e>
 800597a:	2b00      	cmp	r3, #0
 800597c:	da38      	bge.n	80059f0 <_puts_r+0xc4>
 800597e:	4622      	mov	r2, r4
 8005980:	210a      	movs	r1, #10
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f858 	bl	8005a38 <__swbuf_r>
 8005988:	3001      	adds	r0, #1
 800598a:	d011      	beq.n	80059b0 <_puts_r+0x84>
 800598c:	250a      	movs	r5, #10
 800598e:	e011      	b.n	80059b4 <_puts_r+0x88>
 8005990:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <_puts_r+0xd4>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d101      	bne.n	800599a <_puts_r+0x6e>
 8005996:	68ac      	ldr	r4, [r5, #8]
 8005998:	e7da      	b.n	8005950 <_puts_r+0x24>
 800599a:	4b1a      	ldr	r3, [pc, #104]	; (8005a04 <_puts_r+0xd8>)
 800599c:	429c      	cmp	r4, r3
 800599e:	bf08      	it	eq
 80059a0:	68ec      	ldreq	r4, [r5, #12]
 80059a2:	e7d5      	b.n	8005950 <_puts_r+0x24>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f898 	bl	8005adc <__swsetup_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d0dd      	beq.n	800596c <_puts_r+0x40>
 80059b0:	f04f 35ff 	mov.w	r5, #4294967295
 80059b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b6:	07da      	lsls	r2, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_puts_r+0x9a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_puts_r+0x9a>
 80059c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c2:	f000 fab2 	bl	8005f2a <__retarget_lock_release_recursive>
 80059c6:	4628      	mov	r0, r5
 80059c8:	bd70      	pop	{r4, r5, r6, pc}
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da04      	bge.n	80059d8 <_puts_r+0xac>
 80059ce:	69a2      	ldr	r2, [r4, #24]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	dc06      	bgt.n	80059e2 <_puts_r+0xb6>
 80059d4:	290a      	cmp	r1, #10
 80059d6:	d004      	beq.n	80059e2 <_puts_r+0xb6>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	6022      	str	r2, [r4, #0]
 80059de:	7019      	strb	r1, [r3, #0]
 80059e0:	e7c5      	b.n	800596e <_puts_r+0x42>
 80059e2:	4622      	mov	r2, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f000 f827 	bl	8005a38 <__swbuf_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d1bf      	bne.n	800596e <_puts_r+0x42>
 80059ee:	e7df      	b.n	80059b0 <_puts_r+0x84>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	250a      	movs	r5, #10
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	701d      	strb	r5, [r3, #0]
 80059fa:	e7db      	b.n	80059b4 <_puts_r+0x88>
 80059fc:	080085ac 	.word	0x080085ac
 8005a00:	080085cc 	.word	0x080085cc
 8005a04:	0800858c 	.word	0x0800858c

08005a08 <puts>:
 8005a08:	4b02      	ldr	r3, [pc, #8]	; (8005a14 <puts+0xc>)
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f7ff bf8d 	b.w	800592c <_puts_r>
 8005a12:	bf00      	nop
 8005a14:	20000014 	.word	0x20000014

08005a18 <_sbrk_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d06      	ldr	r5, [pc, #24]	; (8005a34 <_sbrk_r+0x1c>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	f7fb f996 	bl	8000d54 <_sbrk>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_sbrk_r+0x1a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_sbrk_r+0x1a>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	200001d4 	.word	0x200001d4

08005a38 <__swbuf_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b118      	cbz	r0, 8005a4a <__swbuf_r+0x12>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <__swbuf_r+0x12>
 8005a46:	f000 f9d1 	bl	8005dec <__sinit>
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <__swbuf_r+0x98>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d12b      	bne.n	8005aa8 <__swbuf_r+0x70>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	69a3      	ldr	r3, [r4, #24]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	071a      	lsls	r2, r3, #28
 8005a5a:	d52f      	bpl.n	8005abc <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b36b      	cbz	r3, 8005abc <__swbuf_r+0x84>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	b2f6      	uxtb	r6, r6
 8005a6a:	4283      	cmp	r3, r0
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	dc04      	bgt.n	8005a7a <__swbuf_r+0x42>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f926 	bl	8005cc4 <_fflush_r>
 8005a78:	bb30      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	701e      	strb	r6, [r3, #0]
 8005a88:	6963      	ldr	r3, [r4, #20]
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x62>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d506      	bpl.n	8005aa4 <__swbuf_r+0x6c>
 8005a96:	2e0a      	cmp	r6, #10
 8005a98:	d104      	bne.n	8005aa4 <__swbuf_r+0x6c>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f911 	bl	8005cc4 <_fflush_r>
 8005aa2:	b988      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <__swbuf_r+0x9c>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swbuf_r+0x7a>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7cf      	b.n	8005a52 <__swbuf_r+0x1a>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <__swbuf_r+0xa0>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7ca      	b.n	8005a52 <__swbuf_r+0x1a>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f80c 	bl	8005adc <__swsetup_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0cb      	beq.n	8005a60 <__swbuf_r+0x28>
 8005ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8005acc:	e7ea      	b.n	8005aa4 <__swbuf_r+0x6c>
 8005ace:	bf00      	nop
 8005ad0:	080085ac 	.word	0x080085ac
 8005ad4:	080085cc 	.word	0x080085cc
 8005ad8:	0800858c 	.word	0x0800858c

08005adc <__swsetup_r>:
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <__swsetup_r+0xcc>)
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	681d      	ldr	r5, [r3, #0]
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	b125      	cbz	r5, 8005af2 <__swsetup_r+0x16>
 8005ae8:	69ab      	ldr	r3, [r5, #24]
 8005aea:	b913      	cbnz	r3, 8005af2 <__swsetup_r+0x16>
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f97d 	bl	8005dec <__sinit>
 8005af2:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <__swsetup_r+0xd0>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d10f      	bne.n	8005b18 <__swsetup_r+0x3c>
 8005af8:	686c      	ldr	r4, [r5, #4]
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b00:	0719      	lsls	r1, r3, #28
 8005b02:	d42c      	bmi.n	8005b5e <__swsetup_r+0x82>
 8005b04:	06dd      	lsls	r5, r3, #27
 8005b06:	d411      	bmi.n	8005b2c <__swsetup_r+0x50>
 8005b08:	2309      	movs	r3, #9
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	e03e      	b.n	8005b96 <__swsetup_r+0xba>
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <__swsetup_r+0xd4>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d101      	bne.n	8005b22 <__swsetup_r+0x46>
 8005b1e:	68ac      	ldr	r4, [r5, #8]
 8005b20:	e7eb      	b.n	8005afa <__swsetup_r+0x1e>
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <__swsetup_r+0xd8>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	bf08      	it	eq
 8005b28:	68ec      	ldreq	r4, [r5, #12]
 8005b2a:	e7e6      	b.n	8005afa <__swsetup_r+0x1e>
 8005b2c:	0758      	lsls	r0, r3, #29
 8005b2e:	d512      	bpl.n	8005b56 <__swsetup_r+0x7a>
 8005b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b32:	b141      	cbz	r1, 8005b46 <__swsetup_r+0x6a>
 8005b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d002      	beq.n	8005b42 <__swsetup_r+0x66>
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7ff fdfd 	bl	800573c <_free_r>
 8005b42:	2300      	movs	r3, #0
 8005b44:	6363      	str	r3, [r4, #52]	; 0x34
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6063      	str	r3, [r4, #4]
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f043 0308 	orr.w	r3, r3, #8
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	b94b      	cbnz	r3, 8005b76 <__swsetup_r+0x9a>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6c:	d003      	beq.n	8005b76 <__swsetup_r+0x9a>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 fa01 	bl	8005f78 <__smakebuf_r>
 8005b76:	89a0      	ldrh	r0, [r4, #12]
 8005b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b7c:	f010 0301 	ands.w	r3, r0, #1
 8005b80:	d00a      	beq.n	8005b98 <__swsetup_r+0xbc>
 8005b82:	2300      	movs	r3, #0
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	6963      	ldr	r3, [r4, #20]
 8005b88:	425b      	negs	r3, r3
 8005b8a:	61a3      	str	r3, [r4, #24]
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	b943      	cbnz	r3, 8005ba2 <__swsetup_r+0xc6>
 8005b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b94:	d1ba      	bne.n	8005b0c <__swsetup_r+0x30>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	0781      	lsls	r1, r0, #30
 8005b9a:	bf58      	it	pl
 8005b9c:	6963      	ldrpl	r3, [r4, #20]
 8005b9e:	60a3      	str	r3, [r4, #8]
 8005ba0:	e7f4      	b.n	8005b8c <__swsetup_r+0xb0>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e7f7      	b.n	8005b96 <__swsetup_r+0xba>
 8005ba6:	bf00      	nop
 8005ba8:	20000014 	.word	0x20000014
 8005bac:	080085ac 	.word	0x080085ac
 8005bb0:	080085cc 	.word	0x080085cc
 8005bb4:	0800858c 	.word	0x0800858c

08005bb8 <__sflush_r>:
 8005bb8:	898a      	ldrh	r2, [r1, #12]
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	0710      	lsls	r0, r2, #28
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	d458      	bmi.n	8005c78 <__sflush_r+0xc0>
 8005bc6:	684b      	ldr	r3, [r1, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dc05      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dc02      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	d0f9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be4:	682f      	ldr	r7, [r5, #0]
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	d032      	beq.n	8005c50 <__sflush_r+0x98>
 8005bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	075a      	lsls	r2, r3, #29
 8005bf0:	d505      	bpl.n	8005bfe <__sflush_r+0x46>
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	1ac0      	subs	r0, r0, r3
 8005bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf8:	b10b      	cbz	r3, 8005bfe <__sflush_r+0x46>
 8005bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4602      	mov	r2, r0
 8005c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	d106      	bne.n	8005c1e <__sflush_r+0x66>
 8005c10:	6829      	ldr	r1, [r5, #0]
 8005c12:	291d      	cmp	r1, #29
 8005c14:	d82c      	bhi.n	8005c70 <__sflush_r+0xb8>
 8005c16:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <__sflush_r+0x108>)
 8005c18:	40ca      	lsrs	r2, r1
 8005c1a:	07d6      	lsls	r6, r2, #31
 8005c1c:	d528      	bpl.n	8005c70 <__sflush_r+0xb8>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6062      	str	r2, [r4, #4]
 8005c22:	04d9      	lsls	r1, r3, #19
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	d504      	bpl.n	8005c34 <__sflush_r+0x7c>
 8005c2a:	1c42      	adds	r2, r0, #1
 8005c2c:	d101      	bne.n	8005c32 <__sflush_r+0x7a>
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	b903      	cbnz	r3, 8005c34 <__sflush_r+0x7c>
 8005c32:	6560      	str	r0, [r4, #84]	; 0x54
 8005c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c36:	602f      	str	r7, [r5, #0]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d0ca      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__sflush_r+0x92>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f7ff fd79 	bl	800573c <_free_r>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4e:	e7c1      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	2301      	movs	r3, #1
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b0      	blx	r6
 8005c58:	1c41      	adds	r1, r0, #1
 8005c5a:	d1c7      	bne.n	8005bec <__sflush_r+0x34>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c4      	beq.n	8005bec <__sflush_r+0x34>
 8005c62:	2b1d      	cmp	r3, #29
 8005c64:	d001      	beq.n	8005c6a <__sflush_r+0xb2>
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d101      	bne.n	8005c6e <__sflush_r+0xb6>
 8005c6a:	602f      	str	r7, [r5, #0]
 8005c6c:	e7b1      	b.n	8005bd2 <__sflush_r+0x1a>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e7ad      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c78:	690f      	ldr	r7, [r1, #16]
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d0a9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c7e:	0793      	lsls	r3, r2, #30
 8005c80:	680e      	ldr	r6, [r1, #0]
 8005c82:	bf08      	it	eq
 8005c84:	694b      	ldreq	r3, [r1, #20]
 8005c86:	600f      	str	r7, [r1, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	eba6 0807 	sub.w	r8, r6, r7
 8005c90:	608b      	str	r3, [r1, #8]
 8005c92:	f1b8 0f00 	cmp.w	r8, #0
 8005c96:	dd9c      	ble.n	8005bd2 <__sflush_r+0x1a>
 8005c98:	6a21      	ldr	r1, [r4, #32]
 8005c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b0      	blx	r6
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dc06      	bgt.n	8005cb6 <__sflush_r+0xfe>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	e78e      	b.n	8005bd4 <__sflush_r+0x1c>
 8005cb6:	4407      	add	r7, r0
 8005cb8:	eba8 0800 	sub.w	r8, r8, r0
 8005cbc:	e7e9      	b.n	8005c92 <__sflush_r+0xda>
 8005cbe:	bf00      	nop
 8005cc0:	20400001 	.word	0x20400001

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b913      	cbnz	r3, 8005cd4 <_fflush_r+0x10>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	b118      	cbz	r0, 8005cde <_fflush_r+0x1a>
 8005cd6:	6983      	ldr	r3, [r0, #24]
 8005cd8:	b90b      	cbnz	r3, 8005cde <_fflush_r+0x1a>
 8005cda:	f000 f887 	bl	8005dec <__sinit>
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <_fflush_r+0x6c>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d11b      	bne.n	8005d1c <_fflush_r+0x58>
 8005ce4:	686c      	ldr	r4, [r5, #4]
 8005ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ef      	beq.n	8005cce <_fflush_r+0xa>
 8005cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf0:	07d0      	lsls	r0, r2, #31
 8005cf2:	d404      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf4:	0599      	lsls	r1, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfa:	f000 f915 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4621      	mov	r1, r4
 8005d02:	f7ff ff59 	bl	8005bb8 <__sflush_r>
 8005d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d08:	07da      	lsls	r2, r3, #31
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	d4e0      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	d4dd      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f000 f908 	bl	8005f2a <__retarget_lock_release_recursive>
 8005d1a:	e7d9      	b.n	8005cd0 <_fflush_r+0xc>
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <_fflush_r+0x70>)
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d101      	bne.n	8005d26 <_fflush_r+0x62>
 8005d22:	68ac      	ldr	r4, [r5, #8]
 8005d24:	e7df      	b.n	8005ce6 <_fflush_r+0x22>
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <_fflush_r+0x74>)
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	bf08      	it	eq
 8005d2c:	68ec      	ldreq	r4, [r5, #12]
 8005d2e:	e7da      	b.n	8005ce6 <_fflush_r+0x22>
 8005d30:	080085ac 	.word	0x080085ac
 8005d34:	080085cc 	.word	0x080085cc
 8005d38:	0800858c 	.word	0x0800858c

08005d3c <std>:
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	b510      	push	{r4, lr}
 8005d40:	4604      	mov	r4, r0
 8005d42:	e9c0 3300 	strd	r3, r3, [r0]
 8005d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4a:	6083      	str	r3, [r0, #8]
 8005d4c:	8181      	strh	r1, [r0, #12]
 8005d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d50:	81c2      	strh	r2, [r0, #14]
 8005d52:	6183      	str	r3, [r0, #24]
 8005d54:	4619      	mov	r1, r3
 8005d56:	2208      	movs	r2, #8
 8005d58:	305c      	adds	r0, #92	; 0x5c
 8005d5a:	f7ff fce7 	bl	800572c <memset>
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <std+0x38>)
 8005d60:	6263      	str	r3, [r4, #36]	; 0x24
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <std+0x3c>)
 8005d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x40>)
 8005d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x44>)
 8005d6c:	6224      	str	r4, [r4, #32]
 8005d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	bf00      	nop
 8005d74:	080065ed 	.word	0x080065ed
 8005d78:	0800660f 	.word	0x0800660f
 8005d7c:	08006647 	.word	0x08006647
 8005d80:	0800666b 	.word	0x0800666b

08005d84 <_cleanup_r>:
 8005d84:	4901      	ldr	r1, [pc, #4]	; (8005d8c <_cleanup_r+0x8>)
 8005d86:	f000 b8af 	b.w	8005ee8 <_fwalk_reent>
 8005d8a:	bf00      	nop
 8005d8c:	08005cc5 	.word	0x08005cc5

08005d90 <__sfmoreglue>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	2268      	movs	r2, #104	; 0x68
 8005d94:	1e4d      	subs	r5, r1, #1
 8005d96:	4355      	muls	r5, r2
 8005d98:	460e      	mov	r6, r1
 8005d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d9e:	f7ff fd39 	bl	8005814 <_malloc_r>
 8005da2:	4604      	mov	r4, r0
 8005da4:	b140      	cbz	r0, 8005db8 <__sfmoreglue+0x28>
 8005da6:	2100      	movs	r1, #0
 8005da8:	e9c0 1600 	strd	r1, r6, [r0]
 8005dac:	300c      	adds	r0, #12
 8005dae:	60a0      	str	r0, [r4, #8]
 8005db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db4:	f7ff fcba 	bl	800572c <memset>
 8005db8:	4620      	mov	r0, r4
 8005dba:	bd70      	pop	{r4, r5, r6, pc}

08005dbc <__sfp_lock_acquire>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__sfp_lock_acquire+0x8>)
 8005dbe:	f000 b8b3 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	200001d1 	.word	0x200001d1

08005dc8 <__sfp_lock_release>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__sfp_lock_release+0x8>)
 8005dca:	f000 b8ae 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	200001d1 	.word	0x200001d1

08005dd4 <__sinit_lock_acquire>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sinit_lock_acquire+0x8>)
 8005dd6:	f000 b8a7 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	200001d2 	.word	0x200001d2

08005de0 <__sinit_lock_release>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sinit_lock_release+0x8>)
 8005de2:	f000 b8a2 	b.w	8005f2a <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	200001d2 	.word	0x200001d2

08005dec <__sinit>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff fff0 	bl	8005dd4 <__sinit_lock_acquire>
 8005df4:	69a3      	ldr	r3, [r4, #24]
 8005df6:	b11b      	cbz	r3, 8005e00 <__sinit+0x14>
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f7ff bff0 	b.w	8005de0 <__sinit_lock_release>
 8005e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e04:	6523      	str	r3, [r4, #80]	; 0x50
 8005e06:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <__sinit+0x68>)
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <__sinit+0x6c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	bf04      	itt	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	61a3      	streq	r3, [r4, #24]
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 f820 	bl	8005e5c <__sfp>
 8005e1c:	6060      	str	r0, [r4, #4]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f81c 	bl	8005e5c <__sfp>
 8005e24:	60a0      	str	r0, [r4, #8]
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 f818 	bl	8005e5c <__sfp>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	60e0      	str	r0, [r4, #12]
 8005e30:	2104      	movs	r1, #4
 8005e32:	6860      	ldr	r0, [r4, #4]
 8005e34:	f7ff ff82 	bl	8005d3c <std>
 8005e38:	68a0      	ldr	r0, [r4, #8]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	2109      	movs	r1, #9
 8005e3e:	f7ff ff7d 	bl	8005d3c <std>
 8005e42:	68e0      	ldr	r0, [r4, #12]
 8005e44:	2202      	movs	r2, #2
 8005e46:	2112      	movs	r1, #18
 8005e48:	f7ff ff78 	bl	8005d3c <std>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	61a3      	str	r3, [r4, #24]
 8005e50:	e7d2      	b.n	8005df8 <__sinit+0xc>
 8005e52:	bf00      	nop
 8005e54:	08008588 	.word	0x08008588
 8005e58:	08005d85 	.word	0x08005d85

08005e5c <__sfp>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	4607      	mov	r7, r0
 8005e60:	f7ff ffac 	bl	8005dbc <__sfp_lock_acquire>
 8005e64:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <__sfp+0x84>)
 8005e66:	681e      	ldr	r6, [r3, #0]
 8005e68:	69b3      	ldr	r3, [r6, #24]
 8005e6a:	b913      	cbnz	r3, 8005e72 <__sfp+0x16>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff ffbd 	bl	8005dec <__sinit>
 8005e72:	3648      	adds	r6, #72	; 0x48
 8005e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	d503      	bpl.n	8005e84 <__sfp+0x28>
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	b30b      	cbz	r3, 8005ec4 <__sfp+0x68>
 8005e80:	6836      	ldr	r6, [r6, #0]
 8005e82:	e7f7      	b.n	8005e74 <__sfp+0x18>
 8005e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e88:	b9d5      	cbnz	r5, 8005ec0 <__sfp+0x64>
 8005e8a:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <__sfp+0x88>)
 8005e8c:	60e3      	str	r3, [r4, #12]
 8005e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e92:	6665      	str	r5, [r4, #100]	; 0x64
 8005e94:	f000 f847 	bl	8005f26 <__retarget_lock_init_recursive>
 8005e98:	f7ff ff96 	bl	8005dc8 <__sfp_lock_release>
 8005e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ea4:	6025      	str	r5, [r4, #0]
 8005ea6:	61a5      	str	r5, [r4, #24]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	4629      	mov	r1, r5
 8005eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb0:	f7ff fc3c 	bl	800572c <memset>
 8005eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec0:	3468      	adds	r4, #104	; 0x68
 8005ec2:	e7d9      	b.n	8005e78 <__sfp+0x1c>
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	f7ff ff62 	bl	8005d90 <__sfmoreglue>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	6030      	str	r0, [r6, #0]
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1d5      	bne.n	8005e80 <__sfp+0x24>
 8005ed4:	f7ff ff78 	bl	8005dc8 <__sfp_lock_release>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	e7ee      	b.n	8005ebc <__sfp+0x60>
 8005ede:	bf00      	nop
 8005ee0:	08008588 	.word	0x08008588
 8005ee4:	ffff0001 	.word	0xffff0001

08005ee8 <_fwalk_reent>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4606      	mov	r6, r0
 8005eee:	4688      	mov	r8, r1
 8005ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ef4:	2700      	movs	r7, #0
 8005ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005efa:	f1b9 0901 	subs.w	r9, r9, #1
 8005efe:	d505      	bpl.n	8005f0c <_fwalk_reent+0x24>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	d1f7      	bne.n	8005ef6 <_fwalk_reent+0xe>
 8005f06:	4638      	mov	r0, r7
 8005f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0c:	89ab      	ldrh	r3, [r5, #12]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d907      	bls.n	8005f22 <_fwalk_reent+0x3a>
 8005f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f16:	3301      	adds	r3, #1
 8005f18:	d003      	beq.n	8005f22 <_fwalk_reent+0x3a>
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	47c0      	blx	r8
 8005f20:	4307      	orrs	r7, r0
 8005f22:	3568      	adds	r5, #104	; 0x68
 8005f24:	e7e9      	b.n	8005efa <_fwalk_reent+0x12>

08005f26 <__retarget_lock_init_recursive>:
 8005f26:	4770      	bx	lr

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <__swhatbuf_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	460e      	mov	r6, r1
 8005f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f34:	2900      	cmp	r1, #0
 8005f36:	b096      	sub	sp, #88	; 0x58
 8005f38:	4614      	mov	r4, r2
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	da08      	bge.n	8005f50 <__swhatbuf_r+0x24>
 8005f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	061a      	lsls	r2, r3, #24
 8005f48:	d410      	bmi.n	8005f6c <__swhatbuf_r+0x40>
 8005f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4e:	e00e      	b.n	8005f6e <__swhatbuf_r+0x42>
 8005f50:	466a      	mov	r2, sp
 8005f52:	f000 fbb1 	bl	80066b8 <_fstat_r>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	dbf1      	blt.n	8005f3e <__swhatbuf_r+0x12>
 8005f5a:	9a01      	ldr	r2, [sp, #4]
 8005f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f64:	425a      	negs	r2, r3
 8005f66:	415a      	adcs	r2, r3
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	e7ee      	b.n	8005f4a <__swhatbuf_r+0x1e>
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	2000      	movs	r0, #0
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	b016      	add	sp, #88	; 0x58
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f78 <__smakebuf_r>:
 8005f78:	898b      	ldrh	r3, [r1, #12]
 8005f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f7c:	079d      	lsls	r5, r3, #30
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	d507      	bpl.n	8005f94 <__smakebuf_r+0x1c>
 8005f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	6163      	str	r3, [r4, #20]
 8005f90:	b002      	add	sp, #8
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	ab01      	add	r3, sp, #4
 8005f96:	466a      	mov	r2, sp
 8005f98:	f7ff ffc8 	bl	8005f2c <__swhatbuf_r>
 8005f9c:	9900      	ldr	r1, [sp, #0]
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff fc37 	bl	8005814 <_malloc_r>
 8005fa6:	b948      	cbnz	r0, 8005fbc <__smakebuf_r+0x44>
 8005fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fac:	059a      	lsls	r2, r3, #22
 8005fae:	d4ef      	bmi.n	8005f90 <__smakebuf_r+0x18>
 8005fb0:	f023 0303 	bic.w	r3, r3, #3
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	e7e3      	b.n	8005f84 <__smakebuf_r+0xc>
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <__smakebuf_r+0x7c>)
 8005fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	6020      	str	r0, [r4, #0]
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	6163      	str	r3, [r4, #20]
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	6120      	str	r0, [r4, #16]
 8005fd2:	b15b      	cbz	r3, 8005fec <__smakebuf_r+0x74>
 8005fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 fb7f 	bl	80066dc <_isatty_r>
 8005fde:	b128      	cbz	r0, 8005fec <__smakebuf_r+0x74>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	f043 0301 	orr.w	r3, r3, #1
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	89a0      	ldrh	r0, [r4, #12]
 8005fee:	4305      	orrs	r5, r0
 8005ff0:	81a5      	strh	r5, [r4, #12]
 8005ff2:	e7cd      	b.n	8005f90 <__smakebuf_r+0x18>
 8005ff4:	08005d85 	.word	0x08005d85

08005ff8 <__malloc_lock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_lock+0x8>)
 8005ffa:	f7ff bf95 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	200001d0 	.word	0x200001d0

08006004 <__malloc_unlock>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__malloc_unlock+0x8>)
 8006006:	f7ff bf90 	b.w	8005f2a <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	200001d0 	.word	0x200001d0

08006010 <__sfputc_r>:
 8006010:	6893      	ldr	r3, [r2, #8]
 8006012:	3b01      	subs	r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	b410      	push	{r4}
 8006018:	6093      	str	r3, [r2, #8]
 800601a:	da08      	bge.n	800602e <__sfputc_r+0x1e>
 800601c:	6994      	ldr	r4, [r2, #24]
 800601e:	42a3      	cmp	r3, r4
 8006020:	db01      	blt.n	8006026 <__sfputc_r+0x16>
 8006022:	290a      	cmp	r1, #10
 8006024:	d103      	bne.n	800602e <__sfputc_r+0x1e>
 8006026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800602a:	f7ff bd05 	b.w	8005a38 <__swbuf_r>
 800602e:	6813      	ldr	r3, [r2, #0]
 8006030:	1c58      	adds	r0, r3, #1
 8006032:	6010      	str	r0, [r2, #0]
 8006034:	7019      	strb	r1, [r3, #0]
 8006036:	4608      	mov	r0, r1
 8006038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603c:	4770      	bx	lr

0800603e <__sfputs_r>:
 800603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006040:	4606      	mov	r6, r0
 8006042:	460f      	mov	r7, r1
 8006044:	4614      	mov	r4, r2
 8006046:	18d5      	adds	r5, r2, r3
 8006048:	42ac      	cmp	r4, r5
 800604a:	d101      	bne.n	8006050 <__sfputs_r+0x12>
 800604c:	2000      	movs	r0, #0
 800604e:	e007      	b.n	8006060 <__sfputs_r+0x22>
 8006050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006054:	463a      	mov	r2, r7
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff ffda 	bl	8006010 <__sfputc_r>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d1f3      	bne.n	8006048 <__sfputs_r+0xa>
 8006060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006064 <_vfiprintf_r>:
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	460d      	mov	r5, r1
 800606a:	b09d      	sub	sp, #116	; 0x74
 800606c:	4614      	mov	r4, r2
 800606e:	4698      	mov	r8, r3
 8006070:	4606      	mov	r6, r0
 8006072:	b118      	cbz	r0, 800607c <_vfiprintf_r+0x18>
 8006074:	6983      	ldr	r3, [r0, #24]
 8006076:	b90b      	cbnz	r3, 800607c <_vfiprintf_r+0x18>
 8006078:	f7ff feb8 	bl	8005dec <__sinit>
 800607c:	4b89      	ldr	r3, [pc, #548]	; (80062a4 <_vfiprintf_r+0x240>)
 800607e:	429d      	cmp	r5, r3
 8006080:	d11b      	bne.n	80060ba <_vfiprintf_r+0x56>
 8006082:	6875      	ldr	r5, [r6, #4]
 8006084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	d405      	bmi.n	8006096 <_vfiprintf_r+0x32>
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	059a      	lsls	r2, r3, #22
 800608e:	d402      	bmi.n	8006096 <_vfiprintf_r+0x32>
 8006090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006092:	f7ff ff49 	bl	8005f28 <__retarget_lock_acquire_recursive>
 8006096:	89ab      	ldrh	r3, [r5, #12]
 8006098:	071b      	lsls	r3, r3, #28
 800609a:	d501      	bpl.n	80060a0 <_vfiprintf_r+0x3c>
 800609c:	692b      	ldr	r3, [r5, #16]
 800609e:	b9eb      	cbnz	r3, 80060dc <_vfiprintf_r+0x78>
 80060a0:	4629      	mov	r1, r5
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff fd1a 	bl	8005adc <__swsetup_r>
 80060a8:	b1c0      	cbz	r0, 80060dc <_vfiprintf_r+0x78>
 80060aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ac:	07dc      	lsls	r4, r3, #31
 80060ae:	d50e      	bpl.n	80060ce <_vfiprintf_r+0x6a>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	b01d      	add	sp, #116	; 0x74
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	4b7b      	ldr	r3, [pc, #492]	; (80062a8 <_vfiprintf_r+0x244>)
 80060bc:	429d      	cmp	r5, r3
 80060be:	d101      	bne.n	80060c4 <_vfiprintf_r+0x60>
 80060c0:	68b5      	ldr	r5, [r6, #8]
 80060c2:	e7df      	b.n	8006084 <_vfiprintf_r+0x20>
 80060c4:	4b79      	ldr	r3, [pc, #484]	; (80062ac <_vfiprintf_r+0x248>)
 80060c6:	429d      	cmp	r5, r3
 80060c8:	bf08      	it	eq
 80060ca:	68f5      	ldreq	r5, [r6, #12]
 80060cc:	e7da      	b.n	8006084 <_vfiprintf_r+0x20>
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	0598      	lsls	r0, r3, #22
 80060d2:	d4ed      	bmi.n	80060b0 <_vfiprintf_r+0x4c>
 80060d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060d6:	f7ff ff28 	bl	8005f2a <__retarget_lock_release_recursive>
 80060da:	e7e9      	b.n	80060b0 <_vfiprintf_r+0x4c>
 80060dc:	2300      	movs	r3, #0
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	2320      	movs	r3, #32
 80060e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ea:	2330      	movs	r3, #48	; 0x30
 80060ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062b0 <_vfiprintf_r+0x24c>
 80060f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060f4:	f04f 0901 	mov.w	r9, #1
 80060f8:	4623      	mov	r3, r4
 80060fa:	469a      	mov	sl, r3
 80060fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006100:	b10a      	cbz	r2, 8006106 <_vfiprintf_r+0xa2>
 8006102:	2a25      	cmp	r2, #37	; 0x25
 8006104:	d1f9      	bne.n	80060fa <_vfiprintf_r+0x96>
 8006106:	ebba 0b04 	subs.w	fp, sl, r4
 800610a:	d00b      	beq.n	8006124 <_vfiprintf_r+0xc0>
 800610c:	465b      	mov	r3, fp
 800610e:	4622      	mov	r2, r4
 8006110:	4629      	mov	r1, r5
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ff93 	bl	800603e <__sfputs_r>
 8006118:	3001      	adds	r0, #1
 800611a:	f000 80aa 	beq.w	8006272 <_vfiprintf_r+0x20e>
 800611e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006120:	445a      	add	r2, fp
 8006122:	9209      	str	r2, [sp, #36]	; 0x24
 8006124:	f89a 3000 	ldrb.w	r3, [sl]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80a2 	beq.w	8006272 <_vfiprintf_r+0x20e>
 800612e:	2300      	movs	r3, #0
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006138:	f10a 0a01 	add.w	sl, sl, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	9307      	str	r3, [sp, #28]
 8006140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006144:	931a      	str	r3, [sp, #104]	; 0x68
 8006146:	4654      	mov	r4, sl
 8006148:	2205      	movs	r2, #5
 800614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614e:	4858      	ldr	r0, [pc, #352]	; (80062b0 <_vfiprintf_r+0x24c>)
 8006150:	f7fa f85e 	bl	8000210 <memchr>
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	b9d8      	cbnz	r0, 8006190 <_vfiprintf_r+0x12c>
 8006158:	06d1      	lsls	r1, r2, #27
 800615a:	bf44      	itt	mi
 800615c:	2320      	movmi	r3, #32
 800615e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006162:	0713      	lsls	r3, r2, #28
 8006164:	bf44      	itt	mi
 8006166:	232b      	movmi	r3, #43	; 0x2b
 8006168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800616c:	f89a 3000 	ldrb.w	r3, [sl]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d015      	beq.n	80061a0 <_vfiprintf_r+0x13c>
 8006174:	9a07      	ldr	r2, [sp, #28]
 8006176:	4654      	mov	r4, sl
 8006178:	2000      	movs	r0, #0
 800617a:	f04f 0c0a 	mov.w	ip, #10
 800617e:	4621      	mov	r1, r4
 8006180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006184:	3b30      	subs	r3, #48	; 0x30
 8006186:	2b09      	cmp	r3, #9
 8006188:	d94e      	bls.n	8006228 <_vfiprintf_r+0x1c4>
 800618a:	b1b0      	cbz	r0, 80061ba <_vfiprintf_r+0x156>
 800618c:	9207      	str	r2, [sp, #28]
 800618e:	e014      	b.n	80061ba <_vfiprintf_r+0x156>
 8006190:	eba0 0308 	sub.w	r3, r0, r8
 8006194:	fa09 f303 	lsl.w	r3, r9, r3
 8006198:	4313      	orrs	r3, r2
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	46a2      	mov	sl, r4
 800619e:	e7d2      	b.n	8006146 <_vfiprintf_r+0xe2>
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	1d19      	adds	r1, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9103      	str	r1, [sp, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfbb      	ittet	lt
 80061ac:	425b      	neglt	r3, r3
 80061ae:	f042 0202 	orrlt.w	r2, r2, #2
 80061b2:	9307      	strge	r3, [sp, #28]
 80061b4:	9307      	strlt	r3, [sp, #28]
 80061b6:	bfb8      	it	lt
 80061b8:	9204      	strlt	r2, [sp, #16]
 80061ba:	7823      	ldrb	r3, [r4, #0]
 80061bc:	2b2e      	cmp	r3, #46	; 0x2e
 80061be:	d10c      	bne.n	80061da <_vfiprintf_r+0x176>
 80061c0:	7863      	ldrb	r3, [r4, #1]
 80061c2:	2b2a      	cmp	r3, #42	; 0x2a
 80061c4:	d135      	bne.n	8006232 <_vfiprintf_r+0x1ce>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	9203      	str	r2, [sp, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfb8      	it	lt
 80061d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d6:	3402      	adds	r4, #2
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062c0 <_vfiprintf_r+0x25c>
 80061de:	7821      	ldrb	r1, [r4, #0]
 80061e0:	2203      	movs	r2, #3
 80061e2:	4650      	mov	r0, sl
 80061e4:	f7fa f814 	bl	8000210 <memchr>
 80061e8:	b140      	cbz	r0, 80061fc <_vfiprintf_r+0x198>
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	eba0 000a 	sub.w	r0, r0, sl
 80061f0:	fa03 f000 	lsl.w	r0, r3, r0
 80061f4:	9b04      	ldr	r3, [sp, #16]
 80061f6:	4303      	orrs	r3, r0
 80061f8:	3401      	adds	r4, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006200:	482c      	ldr	r0, [pc, #176]	; (80062b4 <_vfiprintf_r+0x250>)
 8006202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006206:	2206      	movs	r2, #6
 8006208:	f7fa f802 	bl	8000210 <memchr>
 800620c:	2800      	cmp	r0, #0
 800620e:	d03f      	beq.n	8006290 <_vfiprintf_r+0x22c>
 8006210:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <_vfiprintf_r+0x254>)
 8006212:	bb1b      	cbnz	r3, 800625c <_vfiprintf_r+0x1f8>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	3307      	adds	r3, #7
 8006218:	f023 0307 	bic.w	r3, r3, #7
 800621c:	3308      	adds	r3, #8
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006222:	443b      	add	r3, r7
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	e767      	b.n	80060f8 <_vfiprintf_r+0x94>
 8006228:	fb0c 3202 	mla	r2, ip, r2, r3
 800622c:	460c      	mov	r4, r1
 800622e:	2001      	movs	r0, #1
 8006230:	e7a5      	b.n	800617e <_vfiprintf_r+0x11a>
 8006232:	2300      	movs	r3, #0
 8006234:	3401      	adds	r4, #1
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	4619      	mov	r1, r3
 800623a:	f04f 0c0a 	mov.w	ip, #10
 800623e:	4620      	mov	r0, r4
 8006240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006244:	3a30      	subs	r2, #48	; 0x30
 8006246:	2a09      	cmp	r2, #9
 8006248:	d903      	bls.n	8006252 <_vfiprintf_r+0x1ee>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0c5      	beq.n	80061da <_vfiprintf_r+0x176>
 800624e:	9105      	str	r1, [sp, #20]
 8006250:	e7c3      	b.n	80061da <_vfiprintf_r+0x176>
 8006252:	fb0c 2101 	mla	r1, ip, r1, r2
 8006256:	4604      	mov	r4, r0
 8006258:	2301      	movs	r3, #1
 800625a:	e7f0      	b.n	800623e <_vfiprintf_r+0x1da>
 800625c:	ab03      	add	r3, sp, #12
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	462a      	mov	r2, r5
 8006262:	4b16      	ldr	r3, [pc, #88]	; (80062bc <_vfiprintf_r+0x258>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	4630      	mov	r0, r6
 8006268:	f3af 8000 	nop.w
 800626c:	4607      	mov	r7, r0
 800626e:	1c78      	adds	r0, r7, #1
 8006270:	d1d6      	bne.n	8006220 <_vfiprintf_r+0x1bc>
 8006272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006274:	07d9      	lsls	r1, r3, #31
 8006276:	d405      	bmi.n	8006284 <_vfiprintf_r+0x220>
 8006278:	89ab      	ldrh	r3, [r5, #12]
 800627a:	059a      	lsls	r2, r3, #22
 800627c:	d402      	bmi.n	8006284 <_vfiprintf_r+0x220>
 800627e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006280:	f7ff fe53 	bl	8005f2a <__retarget_lock_release_recursive>
 8006284:	89ab      	ldrh	r3, [r5, #12]
 8006286:	065b      	lsls	r3, r3, #25
 8006288:	f53f af12 	bmi.w	80060b0 <_vfiprintf_r+0x4c>
 800628c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800628e:	e711      	b.n	80060b4 <_vfiprintf_r+0x50>
 8006290:	ab03      	add	r3, sp, #12
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	462a      	mov	r2, r5
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <_vfiprintf_r+0x258>)
 8006298:	a904      	add	r1, sp, #16
 800629a:	4630      	mov	r0, r6
 800629c:	f000 f880 	bl	80063a0 <_printf_i>
 80062a0:	e7e4      	b.n	800626c <_vfiprintf_r+0x208>
 80062a2:	bf00      	nop
 80062a4:	080085ac 	.word	0x080085ac
 80062a8:	080085cc 	.word	0x080085cc
 80062ac:	0800858c 	.word	0x0800858c
 80062b0:	080085ec 	.word	0x080085ec
 80062b4:	080085f6 	.word	0x080085f6
 80062b8:	00000000 	.word	0x00000000
 80062bc:	0800603f 	.word	0x0800603f
 80062c0:	080085f2 	.word	0x080085f2

080062c4 <_printf_common>:
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	4616      	mov	r6, r2
 80062ca:	4699      	mov	r9, r3
 80062cc:	688a      	ldr	r2, [r1, #8]
 80062ce:	690b      	ldr	r3, [r1, #16]
 80062d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bfb8      	it	lt
 80062d8:	4613      	movlt	r3, r2
 80062da:	6033      	str	r3, [r6, #0]
 80062dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062e0:	4607      	mov	r7, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b10a      	cbz	r2, 80062ea <_printf_common+0x26>
 80062e6:	3301      	adds	r3, #1
 80062e8:	6033      	str	r3, [r6, #0]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	0699      	lsls	r1, r3, #26
 80062ee:	bf42      	ittt	mi
 80062f0:	6833      	ldrmi	r3, [r6, #0]
 80062f2:	3302      	addmi	r3, #2
 80062f4:	6033      	strmi	r3, [r6, #0]
 80062f6:	6825      	ldr	r5, [r4, #0]
 80062f8:	f015 0506 	ands.w	r5, r5, #6
 80062fc:	d106      	bne.n	800630c <_printf_common+0x48>
 80062fe:	f104 0a19 	add.w	sl, r4, #25
 8006302:	68e3      	ldr	r3, [r4, #12]
 8006304:	6832      	ldr	r2, [r6, #0]
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc26      	bgt.n	800635a <_printf_common+0x96>
 800630c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006310:	1e13      	subs	r3, r2, #0
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	bf18      	it	ne
 8006316:	2301      	movne	r3, #1
 8006318:	0692      	lsls	r2, r2, #26
 800631a:	d42b      	bmi.n	8006374 <_printf_common+0xb0>
 800631c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006320:	4649      	mov	r1, r9
 8006322:	4638      	mov	r0, r7
 8006324:	47c0      	blx	r8
 8006326:	3001      	adds	r0, #1
 8006328:	d01e      	beq.n	8006368 <_printf_common+0xa4>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	68e5      	ldr	r5, [r4, #12]
 800632e:	6832      	ldr	r2, [r6, #0]
 8006330:	f003 0306 	and.w	r3, r3, #6
 8006334:	2b04      	cmp	r3, #4
 8006336:	bf08      	it	eq
 8006338:	1aad      	subeq	r5, r5, r2
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	bf0c      	ite	eq
 8006340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006344:	2500      	movne	r5, #0
 8006346:	4293      	cmp	r3, r2
 8006348:	bfc4      	itt	gt
 800634a:	1a9b      	subgt	r3, r3, r2
 800634c:	18ed      	addgt	r5, r5, r3
 800634e:	2600      	movs	r6, #0
 8006350:	341a      	adds	r4, #26
 8006352:	42b5      	cmp	r5, r6
 8006354:	d11a      	bne.n	800638c <_printf_common+0xc8>
 8006356:	2000      	movs	r0, #0
 8006358:	e008      	b.n	800636c <_printf_common+0xa8>
 800635a:	2301      	movs	r3, #1
 800635c:	4652      	mov	r2, sl
 800635e:	4649      	mov	r1, r9
 8006360:	4638      	mov	r0, r7
 8006362:	47c0      	blx	r8
 8006364:	3001      	adds	r0, #1
 8006366:	d103      	bne.n	8006370 <_printf_common+0xac>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006370:	3501      	adds	r5, #1
 8006372:	e7c6      	b.n	8006302 <_printf_common+0x3e>
 8006374:	18e1      	adds	r1, r4, r3
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	2030      	movs	r0, #48	; 0x30
 800637a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800637e:	4422      	add	r2, r4
 8006380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006388:	3302      	adds	r3, #2
 800638a:	e7c7      	b.n	800631c <_printf_common+0x58>
 800638c:	2301      	movs	r3, #1
 800638e:	4622      	mov	r2, r4
 8006390:	4649      	mov	r1, r9
 8006392:	4638      	mov	r0, r7
 8006394:	47c0      	blx	r8
 8006396:	3001      	adds	r0, #1
 8006398:	d0e6      	beq.n	8006368 <_printf_common+0xa4>
 800639a:	3601      	adds	r6, #1
 800639c:	e7d9      	b.n	8006352 <_printf_common+0x8e>
	...

080063a0 <_printf_i>:
 80063a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	7e0f      	ldrb	r7, [r1, #24]
 80063a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a8:	2f78      	cmp	r7, #120	; 0x78
 80063aa:	4691      	mov	r9, r2
 80063ac:	4680      	mov	r8, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	469a      	mov	sl, r3
 80063b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063b6:	d807      	bhi.n	80063c8 <_printf_i+0x28>
 80063b8:	2f62      	cmp	r7, #98	; 0x62
 80063ba:	d80a      	bhi.n	80063d2 <_printf_i+0x32>
 80063bc:	2f00      	cmp	r7, #0
 80063be:	f000 80d8 	beq.w	8006572 <_printf_i+0x1d2>
 80063c2:	2f58      	cmp	r7, #88	; 0x58
 80063c4:	f000 80a3 	beq.w	800650e <_printf_i+0x16e>
 80063c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063d0:	e03a      	b.n	8006448 <_printf_i+0xa8>
 80063d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063d6:	2b15      	cmp	r3, #21
 80063d8:	d8f6      	bhi.n	80063c8 <_printf_i+0x28>
 80063da:	a101      	add	r1, pc, #4	; (adr r1, 80063e0 <_printf_i+0x40>)
 80063dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e0:	08006439 	.word	0x08006439
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	080063c9 	.word	0x080063c9
 80063ec:	080063c9 	.word	0x080063c9
 80063f0:	080063c9 	.word	0x080063c9
 80063f4:	080063c9 	.word	0x080063c9
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	080063c9 	.word	0x080063c9
 8006400:	080063c9 	.word	0x080063c9
 8006404:	080063c9 	.word	0x080063c9
 8006408:	080063c9 	.word	0x080063c9
 800640c:	08006559 	.word	0x08006559
 8006410:	0800647d 	.word	0x0800647d
 8006414:	0800653b 	.word	0x0800653b
 8006418:	080063c9 	.word	0x080063c9
 800641c:	080063c9 	.word	0x080063c9
 8006420:	0800657b 	.word	0x0800657b
 8006424:	080063c9 	.word	0x080063c9
 8006428:	0800647d 	.word	0x0800647d
 800642c:	080063c9 	.word	0x080063c9
 8006430:	080063c9 	.word	0x080063c9
 8006434:	08006543 	.word	0x08006543
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	602a      	str	r2, [r5, #0]
 8006440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006448:	2301      	movs	r3, #1
 800644a:	e0a3      	b.n	8006594 <_printf_i+0x1f4>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	6829      	ldr	r1, [r5, #0]
 8006450:	0606      	lsls	r6, r0, #24
 8006452:	f101 0304 	add.w	r3, r1, #4
 8006456:	d50a      	bpl.n	800646e <_printf_i+0xce>
 8006458:	680e      	ldr	r6, [r1, #0]
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	2e00      	cmp	r6, #0
 800645e:	da03      	bge.n	8006468 <_printf_i+0xc8>
 8006460:	232d      	movs	r3, #45	; 0x2d
 8006462:	4276      	negs	r6, r6
 8006464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006468:	485e      	ldr	r0, [pc, #376]	; (80065e4 <_printf_i+0x244>)
 800646a:	230a      	movs	r3, #10
 800646c:	e019      	b.n	80064a2 <_printf_i+0x102>
 800646e:	680e      	ldr	r6, [r1, #0]
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006476:	bf18      	it	ne
 8006478:	b236      	sxthne	r6, r6
 800647a:	e7ef      	b.n	800645c <_printf_i+0xbc>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1d19      	adds	r1, r3, #4
 8006482:	6029      	str	r1, [r5, #0]
 8006484:	0601      	lsls	r1, r0, #24
 8006486:	d501      	bpl.n	800648c <_printf_i+0xec>
 8006488:	681e      	ldr	r6, [r3, #0]
 800648a:	e002      	b.n	8006492 <_printf_i+0xf2>
 800648c:	0646      	lsls	r6, r0, #25
 800648e:	d5fb      	bpl.n	8006488 <_printf_i+0xe8>
 8006490:	881e      	ldrh	r6, [r3, #0]
 8006492:	4854      	ldr	r0, [pc, #336]	; (80065e4 <_printf_i+0x244>)
 8006494:	2f6f      	cmp	r7, #111	; 0x6f
 8006496:	bf0c      	ite	eq
 8006498:	2308      	moveq	r3, #8
 800649a:	230a      	movne	r3, #10
 800649c:	2100      	movs	r1, #0
 800649e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064a2:	6865      	ldr	r5, [r4, #4]
 80064a4:	60a5      	str	r5, [r4, #8]
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	bfa2      	ittt	ge
 80064aa:	6821      	ldrge	r1, [r4, #0]
 80064ac:	f021 0104 	bicge.w	r1, r1, #4
 80064b0:	6021      	strge	r1, [r4, #0]
 80064b2:	b90e      	cbnz	r6, 80064b8 <_printf_i+0x118>
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	d04d      	beq.n	8006554 <_printf_i+0x1b4>
 80064b8:	4615      	mov	r5, r2
 80064ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80064be:	fb03 6711 	mls	r7, r3, r1, r6
 80064c2:	5dc7      	ldrb	r7, [r0, r7]
 80064c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064c8:	4637      	mov	r7, r6
 80064ca:	42bb      	cmp	r3, r7
 80064cc:	460e      	mov	r6, r1
 80064ce:	d9f4      	bls.n	80064ba <_printf_i+0x11a>
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d10b      	bne.n	80064ec <_printf_i+0x14c>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	07de      	lsls	r6, r3, #31
 80064d8:	d508      	bpl.n	80064ec <_printf_i+0x14c>
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	6861      	ldr	r1, [r4, #4]
 80064de:	4299      	cmp	r1, r3
 80064e0:	bfde      	ittt	le
 80064e2:	2330      	movle	r3, #48	; 0x30
 80064e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ec:	1b52      	subs	r2, r2, r5
 80064ee:	6122      	str	r2, [r4, #16]
 80064f0:	f8cd a000 	str.w	sl, [sp]
 80064f4:	464b      	mov	r3, r9
 80064f6:	aa03      	add	r2, sp, #12
 80064f8:	4621      	mov	r1, r4
 80064fa:	4640      	mov	r0, r8
 80064fc:	f7ff fee2 	bl	80062c4 <_printf_common>
 8006500:	3001      	adds	r0, #1
 8006502:	d14c      	bne.n	800659e <_printf_i+0x1fe>
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	b004      	add	sp, #16
 800650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650e:	4835      	ldr	r0, [pc, #212]	; (80065e4 <_printf_i+0x244>)
 8006510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006514:	6829      	ldr	r1, [r5, #0]
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f851 6b04 	ldr.w	r6, [r1], #4
 800651c:	6029      	str	r1, [r5, #0]
 800651e:	061d      	lsls	r5, r3, #24
 8006520:	d514      	bpl.n	800654c <_printf_i+0x1ac>
 8006522:	07df      	lsls	r7, r3, #31
 8006524:	bf44      	itt	mi
 8006526:	f043 0320 	orrmi.w	r3, r3, #32
 800652a:	6023      	strmi	r3, [r4, #0]
 800652c:	b91e      	cbnz	r6, 8006536 <_printf_i+0x196>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	f023 0320 	bic.w	r3, r3, #32
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	2310      	movs	r3, #16
 8006538:	e7b0      	b.n	800649c <_printf_i+0xfc>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	2378      	movs	r3, #120	; 0x78
 8006544:	4828      	ldr	r0, [pc, #160]	; (80065e8 <_printf_i+0x248>)
 8006546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800654a:	e7e3      	b.n	8006514 <_printf_i+0x174>
 800654c:	0659      	lsls	r1, r3, #25
 800654e:	bf48      	it	mi
 8006550:	b2b6      	uxthmi	r6, r6
 8006552:	e7e6      	b.n	8006522 <_printf_i+0x182>
 8006554:	4615      	mov	r5, r2
 8006556:	e7bb      	b.n	80064d0 <_printf_i+0x130>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	6826      	ldr	r6, [r4, #0]
 800655c:	6961      	ldr	r1, [r4, #20]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6028      	str	r0, [r5, #0]
 8006562:	0635      	lsls	r5, r6, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	d501      	bpl.n	800656c <_printf_i+0x1cc>
 8006568:	6019      	str	r1, [r3, #0]
 800656a:	e002      	b.n	8006572 <_printf_i+0x1d2>
 800656c:	0670      	lsls	r0, r6, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0x1c8>
 8006570:	8019      	strh	r1, [r3, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	4615      	mov	r5, r2
 8006578:	e7ba      	b.n	80064f0 <_printf_i+0x150>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	6862      	ldr	r2, [r4, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	4628      	mov	r0, r5
 8006588:	f7f9 fe42 	bl	8000210 <memchr>
 800658c:	b108      	cbz	r0, 8006592 <_printf_i+0x1f2>
 800658e:	1b40      	subs	r0, r0, r5
 8006590:	6060      	str	r0, [r4, #4]
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	2300      	movs	r3, #0
 8006598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659c:	e7a8      	b.n	80064f0 <_printf_i+0x150>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4649      	mov	r1, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	47d0      	blx	sl
 80065a8:	3001      	adds	r0, #1
 80065aa:	d0ab      	beq.n	8006504 <_printf_i+0x164>
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	d413      	bmi.n	80065da <_printf_i+0x23a>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	9b03      	ldr	r3, [sp, #12]
 80065b6:	4298      	cmp	r0, r3
 80065b8:	bfb8      	it	lt
 80065ba:	4618      	movlt	r0, r3
 80065bc:	e7a4      	b.n	8006508 <_printf_i+0x168>
 80065be:	2301      	movs	r3, #1
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	47d0      	blx	sl
 80065c8:	3001      	adds	r0, #1
 80065ca:	d09b      	beq.n	8006504 <_printf_i+0x164>
 80065cc:	3501      	adds	r5, #1
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	9903      	ldr	r1, [sp, #12]
 80065d2:	1a5b      	subs	r3, r3, r1
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dcf2      	bgt.n	80065be <_printf_i+0x21e>
 80065d8:	e7eb      	b.n	80065b2 <_printf_i+0x212>
 80065da:	2500      	movs	r5, #0
 80065dc:	f104 0619 	add.w	r6, r4, #25
 80065e0:	e7f5      	b.n	80065ce <_printf_i+0x22e>
 80065e2:	bf00      	nop
 80065e4:	080085fd 	.word	0x080085fd
 80065e8:	0800860e 	.word	0x0800860e

080065ec <__sread>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	f000 f894 	bl	8006720 <_read_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	bfab      	itete	ge
 80065fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006600:	181b      	addge	r3, r3, r0
 8006602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006606:	bfac      	ite	ge
 8006608:	6563      	strge	r3, [r4, #84]	; 0x54
 800660a:	81a3      	strhlt	r3, [r4, #12]
 800660c:	bd10      	pop	{r4, pc}

0800660e <__swrite>:
 800660e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006612:	461f      	mov	r7, r3
 8006614:	898b      	ldrh	r3, [r1, #12]
 8006616:	05db      	lsls	r3, r3, #23
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	4616      	mov	r6, r2
 800661e:	d505      	bpl.n	800662c <__swrite+0x1e>
 8006620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006624:	2302      	movs	r3, #2
 8006626:	2200      	movs	r2, #0
 8006628:	f000 f868 	bl	80066fc <_lseek_r>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006642:	f000 b817 	b.w	8006674 <_write_r>

08006646 <__sseek>:
 8006646:	b510      	push	{r4, lr}
 8006648:	460c      	mov	r4, r1
 800664a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664e:	f000 f855 	bl	80066fc <_lseek_r>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	bf15      	itete	ne
 8006658:	6560      	strne	r0, [r4, #84]	; 0x54
 800665a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800665e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006662:	81a3      	strheq	r3, [r4, #12]
 8006664:	bf18      	it	ne
 8006666:	81a3      	strhne	r3, [r4, #12]
 8006668:	bd10      	pop	{r4, pc}

0800666a <__sclose>:
 800666a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666e:	f000 b813 	b.w	8006698 <_close_r>
	...

08006674 <_write_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_write_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fa fb15 	bl	8000cb2 <_write>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_write_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_write_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200001d4 	.word	0x200001d4

08006698 <_close_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d06      	ldr	r5, [pc, #24]	; (80066b4 <_close_r+0x1c>)
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	f7fa fb21 	bl	8000cea <_close>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_close_r+0x1a>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_close_r+0x1a>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200001d4 	.word	0x200001d4

080066b8 <_fstat_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	; (80066d8 <_fstat_r+0x20>)
 80066bc:	2300      	movs	r3, #0
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	602b      	str	r3, [r5, #0]
 80066c6:	f7fa fb1c 	bl	8000d02 <_fstat>
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	d102      	bne.n	80066d4 <_fstat_r+0x1c>
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	b103      	cbz	r3, 80066d4 <_fstat_r+0x1c>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
 80066d6:	bf00      	nop
 80066d8:	200001d4 	.word	0x200001d4

080066dc <_isatty_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_isatty_r+0x1c>)
 80066e0:	2300      	movs	r3, #0
 80066e2:	4604      	mov	r4, r0
 80066e4:	4608      	mov	r0, r1
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	f7fa fb1b 	bl	8000d22 <_isatty>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <_isatty_r+0x1a>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b103      	cbz	r3, 80066f6 <_isatty_r+0x1a>
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	200001d4 	.word	0x200001d4

080066fc <_lseek_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_lseek_r+0x20>)
 8006700:	4604      	mov	r4, r0
 8006702:	4608      	mov	r0, r1
 8006704:	4611      	mov	r1, r2
 8006706:	2200      	movs	r2, #0
 8006708:	602a      	str	r2, [r5, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7fa fb14 	bl	8000d38 <_lseek>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_lseek_r+0x1e>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_lseek_r+0x1e>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	200001d4 	.word	0x200001d4

08006720 <_read_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_read_r+0x20>)
 8006724:	4604      	mov	r4, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fa faa2 	bl	8000c78 <_read>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_read_r+0x1e>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_read_r+0x1e>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	200001d4 	.word	0x200001d4

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
