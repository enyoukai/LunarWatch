
LunarWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004800  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b4  0800a3b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3bc  0800a3bc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000084  0800a448  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800a448  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122d4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002caf  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248f9  00000000  00000000  00037018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166e0  00000000  00000000  0005b911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51ab  00000000  00000000  00071ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014719c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  001471ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b9c 	.word	0x08005b9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08005b9c 	.word	0x08005b9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xfc>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000642:	f002 fa55 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	481b      	ldr	r0, [pc, #108]	; (80006b8 <MX_GPIO_Init+0x104>)
 800064c:	f002 fa50 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000656:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <MX_GPIO_Init+0x108>)
 8000668:	f002 f8ae 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 800066c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000686:	f002 f89f 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800068a:	2340      	movs	r3, #64	; 0x40
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_GPIO_Init+0x104>)
 80006a2:	f002 f891 	bl	80027c8 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40020800 	.word	0x40020800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f001 ff04 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f80c 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff ff72 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d0:	f000 fab8 	bl	8000c44 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006d4:	f000 fa00 	bl	8000ad8 <MX_TIM3_Init>
  MX_SPI1_Init();
 80006d8:	f000 f878 	bl	80007cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_1in28_test();
 80006dc:	f001 fe20 	bl	8002320 <LCD_1in28_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0x20>
	...

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fa46 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <SystemClock_Config+0xd8>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fd20 	bl	80031b8 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077e:	f000 f81f 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f9c0 	bl	8002b24 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007aa:	f000 f809 	bl	80007c0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x64>)
 8000800:	2208      	movs	r2, #8
 8000802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0x64>)
 800081e:	f002 ff69 	bl	80036f4 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000828:	f7ff ffca 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000a0 	.word	0x200000a0
 8000834:	40013000 	.word	0x40013000

08000838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <HAL_SPI_MspInit+0x84>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d12b      	bne.n	80008b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 8000864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_SPI_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000892:	23e0      	movs	r3, #224	; 0xe0
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a2:	2305      	movs	r3, #5
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_SPI_MspInit+0x8c>)
 80008ae:	f001 ff8b 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40013000 	.word	0x40013000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f001 ff2a 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f001 fe06 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
  }

  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e009      	b.n	80009cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf1      	blt.n	80009b8 <_write+0x12>
  }
  return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_close>:

int _close(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	605a      	str	r2, [r3, #4]
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f004 f85a 	bl	8004b30 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20020000 	.word	0x20020000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	200000f8 	.word	0x200000f8
 8000ab0:	200001c8 	.word	0x200001c8

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000afc:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <MX_TIM3_Init+0xb0>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b22:	f003 f877 	bl	8003c14 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f7ff fe48 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b40:	f003 fcb8 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b4a:	f7ff fe39 	bl	80007c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2204      	movs	r2, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b66:	f003 f96d 	bl	8003e44 <HAL_TIM_PWM_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b70:	f7ff fe26 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM3_Init+0xac>)
 8000b76:	f000 f82b 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000fc 	.word	0x200000fc
 8000b88:	40000400 	.word	0x40000400

08000b8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10d      	bne.n	8000bba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_PWM_MspInit+0x40>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_PWM_MspInit+0x40>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_TIM_PWM_MspInit+0x40>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40000400 	.word	0x40000400
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d11d      	bne.n	8000c2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_TIM_MspPostInit+0x70>)
 8000c2a:	f001 fdcd 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800

08000c44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f003 fc96 	bl	80045ac <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f7ff fd9b 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000144 	.word	0x20000144
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f001 fd5b 	bl	80027c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff feaf 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f003 fef1 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fcb1 	bl	80006c0 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000d6c:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 8000d70:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d74:	200001c4 	.word	0x200001c4

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000d86:	1df9      	adds	r1, r7, #7
 8000d88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <DEV_SPI_WRite+0x20>)
 8000d90:	f002 fd39 	bl	8003806 <HAL_SPI_Transmit>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000a0 	.word	0x200000a0

08000da0 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <DEV_Module_Init+0x34>)
 8000dac:	f001 fea0 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <DEV_Module_Init+0x38>)
 8000db6:	f001 fe9b 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <DEV_Module_Init+0x34>)
 8000dc2:	f001 fe95 	bl	8002af0 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <DEV_Module_Init+0x3c>)
 8000dca:	f002 ff73 	bl	8003cb4 <HAL_TIM_PWM_Start>
		return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	200000fc 	.word	0x200000fc

08000de0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	4611      	mov	r1, r2
 8000dec:	461a      	mov	r2, r3
 8000dee:	4623      	mov	r3, r4
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	4603      	mov	r3, r0
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <Paint_NewImage+0x90>)
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <Paint_NewImage+0x90>)
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <Paint_NewImage+0x90>)
 8000e0c:	883b      	ldrh	r3, [r7, #0]
 8000e0e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <Paint_NewImage+0x90>)
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <Paint_NewImage+0x90>)
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <Paint_NewImage+0x90>)
 8000e1e:	8a5b      	ldrh	r3, [r3, #18]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <Paint_NewImage+0x90>)
 8000e26:	8a9b      	ldrh	r3, [r3, #20]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <Paint_NewImage+0x94>)
 8000e2e:	f003 ff91 	bl	8004d54 <iprintf>
   
    Paint.Rotate = Rotate;
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <Paint_NewImage+0x90>)
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <Paint_NewImage+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <Paint_NewImage+0x6a>
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	2bb4      	cmp	r3, #180	; 0xb4
 8000e48:	d106      	bne.n	8000e58 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <Paint_NewImage+0x90>)
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <Paint_NewImage+0x90>)
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	80d3      	strh	r3, [r2, #6]
 8000e56:	e006      	b.n	8000e66 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <Paint_NewImage+0x90>)
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <Paint_NewImage+0x90>)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	80d3      	strh	r3, [r2, #6]
    }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000188 	.word	0x20000188
 8000e74:	08005bb4 	.word	0x08005bb4

08000e78 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <Paint_SetClearFuntion+0x1c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200001a4 	.word	0x200001a4

08000e98 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <Paint_SetDisplayFuntion+0x1c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001a0 	.word	0x200001a0

08000eb8 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000eca:	4b50      	ldr	r3, [pc, #320]	; (800100c <Paint_SetPixel+0x154>)
 8000ecc:	889b      	ldrh	r3, [r3, #4]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d805      	bhi.n	8000ee2 <Paint_SetPixel+0x2a>
 8000ed6:	4b4d      	ldr	r3, [pc, #308]	; (800100c <Paint_SetPixel+0x154>)
 8000ed8:	88db      	ldrh	r3, [r3, #6]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d903      	bls.n	8000eea <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8000ee2:	484b      	ldr	r0, [pc, #300]	; (8001010 <Paint_SetPixel+0x158>)
 8000ee4:	f003 ffbc 	bl	8004e60 <puts>
        return;
 8000ee8:	e08c      	b.n	8001004 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000eea:	4b48      	ldr	r3, [pc, #288]	; (800100c <Paint_SetPixel+0x154>)
 8000eec:	89db      	ldrh	r3, [r3, #14]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000ef4:	d02d      	beq.n	8000f52 <Paint_SetPixel+0x9a>
 8000ef6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000efa:	f300 8080 	bgt.w	8000ffe <Paint_SetPixel+0x146>
 8000efe:	2bb4      	cmp	r3, #180	; 0xb4
 8000f00:	d016      	beq.n	8000f30 <Paint_SetPixel+0x78>
 8000f02:	2bb4      	cmp	r3, #180	; 0xb4
 8000f04:	dc7b      	bgt.n	8000ffe <Paint_SetPixel+0x146>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <Paint_SetPixel+0x58>
 8000f0a:	2b5a      	cmp	r3, #90	; 0x5a
 8000f0c:	d005      	beq.n	8000f1a <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8000f0e:	e076      	b.n	8000ffe <Paint_SetPixel+0x146>
        X = Xpoint;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	81bb      	strh	r3, [r7, #12]
        break;
 8000f18:	e026      	b.n	8000f68 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	; (800100c <Paint_SetPixel+0x154>)
 8000f1c:	891b      	ldrh	r3, [r3, #8]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	81bb      	strh	r3, [r7, #12]
        break;
 8000f2e:	e01b      	b.n	8000f68 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <Paint_SetPixel+0x154>)
 8000f32:	891b      	ldrh	r3, [r3, #8]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <Paint_SetPixel+0x154>)
 8000f42:	895b      	ldrh	r3, [r3, #10]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	88bb      	ldrh	r3, [r7, #4]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	81bb      	strh	r3, [r7, #12]
        break;
 8000f50:	e00a      	b.n	8000f68 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <Paint_SetPixel+0x154>)
 8000f58:	895b      	ldrh	r3, [r3, #10]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	81bb      	strh	r3, [r7, #12]
        break;
 8000f66:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <Paint_SetPixel+0x154>)
 8000f6a:	8a1b      	ldrh	r3, [r3, #16]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d847      	bhi.n	8001002 <Paint_SetPixel+0x14a>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <Paint_SetPixel+0xc0>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000fcf 	.word	0x08000fcf
 8000f7c:	08000f89 	.word	0x08000f89
 8000f80:	08000f9b 	.word	0x08000f9b
 8000f84:	08000fad 	.word	0x08000fad
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <Paint_SetPixel+0x154>)
 8000f8a:	891b      	ldrh	r3, [r3, #8]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	81fb      	strh	r3, [r7, #14]
        break;
 8000f98:	e01a      	b.n	8000fd0 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <Paint_SetPixel+0x154>)
 8000f9c:	895b      	ldrh	r3, [r3, #10]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	89bb      	ldrh	r3, [r7, #12]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	81bb      	strh	r3, [r7, #12]
        break;
 8000faa:	e011      	b.n	8000fd0 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <Paint_SetPixel+0x154>)
 8000fae:	891b      	ldrh	r3, [r3, #8]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <Paint_SetPixel+0x154>)
 8000fbe:	895b      	ldrh	r3, [r3, #10]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	89bb      	ldrh	r3, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	81bb      	strh	r3, [r7, #12]
        break;
 8000fcc:	e000      	b.n	8000fd0 <Paint_SetPixel+0x118>
        break;
 8000fce:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <Paint_SetPixel+0x154>)
 8000fd2:	891b      	ldrh	r3, [r3, #8]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	89fa      	ldrh	r2, [r7, #14]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d805      	bhi.n	8000fe8 <Paint_SetPixel+0x130>
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <Paint_SetPixel+0x154>)
 8000fde:	895b      	ldrh	r3, [r3, #10]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	89ba      	ldrh	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d903      	bls.n	8000ff0 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <Paint_SetPixel+0x158>)
 8000fea:	f003 ff39 	bl	8004e60 <puts>
        return;
 8000fee:	e009      	b.n	8001004 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <Paint_SetPixel+0x15c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	89b9      	ldrh	r1, [r7, #12]
 8000ff8:	89f8      	ldrh	r0, [r7, #14]
 8000ffa:	4798      	blx	r3
 8000ffc:	e002      	b.n	8001004 <Paint_SetPixel+0x14c>
        return;
 8000ffe:	bf00      	nop
 8001000:	e000      	b.n	8001004 <Paint_SetPixel+0x14c>
        return;
 8001002:	bf00      	nop
}
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000188 	.word	0x20000188
 8001010:	08005cb4 	.word	0x08005cb4
 8001014:	200001a0 	.word	0x200001a0

08001018 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <Paint_Clear+0x1c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	4610      	mov	r0, r2
 800102a:	4798      	blx	r3
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001a4 	.word	0x200001a4

08001038 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	80fb      	strh	r3, [r7, #6]
 800104a:	4603      	mov	r3, r0
 800104c:	80bb      	strh	r3, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	807b      	strh	r3, [r7, #2]
 8001052:	4613      	mov	r3, r2
 8001054:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <Paint_DrawPoint+0x130>)
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	88fa      	ldrh	r2, [r7, #6]
 800105e:	429a      	cmp	r2, r3
 8001060:	d805      	bhi.n	800106e <Paint_DrawPoint+0x36>
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <Paint_DrawPoint+0x130>)
 8001064:	88db      	ldrh	r3, [r3, #6]
 8001066:	b29b      	uxth	r3, r3
 8001068:	88ba      	ldrh	r2, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	d903      	bls.n	8001076 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800106e:	483f      	ldr	r0, [pc, #252]	; (800116c <Paint_DrawPoint+0x134>)
 8001070:	f003 fef6 	bl	8004e60 <puts>
        return;
 8001074:	e074      	b.n	8001160 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8001076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d144      	bne.n	8001108 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 800107e:	2300      	movs	r3, #0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	e039      	b.n	80010f8 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001084:	2300      	movs	r3, #0
 8001086:	81bb      	strh	r3, [r7, #12]
 8001088:	e029      	b.n	80010de <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001090:	441a      	add	r2, r3
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	db28      	blt.n	80010ec <Paint_DrawPoint+0xb4>
 800109a:	88ba      	ldrh	r2, [r7, #4]
 800109c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010a0:	441a      	add	r2, r3
 80010a2:	787b      	ldrb	r3, [r7, #1]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db20      	blt.n	80010ec <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80010aa:	89fa      	ldrh	r2, [r7, #14]
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	4413      	add	r3, r2
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	b298      	uxth	r0, r3
 80010ba:	89ba      	ldrh	r2, [r7, #12]
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	787b      	ldrb	r3, [r7, #1]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fef3 	bl	8000eb8 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80010d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	b29b      	uxth	r3, r3
 80010dc:	81bb      	strh	r3, [r7, #12]
 80010de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010e2:	787b      	ldrb	r3, [r7, #1]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	3b01      	subs	r3, #1
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbce      	blt.n	800108a <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80010ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3301      	adds	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	81fb      	strh	r3, [r7, #14]
 80010f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3b01      	subs	r3, #1
 8001102:	429a      	cmp	r2, r3
 8001104:	dbbe      	blt.n	8001084 <Paint_DrawPoint+0x4c>
 8001106:	e02b      	b.n	8001160 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001108:	2300      	movs	r3, #0
 800110a:	81fb      	strh	r3, [r7, #14]
 800110c:	e023      	b.n	8001156 <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800110e:	2300      	movs	r3, #0
 8001110:	81bb      	strh	r3, [r7, #12]
 8001112:	e015      	b.n	8001140 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001114:	89fa      	ldrh	r2, [r7, #14]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	3b01      	subs	r3, #1
 800111e:	b298      	uxth	r0, r3
 8001120:	89ba      	ldrh	r2, [r7, #12]
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b01      	subs	r3, #1
 800112a:	b29b      	uxth	r3, r3
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fec2 	bl	8000eb8 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001134:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001138:	b29b      	uxth	r3, r3
 800113a:	3301      	adds	r3, #1
 800113c:	b29b      	uxth	r3, r3
 800113e:	81bb      	strh	r3, [r7, #12]
 8001140:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	429a      	cmp	r2, r3
 8001148:	dbe4      	blt.n	8001114 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800114a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800114e:	b29b      	uxth	r3, r3
 8001150:	3301      	adds	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	429a      	cmp	r2, r3
 800115e:	dbd6      	blt.n	800110e <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000188 	.word	0x20000188
 800116c:	08005cdc 	.word	0x08005cdc

08001170 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08d      	sub	sp, #52	; 0x34
 8001174:	af02      	add	r7, sp, #8
 8001176:	4604      	mov	r4, r0
 8001178:	4608      	mov	r0, r1
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4623      	mov	r3, r4
 8001180:	80fb      	strh	r3, [r7, #6]
 8001182:	4603      	mov	r3, r0
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]
 800118a:	4613      	mov	r3, r2
 800118c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <Paint_DrawLine+0x154>)
 8001190:	889b      	ldrh	r3, [r3, #4]
 8001192:	b29b      	uxth	r3, r3
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	429a      	cmp	r2, r3
 8001198:	d811      	bhi.n	80011be <Paint_DrawLine+0x4e>
 800119a:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <Paint_DrawLine+0x154>)
 800119c:	88db      	ldrh	r3, [r3, #6]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	88ba      	ldrh	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d80b      	bhi.n	80011be <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <Paint_DrawLine+0x154>)
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d805      	bhi.n	80011be <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <Paint_DrawLine+0x154>)
 80011b4:	88db      	ldrh	r3, [r3, #6]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	883a      	ldrh	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d903      	bls.n	80011c6 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80011be:	4842      	ldr	r0, [pc, #264]	; (80012c8 <Paint_DrawLine+0x158>)
 80011c0:	f003 fe4e 	bl	8004e60 <puts>
        return;
 80011c4:	e07b      	b.n	80012be <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bfb8      	it	lt
 80011d8:	425b      	neglt	r3, r3
 80011da:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80011dc:	883a      	ldrh	r2, [r7, #0]
 80011de:	88bb      	ldrh	r3, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bfb8      	it	lt
 80011e6:	425b      	neglt	r3, r3
 80011e8:	425b      	negs	r3, r3
 80011ea:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d201      	bcs.n	80011f8 <Paint_DrawLine+0x88>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e001      	b.n	80011fc <Paint_DrawLine+0x8c>
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	883b      	ldrh	r3, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d201      	bcs.n	800120a <Paint_DrawLine+0x9a>
 8001206:	2301      	movs	r3, #1
 8001208:	e001      	b.n	800120e <Paint_DrawLine+0x9e>
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	3301      	adds	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001222:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001226:	2b01      	cmp	r3, #1
 8001228:	d118      	bne.n	800125c <Paint_DrawLine+0xec>
 800122a:	7ffa      	ldrb	r2, [r7, #31]
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <Paint_DrawLine+0x15c>)
 800122e:	fba3 1302 	umull	r1, r3, r3, r2
 8001232:	0859      	lsrs	r1, r3, #1
 8001234:	460b      	mov	r3, r1
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	440b      	add	r3, r1
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001242:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001246:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001248:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800124a:	2201      	movs	r2, #1
 800124c:	9200      	str	r2, [sp, #0]
 800124e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001252:	f7ff fef1 	bl	8001038 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	77fb      	strb	r3, [r7, #31]
 800125a:	e008      	b.n	800126e <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800125c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001260:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001262:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001264:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001266:	2401      	movs	r4, #1
 8001268:	9400      	str	r4, [sp, #0]
 800126a:	f7ff fee5 	bl	8001038 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	dc0c      	bgt.n	8001292 <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8001278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	429a      	cmp	r2, r3
 800127e:	d01b      	beq.n	80012b8 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8001280:	6a3a      	ldr	r2, [r7, #32]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	4413      	add	r3, r2
 8001286:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	b29a      	uxth	r2, r3
 800128c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800128e:	4413      	add	r3, r2
 8001290:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbbf      	blt.n	800121c <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 800129c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800129e:	883b      	ldrh	r3, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d00b      	beq.n	80012bc <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 80012a4:	6a3a      	ldr	r2, [r7, #32]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4413      	add	r3, r2
 80012aa:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012b2:	4413      	add	r3, r2
 80012b4:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80012b6:	e7b1      	b.n	800121c <Paint_DrawLine+0xac>
                break;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <Paint_DrawLine+0x14e>
                break;
 80012bc:	bf00      	nop
        }
    }
}
 80012be:	372c      	adds	r7, #44	; 0x2c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	20000188 	.word	0x20000188
 80012c8:	08005d1c 	.word	0x08005d1c
 80012cc:	aaaaaaab 	.word	0xaaaaaaab

080012d0 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	4603      	mov	r3, r0
 80012e4:	80bb      	strh	r3, [r7, #4]
 80012e6:	460b      	mov	r3, r1
 80012e8:	807b      	strh	r3, [r7, #2]
 80012ea:	4613      	mov	r3, r2
 80012ec:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80012ee:	4b68      	ldr	r3, [pc, #416]	; (8001490 <Paint_DrawCircle+0x1c0>)
 80012f0:	889b      	ldrh	r3, [r3, #4]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d805      	bhi.n	8001306 <Paint_DrawCircle+0x36>
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <Paint_DrawCircle+0x1c0>)
 80012fc:	88db      	ldrh	r3, [r3, #6]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d303      	bcc.n	800130e <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8001306:	4863      	ldr	r0, [pc, #396]	; (8001494 <Paint_DrawCircle+0x1c4>)
 8001308:	f003 fdaa 	bl	8004e60 <puts>
        return;
 800130c:	e16b      	b.n	80015e6 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	f1c3 0303 	rsb	r3, r3, #3
 8001320:	b29b      	uxth	r3, r3
 8001322:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 8155 	bne.w	80015d8 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800132e:	e0a6      	b.n	800147e <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	813b      	strh	r3, [r7, #8]
 8001334:	e075      	b.n	8001422 <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001336:	89fa      	ldrh	r2, [r7, #14]
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4413      	add	r3, r2
 800133c:	b298      	uxth	r0, r3
 800133e:	893a      	ldrh	r2, [r7, #8]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	b299      	uxth	r1, r3
 8001346:	883a      	ldrh	r2, [r7, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	f7ff fe73 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b298      	uxth	r0, r3
 800135a:	893a      	ldrh	r2, [r7, #8]
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	b299      	uxth	r1, r3
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	f7ff fe65 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	88fa      	ldrh	r2, [r7, #6]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b298      	uxth	r0, r3
 8001376:	89fa      	ldrh	r2, [r7, #14]
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	b299      	uxth	r1, r3
 800137e:	883a      	ldrh	r2, [r7, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	f7ff fe57 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800138a:	893b      	ldrh	r3, [r7, #8]
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b298      	uxth	r0, r3
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	88ba      	ldrh	r2, [r7, #4]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b299      	uxth	r1, r3
 800139a:	883a      	ldrh	r2, [r7, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	f7ff fe49 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	88fa      	ldrh	r2, [r7, #6]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b298      	uxth	r0, r3
 80013ae:	893b      	ldrh	r3, [r7, #8]
 80013b0:	88ba      	ldrh	r2, [r7, #4]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b299      	uxth	r1, r3
 80013b6:	883a      	ldrh	r2, [r7, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	f7ff fe3b 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	4413      	add	r3, r2
 80013c8:	b298      	uxth	r0, r3
 80013ca:	893b      	ldrh	r3, [r7, #8]
 80013cc:	88ba      	ldrh	r2, [r7, #4]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b299      	uxth	r1, r3
 80013d2:	883a      	ldrh	r2, [r7, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	f7ff fe2d 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 80013de:	893a      	ldrh	r2, [r7, #8]
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	88ba      	ldrh	r2, [r7, #4]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b299      	uxth	r1, r3
 80013ee:	883a      	ldrh	r2, [r7, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	f7ff fe1f 	bl	8001038 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80013fa:	893a      	ldrh	r2, [r7, #8]
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4413      	add	r3, r2
 8001400:	b298      	uxth	r0, r3
 8001402:	89fa      	ldrh	r2, [r7, #14]
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	b299      	uxth	r1, r3
 800140a:	883a      	ldrh	r2, [r7, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2301      	movs	r3, #1
 8001412:	f7ff fe11 	bl	8001038 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001416:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800141a:	b29b      	uxth	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b29b      	uxth	r3, r3
 8001420:	813b      	strh	r3, [r7, #8]
 8001422:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001426:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	dd83      	ble.n	8001336 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800142e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da09      	bge.n	800144a <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	b29a      	uxth	r2, r3
 800143c:	897b      	ldrh	r3, [r7, #10]
 800143e:	4413      	add	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	3306      	adds	r3, #6
 8001444:	b29b      	uxth	r3, r3
 8001446:	817b      	strh	r3, [r7, #10]
 8001448:	e013      	b.n	8001472 <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800144a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800144e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	b29a      	uxth	r2, r3
 800145a:	897b      	ldrh	r3, [r7, #10]
 800145c:	4413      	add	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	330a      	adds	r3, #10
 8001462:	b29b      	uxth	r3, r3
 8001464:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001466:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146a:	b29b      	uxth	r3, r3
 800146c:	3b01      	subs	r3, #1
 800146e:	b29b      	uxth	r3, r3
 8001470:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800147e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001482:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001486:	429a      	cmp	r2, r3
 8001488:	f77f af52 	ble.w	8001330 <Paint_DrawCircle+0x60>
 800148c:	e0ab      	b.n	80015e6 <Paint_DrawCircle+0x316>
 800148e:	bf00      	nop
 8001490:	20000188 	.word	0x20000188
 8001494:	08005d8c 	.word	0x08005d8c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001498:	89fa      	ldrh	r2, [r7, #14]
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4413      	add	r3, r2
 800149e:	b298      	uxth	r0, r3
 80014a0:	89ba      	ldrh	r2, [r7, #12]
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	b299      	uxth	r1, r3
 80014a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ac:	883a      	ldrh	r2, [r7, #0]
 80014ae:	2401      	movs	r4, #1
 80014b0:	9400      	str	r4, [sp, #0]
 80014b2:	f7ff fdc1 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b298      	uxth	r0, r3
 80014be:	89ba      	ldrh	r2, [r7, #12]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	b299      	uxth	r1, r3
 80014c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ca:	883a      	ldrh	r2, [r7, #0]
 80014cc:	2401      	movs	r4, #1
 80014ce:	9400      	str	r4, [sp, #0]
 80014d0:	f7ff fdb2 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b298      	uxth	r0, r3
 80014dc:	89fa      	ldrh	r2, [r7, #14]
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	b299      	uxth	r1, r3
 80014e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e8:	883a      	ldrh	r2, [r7, #0]
 80014ea:	2401      	movs	r4, #1
 80014ec:	9400      	str	r4, [sp, #0]
 80014ee:	f7ff fda3 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	88fa      	ldrh	r2, [r7, #6]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b298      	uxth	r0, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	88ba      	ldrh	r2, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b299      	uxth	r1, r3
 8001502:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001506:	883a      	ldrh	r2, [r7, #0]
 8001508:	2401      	movs	r4, #1
 800150a:	9400      	str	r4, [sp, #0]
 800150c:	f7ff fd94 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b298      	uxth	r0, r3
 8001518:	89bb      	ldrh	r3, [r7, #12]
 800151a:	88ba      	ldrh	r2, [r7, #4]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	b299      	uxth	r1, r3
 8001520:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001524:	883a      	ldrh	r2, [r7, #0]
 8001526:	2401      	movs	r4, #1
 8001528:	9400      	str	r4, [sp, #0]
 800152a:	f7ff fd85 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800152e:	89fa      	ldrh	r2, [r7, #14]
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	4413      	add	r3, r2
 8001534:	b298      	uxth	r0, r3
 8001536:	89bb      	ldrh	r3, [r7, #12]
 8001538:	88ba      	ldrh	r2, [r7, #4]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b299      	uxth	r1, r3
 800153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001542:	883a      	ldrh	r2, [r7, #0]
 8001544:	2401      	movs	r4, #1
 8001546:	9400      	str	r4, [sp, #0]
 8001548:	f7ff fd76 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800154c:	89ba      	ldrh	r2, [r7, #12]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4413      	add	r3, r2
 8001552:	b298      	uxth	r0, r3
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	88ba      	ldrh	r2, [r7, #4]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b299      	uxth	r1, r3
 800155c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001560:	883a      	ldrh	r2, [r7, #0]
 8001562:	2401      	movs	r4, #1
 8001564:	9400      	str	r4, [sp, #0]
 8001566:	f7ff fd67 	bl	8001038 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800156a:	89ba      	ldrh	r2, [r7, #12]
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	b298      	uxth	r0, r3
 8001572:	89fa      	ldrh	r2, [r7, #14]
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	b299      	uxth	r1, r3
 800157a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157e:	883a      	ldrh	r2, [r7, #0]
 8001580:	2401      	movs	r4, #1
 8001582:	9400      	str	r4, [sp, #0]
 8001584:	f7ff fd58 	bl	8001038 <Paint_DrawPoint>

            if (Esp < 0 )
 8001588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da09      	bge.n	80015a4 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8001590:	89fb      	ldrh	r3, [r7, #14]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	b29a      	uxth	r2, r3
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	4413      	add	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	3306      	adds	r3, #6
 800159e:	b29b      	uxth	r3, r3
 80015a0:	817b      	strh	r3, [r7, #10]
 80015a2:	e013      	b.n	80015cc <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80015a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	330a      	adds	r3, #10
 80015bc:	b29b      	uxth	r3, r3
 80015be:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80015c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80015cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80015d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f77f af59 	ble.w	8001498 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4603      	mov	r3, r0
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	460b      	mov	r3, r1
 80015fa:	81bb      	strh	r3, [r7, #12]
 80015fc:	4613      	mov	r3, r2
 80015fe:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <Paint_DrawChar+0x150>)
 8001602:	889b      	ldrh	r3, [r3, #4]
 8001604:	b29b      	uxth	r3, r3
 8001606:	89fa      	ldrh	r2, [r7, #14]
 8001608:	429a      	cmp	r2, r3
 800160a:	d805      	bhi.n	8001618 <Paint_DrawChar+0x2c>
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <Paint_DrawChar+0x150>)
 800160e:	88db      	ldrh	r3, [r3, #6]
 8001610:	b29b      	uxth	r3, r3
 8001612:	89ba      	ldrh	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d903      	bls.n	8001620 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001618:	4849      	ldr	r0, [pc, #292]	; (8001740 <Paint_DrawChar+0x154>)
 800161a:	f003 fc21 	bl	8004e60 <puts>
        return;
 800161e:	e089      	b.n	8001734 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	3b20      	subs	r3, #32
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	88d2      	ldrh	r2, [r2, #6]
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	8892      	ldrh	r2, [r2, #4]
 8001630:	08d2      	lsrs	r2, r2, #3
 8001632:	b292      	uxth	r2, r2
 8001634:	4611      	mov	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	8892      	ldrh	r2, [r2, #4]
 800163a:	f002 0207 	and.w	r2, r2, #7
 800163e:	b292      	uxth	r2, r2
 8001640:	2a00      	cmp	r2, #0
 8001642:	bf14      	ite	ne
 8001644:	2201      	movne	r2, #1
 8001646:	2200      	moveq	r2, #0
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440a      	add	r2, r1
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4413      	add	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800165c:	2300      	movs	r3, #0
 800165e:	83fb      	strh	r3, [r7, #30]
 8001660:	e063      	b.n	800172a <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001662:	2300      	movs	r3, #0
 8001664:	83bb      	strh	r3, [r7, #28]
 8001666:	e04e      	b.n	8001706 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800166a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166e:	4293      	cmp	r3, r2
 8001670:	d118      	bne.n	80016a4 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	8bbb      	ldrh	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	400b      	ands	r3, r1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d031      	beq.n	80016ee <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800168a:	89fa      	ldrh	r2, [r7, #14]
 800168c:	8bbb      	ldrh	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	b298      	uxth	r0, r3
 8001692:	89ba      	ldrh	r2, [r7, #12]
 8001694:	8bfb      	ldrh	r3, [r7, #30]
 8001696:	4413      	add	r3, r2
 8001698:	b29b      	uxth	r3, r3
 800169a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fc0b 	bl	8000eb8 <Paint_SetPixel>
 80016a2:	e024      	b.n	80016ee <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	8bbb      	ldrh	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	fa42 f303 	asr.w	r3, r2, r3
 80016b6:	400b      	ands	r3, r1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80016bc:	89fa      	ldrh	r2, [r7, #14]
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	b298      	uxth	r0, r3
 80016c4:	89ba      	ldrh	r2, [r7, #12]
 80016c6:	8bfb      	ldrh	r3, [r7, #30]
 80016c8:	4413      	add	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fbf2 	bl	8000eb8 <Paint_SetPixel>
 80016d4:	e00b      	b.n	80016ee <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80016d6:	89fa      	ldrh	r2, [r7, #14]
 80016d8:	8bbb      	ldrh	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	b298      	uxth	r0, r3
 80016de:	89ba      	ldrh	r2, [r7, #12]
 80016e0:	8bfb      	ldrh	r3, [r7, #30]
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fbe5 	bl	8000eb8 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80016ee:	8bbb      	ldrh	r3, [r7, #28]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	d102      	bne.n	8001700 <Paint_DrawChar+0x114>
                ptr++;
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001700:	8bbb      	ldrh	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	83bb      	strh	r3, [r7, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	889b      	ldrh	r3, [r3, #4]
 800170a:	8bba      	ldrh	r2, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3ab      	bcc.n	8001668 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	889b      	ldrh	r3, [r3, #4]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	b29b      	uxth	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <Paint_DrawChar+0x138>
            ptr++;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3301      	adds	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001724:	8bfb      	ldrh	r3, [r7, #30]
 8001726:	3301      	adds	r3, #1
 8001728:	83fb      	strh	r3, [r7, #30]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	88db      	ldrh	r3, [r3, #6]
 800172e:	8bfa      	ldrh	r2, [r7, #30]
 8001730:	429a      	cmp	r2, r3
 8001732:	d396      	bcc.n	8001662 <Paint_DrawChar+0x76>
    }// Write all
}
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000188 	.word	0x20000188
 8001740:	08005dd0 	.word	0x08005dd0

08001744 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60ba      	str	r2, [r7, #8]
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4603      	mov	r3, r0
 8001750:	81fb      	strh	r3, [r7, #14]
 8001752:	460b      	mov	r3, r1
 8001754:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800175a:	89bb      	ldrh	r3, [r7, #12]
 800175c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <Paint_DrawString_EN+0xa8>)
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	b29b      	uxth	r3, r3
 8001764:	89fa      	ldrh	r2, [r7, #14]
 8001766:	429a      	cmp	r2, r3
 8001768:	d805      	bhi.n	8001776 <Paint_DrawString_EN+0x32>
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <Paint_DrawString_EN+0xa8>)
 800176c:	88db      	ldrh	r3, [r3, #6]
 800176e:	b29b      	uxth	r3, r3
 8001770:	89ba      	ldrh	r2, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d933      	bls.n	80017de <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <Paint_DrawString_EN+0xac>)
 8001778:	f003 fb72 	bl	8004e60 <puts>
        return;
 800177c:	e033      	b.n	80017e6 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800177e:	8afb      	ldrh	r3, [r7, #22]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	8892      	ldrh	r2, [r2, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <Paint_DrawString_EN+0xa8>)
 8001788:	8892      	ldrh	r2, [r2, #4]
 800178a:	b292      	uxth	r2, r2
 800178c:	4293      	cmp	r3, r2
 800178e:	dd06      	ble.n	800179e <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	88da      	ldrh	r2, [r3, #6]
 8001798:	8abb      	ldrh	r3, [r7, #20]
 800179a:	4413      	add	r3, r2
 800179c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800179e:	8abb      	ldrh	r3, [r7, #20]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	88d2      	ldrh	r2, [r2, #6]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <Paint_DrawString_EN+0xa8>)
 80017a8:	88d2      	ldrh	r2, [r2, #6]
 80017aa:	b292      	uxth	r2, r2
 80017ac:	4293      	cmp	r3, r2
 80017ae:	dd03      	ble.n	80017b8 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	8ab9      	ldrh	r1, [r7, #20]
 80017be:	8af8      	ldrh	r0, [r7, #22]
 80017c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	8c3b      	ldrh	r3, [r7, #32]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f7ff ff0f 	bl	80015ec <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	889a      	ldrh	r2, [r3, #4]
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	4413      	add	r3, r2
 80017dc:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1cb      	bne.n	800177e <Paint_DrawString_EN+0x3a>
    }
}
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000188 	.word	0x20000188
 80017f0:	08005e10 	.word	0x08005e10

080017f4 <Paint_DrawString_CN>:
    Font             ：A structure pointer that displays a character size
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font, UWORD Color_Background, UWORD Color_Foreground)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4603      	mov	r3, r0
 8001800:	81fb      	strh	r3, [r7, #14]
 8001802:	460b      	mov	r3, r1
 8001804:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 800180a:	89fb      	ldrh	r3, [r7, #14]
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
 800180e:	89bb      	ldrh	r3, [r7, #12]
 8001810:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001812:	e180      	b.n	8001b16 <Paint_DrawString_CN+0x322>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	f2c0 80b7 	blt.w	800198e <Paint_DrawString_CN+0x19a>
            for(Num = 0; Num < font->size; Num++) {
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	e0a2      	b.n	800196c <Paint_DrawString_CN+0x178>
                if(*p_text== font->table[Num].index[0]) {
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	20a6      	movs	r0, #166	; 0xa6
 8001832:	fb00 f303 	mul.w	r3, r0, r3
 8001836:	440b      	add	r3, r1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	f040 8093 	bne.w	8001966 <Paint_DrawString_CN+0x172>
                    const char* ptr = &font->table[Num].matrix[0];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	21a6      	movs	r1, #166	; 0xa6
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3302      	adds	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	e07e      	b.n	8001956 <Paint_DrawString_CN+0x162>
                        for (i = 0; i < font->Width; i++) {
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	e068      	b.n	8001930 <Paint_DrawString_CN+0x13c>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800185e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001864:	4293      	cmp	r3, r2
 8001866:	d121      	bne.n	80018ac <Paint_DrawString_CN+0xb8>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	425a      	negs	r2, r3
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	f002 0207 	and.w	r2, r2, #7
 800187a:	bf58      	it	pl
 800187c:	4253      	negpl	r3, r2
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	fa42 f303 	asr.w	r3, r2, r3
 8001884:	400b      	ands	r3, r1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d042      	beq.n	8001910 <Paint_DrawString_CN+0x11c>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	b29a      	uxth	r2, r3
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	b29b      	uxth	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b298      	uxth	r0, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	b29a      	uxth	r2, r3
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff fb07 	bl	8000eb8 <Paint_SetPixel>
 80018aa:	e031      	b.n	8001910 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	425a      	negs	r2, r3
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	f002 0207 	and.w	r2, r2, #7
 80018be:	bf58      	it	pl
 80018c0:	4253      	negpl	r3, r2
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	fa42 f303 	asr.w	r3, r2, r3
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <Paint_DrawString_CN+0xfc>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b298      	uxth	r0, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff fae5 	bl	8000eb8 <Paint_SetPixel>
 80018ee:	e00f      	b.n	8001910 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b298      	uxth	r0, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff fad4 	bl	8000eb8 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	425a      	negs	r2, r3
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	f002 0207 	and.w	r2, r2, #7
 800191c:	bf58      	it	pl
 800191e:	4253      	negpl	r3, r2
 8001920:	2b07      	cmp	r3, #7
 8001922:	d102      	bne.n	800192a <Paint_DrawString_CN+0x136>
                                ptr++;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	3301      	adds	r3, #1
 8001928:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	891b      	ldrh	r3, [r3, #8]
 8001934:	461a      	mov	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	4293      	cmp	r3, r2
 800193a:	db90      	blt.n	800185e <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	891b      	ldrh	r3, [r3, #8]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <Paint_DrawString_CN+0x15c>
                            ptr++;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3301      	adds	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3301      	adds	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	895b      	ldrh	r3, [r3, #10]
 800195a:	461a      	mov	r2, r3
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	4293      	cmp	r3, r2
 8001960:	f6ff af7a 	blt.w	8001858 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8001964:	e009      	b.n	800197a <Paint_DrawString_CN+0x186>
            for(Num = 0; Num < font->size; Num++) {
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	889b      	ldrh	r3, [r3, #4]
 8001970:	461a      	mov	r2, r3
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4293      	cmp	r3, r2
 8001976:	f6ff af56 	blt.w	8001826 <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	3301      	adds	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	88db      	ldrh	r3, [r3, #6]
 8001984:	461a      	mov	r2, r3
 8001986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001988:	4413      	add	r3, r2
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
 800198c:	e0c3      	b.n	8001b16 <Paint_DrawString_CN+0x322>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e0b0      	b.n	8001af6 <Paint_DrawString_CN+0x302>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6819      	ldr	r1, [r3, #0]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	20a6      	movs	r0, #166	; 0xa6
 80019a0:	fb00 f303 	mul.w	r3, r0, r3
 80019a4:	440b      	add	r3, r1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 80a1 	bne.w	8001af0 <Paint_DrawString_CN+0x2fc>
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	3301      	adds	r3, #1
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	20a6      	movs	r0, #166	; 0xa6
 80019bc:	fb00 f303 	mul.w	r3, r0, r3
 80019c0:	440b      	add	r3, r1
 80019c2:	785b      	ldrb	r3, [r3, #1]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8093 	bne.w	8001af0 <Paint_DrawString_CN+0x2fc>
                    const char* ptr = &font->table[Num].matrix[0];
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	21a6      	movs	r1, #166	; 0xa6
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3302      	adds	r3, #2
 80019da:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	e07e      	b.n	8001ae0 <Paint_DrawString_CN+0x2ec>
                        for (i = 0; i < font->Width; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e068      	b.n	8001aba <Paint_DrawString_CN+0x2c6>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80019e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d121      	bne.n	8001a36 <Paint_DrawString_CN+0x242>
                                if (*ptr & (0x80 >> (i % 8))) {
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	425a      	negs	r2, r3
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	f002 0207 	and.w	r2, r2, #7
 8001a04:	bf58      	it	pl
 8001a06:	4253      	negpl	r3, r2
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	fa42 f303 	asr.w	r3, r2, r3
 8001a0e:	400b      	ands	r3, r1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d042      	beq.n	8001a9a <Paint_DrawString_CN+0x2a6>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b298      	uxth	r0, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff fa42 	bl	8000eb8 <Paint_SetPixel>
 8001a34:	e031      	b.n	8001a9a <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	425a      	negs	r2, r3
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	f002 0207 	and.w	r2, r2, #7
 8001a48:	bf58      	it	pl
 8001a4a:	4253      	negpl	r3, r2
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	fa42 f303 	asr.w	r3, r2, r3
 8001a52:	400b      	ands	r3, r1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <Paint_DrawString_CN+0x286>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b298      	uxth	r0, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff fa20 	bl	8000eb8 <Paint_SetPixel>
 8001a78:	e00f      	b.n	8001a9a <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b298      	uxth	r0, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff fa0f 	bl	8000eb8 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	425a      	negs	r2, r3
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	f002 0207 	and.w	r2, r2, #7
 8001aa6:	bf58      	it	pl
 8001aa8:	4253      	negpl	r3, r2
 8001aaa:	2b07      	cmp	r3, #7
 8001aac:	d102      	bne.n	8001ab4 <Paint_DrawString_CN+0x2c0>
                                ptr++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	891b      	ldrh	r3, [r3, #8]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	db90      	blt.n	80019e8 <Paint_DrawString_CN+0x1f4>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	891b      	ldrh	r3, [r3, #8]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <Paint_DrawString_CN+0x2e6>
                            ptr++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	3301      	adds	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	895b      	ldrh	r3, [r3, #10]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f6ff af7a 	blt.w	80019e2 <Paint_DrawString_CN+0x1ee>
                        }
                    }
                    break;
 8001aee:	e009      	b.n	8001b04 <Paint_DrawString_CN+0x310>
            for(Num = 0; Num < font->size; Num++) {
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	889b      	ldrh	r3, [r3, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f6ff af48 	blt.w	8001994 <Paint_DrawString_CN+0x1a0>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	3302      	adds	r3, #2
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	891b      	ldrh	r3, [r3, #8]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	4413      	add	r3, r2
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae7a 	bne.w	8001814 <Paint_DrawString_CN+0x20>
        }
    }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	817b      	strh	r3, [r7, #10]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	813b      	strh	r3, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e049      	b.n	8001be0 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e03f      	b.n	8001bd2 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8001b52:	897a      	ldrh	r2, [r7, #10]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <Paint_DrawImage+0xc8>)
 8001b5a:	8912      	ldrh	r2, [r2, #8]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	da34      	bge.n	8001bcc <Paint_DrawImage+0xa0>
 8001b62:	893a      	ldrh	r2, [r7, #8]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <Paint_DrawImage+0xc8>)
 8001b6a:	8952      	ldrh	r2, [r2, #10]
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	da2c      	bge.n	8001bcc <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b298      	uxth	r0, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	893b      	ldrh	r3, [r7, #8]
 8001b82:	4413      	add	r3, r2
 8001b84:	b29c      	uxth	r4, r3
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	461a      	mov	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3301      	adds	r3, #1
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	6939      	ldr	r1, [r7, #16]
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	440b      	add	r3, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	f7ff f976 	bl	8000eb8 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbbb      	blt.n	8001b52 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbb1      	blt.n	8001b4c <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000188 	.word	0x20000188

08001bf8 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c02:	480d      	ldr	r0, [pc, #52]	; (8001c38 <LCD_1IN28_Reset+0x40>)
 8001c04:	f000 ff74 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001c08:	2064      	movs	r0, #100	; 0x64
 8001c0a:	f000 fcd3 	bl	80025b4 <HAL_Delay>
    LCD_1IN28_RST_0;
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <LCD_1IN28_Reset+0x40>)
 8001c16:	f000 ff6b 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001c1a:	2064      	movs	r0, #100	; 0x64
 8001c1c:	f000 fcca 	bl	80025b4 <HAL_Delay>
    LCD_1IN28_RST_1;
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <LCD_1IN28_Reset+0x40>)
 8001c28:	f000 ff62 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001c2c:	2064      	movs	r0, #100	; 0x64
 8001c2e:	f000 fcc1 	bl	80025b4 <HAL_Delay>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40020000 	.word	0x40020000

08001c3c <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <LCD_1IN28_SendCommand+0x30>)
 8001c4e:	f000 ff4f 	bl	8002af0 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001c52:	2200      	movs	r2, #0
 8001c54:	2140      	movs	r1, #64	; 0x40
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <LCD_1IN28_SendCommand+0x34>)
 8001c58:	f000 ff4a 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f88c 	bl	8000d7c <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400

08001c74 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c84:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001c86:	f000 ff33 	bl	8002af0 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <LCD_1IN28_SendData_8Bit+0x40>)
 8001c90:	f000 ff2e 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f870 	bl	8000d7c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2140      	movs	r1, #64	; 0x40
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <LCD_1IN28_SendData_8Bit+0x40>)
 8001ca2:	f000 ff25 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <LCD_1IN28_SendData_16Bit+0x4c>)
 8001cca:	f000 ff11 	bl	8002af0 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	480d      	ldr	r0, [pc, #52]	; (8001d08 <LCD_1IN28_SendData_16Bit+0x50>)
 8001cd4:	f000 ff0c 	bl	8002af0 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f84b 	bl	8000d7c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f846 	bl	8000d7c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <LCD_1IN28_SendData_16Bit+0x50>)
 8001cf6:	f000 fefb 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400

08001d0c <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001d10:	20ef      	movs	r0, #239	; 0xef
 8001d12:	f7ff ff93 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8001d16:	20eb      	movs	r0, #235	; 0xeb
 8001d18:	f7ff ff90 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001d1c:	2014      	movs	r0, #20
 8001d1e:	f7ff ffa9 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8001d22:	20fe      	movs	r0, #254	; 0xfe
 8001d24:	f7ff ff8a 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8001d28:	20ef      	movs	r0, #239	; 0xef
 8001d2a:	f7ff ff87 	bl	8001c3c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8001d2e:	20eb      	movs	r0, #235	; 0xeb
 8001d30:	f7ff ff84 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001d34:	2014      	movs	r0, #20
 8001d36:	f7ff ff9d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8001d3a:	2084      	movs	r0, #132	; 0x84
 8001d3c:	f7ff ff7e 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001d40:	2040      	movs	r0, #64	; 0x40
 8001d42:	f7ff ff97 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8001d46:	2085      	movs	r0, #133	; 0x85
 8001d48:	f7ff ff78 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001d4c:	20ff      	movs	r0, #255	; 0xff
 8001d4e:	f7ff ff91 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8001d52:	2086      	movs	r0, #134	; 0x86
 8001d54:	f7ff ff72 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001d58:	20ff      	movs	r0, #255	; 0xff
 8001d5a:	f7ff ff8b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8001d5e:	2087      	movs	r0, #135	; 0x87
 8001d60:	f7ff ff6c 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001d64:	20ff      	movs	r0, #255	; 0xff
 8001d66:	f7ff ff85 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8001d6a:	2088      	movs	r0, #136	; 0x88
 8001d6c:	f7ff ff66 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f7ff ff7f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8001d76:	2089      	movs	r0, #137	; 0x89
 8001d78:	f7ff ff60 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001d7c:	2021      	movs	r0, #33	; 0x21
 8001d7e:	f7ff ff79 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001d82:	208a      	movs	r0, #138	; 0x8a
 8001d84:	f7ff ff5a 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ff73 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001d8e:	208b      	movs	r0, #139	; 0x8b
 8001d90:	f7ff ff54 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001d94:	2080      	movs	r0, #128	; 0x80
 8001d96:	f7ff ff6d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8001d9a:	208c      	movs	r0, #140	; 0x8c
 8001d9c:	f7ff ff4e 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ff67 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001da6:	208d      	movs	r0, #141	; 0x8d
 8001da8:	f7ff ff48 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff ff61 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001db2:	208e      	movs	r0, #142	; 0x8e
 8001db4:	f7ff ff42 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001db8:	20ff      	movs	r0, #255	; 0xff
 8001dba:	f7ff ff5b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8001dbe:	208f      	movs	r0, #143	; 0x8f
 8001dc0:	f7ff ff3c 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001dc4:	20ff      	movs	r0, #255	; 0xff
 8001dc6:	f7ff ff55 	bl	8001c74 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8001dca:	20b6      	movs	r0, #182	; 0xb6
 8001dcc:	f7ff ff36 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ff4f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8001dd6:	2020      	movs	r0, #32
 8001dd8:	f7ff ff4c 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001ddc:	2036      	movs	r0, #54	; 0x36
 8001dde:	f7ff ff2d 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001de2:	2008      	movs	r0, #8
 8001de4:	f7ff ff46 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001de8:	203a      	movs	r0, #58	; 0x3a
 8001dea:	f7ff ff27 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001dee:	2005      	movs	r0, #5
 8001df0:	f7ff ff40 	bl	8001c74 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001df4:	2090      	movs	r0, #144	; 0x90
 8001df6:	f7ff ff21 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001dfa:	2008      	movs	r0, #8
 8001dfc:	f7ff ff3a 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001e00:	2008      	movs	r0, #8
 8001e02:	f7ff ff37 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001e06:	2008      	movs	r0, #8
 8001e08:	f7ff ff34 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001e0c:	2008      	movs	r0, #8
 8001e0e:	f7ff ff31 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001e12:	20bd      	movs	r0, #189	; 0xbd
 8001e14:	f7ff ff12 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001e18:	2006      	movs	r0, #6
 8001e1a:	f7ff ff2b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001e1e:	20bc      	movs	r0, #188	; 0xbc
 8001e20:	f7ff ff0c 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ff25 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8001e2a:	20ff      	movs	r0, #255	; 0xff
 8001e2c:	f7ff ff06 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001e30:	2060      	movs	r0, #96	; 0x60
 8001e32:	f7ff ff1f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff ff1c 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001e3c:	2004      	movs	r0, #4
 8001e3e:	f7ff ff19 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001e42:	20c3      	movs	r0, #195	; 0xc3
 8001e44:	f7ff fefa 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001e48:	2013      	movs	r0, #19
 8001e4a:	f7ff ff13 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001e4e:	20c4      	movs	r0, #196	; 0xc4
 8001e50:	f7ff fef4 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001e54:	2013      	movs	r0, #19
 8001e56:	f7ff ff0d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8001e5a:	20c9      	movs	r0, #201	; 0xc9
 8001e5c:	f7ff feee 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001e60:	2022      	movs	r0, #34	; 0x22
 8001e62:	f7ff ff07 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8001e66:	20be      	movs	r0, #190	; 0xbe
 8001e68:	f7ff fee8 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001e6c:	2011      	movs	r0, #17
 8001e6e:	f7ff ff01 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001e72:	20e1      	movs	r0, #225	; 0xe1
 8001e74:	f7ff fee2 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001e78:	2010      	movs	r0, #16
 8001e7a:	f7ff fefb 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001e7e:	200e      	movs	r0, #14
 8001e80:	f7ff fef8 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001e84:	20df      	movs	r0, #223	; 0xdf
 8001e86:	f7ff fed9 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001e8a:	2021      	movs	r0, #33	; 0x21
 8001e8c:	f7ff fef2 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001e90:	200c      	movs	r0, #12
 8001e92:	f7ff feef 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff feec 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001e9c:	20f0      	movs	r0, #240	; 0xf0
 8001e9e:	f7ff fecd 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001ea2:	2045      	movs	r0, #69	; 0x45
 8001ea4:	f7ff fee6 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001ea8:	2009      	movs	r0, #9
 8001eaa:	f7ff fee3 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001eae:	2008      	movs	r0, #8
 8001eb0:	f7ff fee0 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001eb4:	2008      	movs	r0, #8
 8001eb6:	f7ff fedd 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001eba:	2026      	movs	r0, #38	; 0x26
 8001ebc:	f7ff feda 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001ec0:	202a      	movs	r0, #42	; 0x2a
 8001ec2:	f7ff fed7 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8001ec6:	20f1      	movs	r0, #241	; 0xf1
 8001ec8:	f7ff feb8 	bl	8001c3c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001ecc:	2043      	movs	r0, #67	; 0x43
 8001ece:	f7ff fed1 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001ed2:	2070      	movs	r0, #112	; 0x70
 8001ed4:	f7ff fece 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001ed8:	2072      	movs	r0, #114	; 0x72
 8001eda:	f7ff fecb 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001ede:	2036      	movs	r0, #54	; 0x36
 8001ee0:	f7ff fec8 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001ee4:	2037      	movs	r0, #55	; 0x37
 8001ee6:	f7ff fec5 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001eea:	206f      	movs	r0, #111	; 0x6f
 8001eec:	f7ff fec2 	bl	8001c74 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001ef0:	20f2      	movs	r0, #242	; 0xf2
 8001ef2:	f7ff fea3 	bl	8001c3c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8001ef6:	2045      	movs	r0, #69	; 0x45
 8001ef8:	f7ff febc 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001efc:	2009      	movs	r0, #9
 8001efe:	f7ff feb9 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff feb6 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001f08:	2008      	movs	r0, #8
 8001f0a:	f7ff feb3 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001f0e:	2026      	movs	r0, #38	; 0x26
 8001f10:	f7ff feb0 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001f14:	202a      	movs	r0, #42	; 0x2a
 8001f16:	f7ff fead 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8001f1a:	20f3      	movs	r0, #243	; 0xf3
 8001f1c:	f7ff fe8e 	bl	8001c3c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001f20:	2043      	movs	r0, #67	; 0x43
 8001f22:	f7ff fea7 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001f26:	2070      	movs	r0, #112	; 0x70
 8001f28:	f7ff fea4 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001f2c:	2072      	movs	r0, #114	; 0x72
 8001f2e:	f7ff fea1 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001f32:	2036      	movs	r0, #54	; 0x36
 8001f34:	f7ff fe9e 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001f38:	2037      	movs	r0, #55	; 0x37
 8001f3a:	f7ff fe9b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001f3e:	206f      	movs	r0, #111	; 0x6f
 8001f40:	f7ff fe98 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001f44:	20ed      	movs	r0, #237	; 0xed
 8001f46:	f7ff fe79 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8001f4a:	201b      	movs	r0, #27
 8001f4c:	f7ff fe92 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001f50:	200b      	movs	r0, #11
 8001f52:	f7ff fe8f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8001f56:	20ae      	movs	r0, #174	; 0xae
 8001f58:	f7ff fe70 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001f5c:	2077      	movs	r0, #119	; 0x77
 8001f5e:	f7ff fe89 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001f62:	20cd      	movs	r0, #205	; 0xcd
 8001f64:	f7ff fe6a 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001f68:	2063      	movs	r0, #99	; 0x63
 8001f6a:	f7ff fe83 	bl	8001c74 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001f6e:	2070      	movs	r0, #112	; 0x70
 8001f70:	f7ff fe64 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001f74:	2007      	movs	r0, #7
 8001f76:	f7ff fe7d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001f7a:	2007      	movs	r0, #7
 8001f7c:	f7ff fe7a 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001f80:	2004      	movs	r0, #4
 8001f82:	f7ff fe77 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001f86:	200e      	movs	r0, #14
 8001f88:	f7ff fe74 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f7ff fe71 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001f92:	2009      	movs	r0, #9
 8001f94:	f7ff fe6e 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001f98:	2007      	movs	r0, #7
 8001f9a:	f7ff fe6b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001f9e:	2008      	movs	r0, #8
 8001fa0:	f7ff fe68 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f7ff fe65 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8001faa:	20e8      	movs	r0, #232	; 0xe8
 8001fac:	f7ff fe46 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001fb0:	2034      	movs	r0, #52	; 0x34
 8001fb2:	f7ff fe5f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001fb6:	2062      	movs	r0, #98	; 0x62
 8001fb8:	f7ff fe40 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f7ff fe59 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001fc2:	200d      	movs	r0, #13
 8001fc4:	f7ff fe56 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001fc8:	2071      	movs	r0, #113	; 0x71
 8001fca:	f7ff fe53 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001fce:	20ed      	movs	r0, #237	; 0xed
 8001fd0:	f7ff fe50 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001fd4:	2070      	movs	r0, #112	; 0x70
 8001fd6:	f7ff fe4d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001fda:	2070      	movs	r0, #112	; 0x70
 8001fdc:	f7ff fe4a 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001fe0:	2018      	movs	r0, #24
 8001fe2:	f7ff fe47 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f7ff fe44 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001fec:	2071      	movs	r0, #113	; 0x71
 8001fee:	f7ff fe41 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001ff2:	20ef      	movs	r0, #239	; 0xef
 8001ff4:	f7ff fe3e 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001ff8:	2070      	movs	r0, #112	; 0x70
 8001ffa:	f7ff fe3b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001ffe:	2070      	movs	r0, #112	; 0x70
 8002000:	f7ff fe38 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8002004:	2063      	movs	r0, #99	; 0x63
 8002006:	f7ff fe19 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800200a:	2018      	movs	r0, #24
 800200c:	f7ff fe32 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8002010:	2011      	movs	r0, #17
 8002012:	f7ff fe2f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8002016:	2071      	movs	r0, #113	; 0x71
 8002018:	f7ff fe2c 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 800201c:	20f1      	movs	r0, #241	; 0xf1
 800201e:	f7ff fe29 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8002022:	2070      	movs	r0, #112	; 0x70
 8002024:	f7ff fe26 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8002028:	2070      	movs	r0, #112	; 0x70
 800202a:	f7ff fe23 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 800202e:	2018      	movs	r0, #24
 8002030:	f7ff fe20 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8002034:	2013      	movs	r0, #19
 8002036:	f7ff fe1d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800203a:	2071      	movs	r0, #113	; 0x71
 800203c:	f7ff fe1a 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8002040:	20f3      	movs	r0, #243	; 0xf3
 8002042:	f7ff fe17 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8002046:	2070      	movs	r0, #112	; 0x70
 8002048:	f7ff fe14 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800204c:	2070      	movs	r0, #112	; 0x70
 800204e:	f7ff fe11 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8002052:	2064      	movs	r0, #100	; 0x64
 8002054:	f7ff fdf2 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8002058:	2028      	movs	r0, #40	; 0x28
 800205a:	f7ff fe0b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 800205e:	2029      	movs	r0, #41	; 0x29
 8002060:	f7ff fe08 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002064:	20f1      	movs	r0, #241	; 0xf1
 8002066:	f7ff fe05 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff fe02 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002070:	20f1      	movs	r0, #241	; 0xf1
 8002072:	f7ff fdff 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff fdfc 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800207c:	2007      	movs	r0, #7
 800207e:	f7ff fdf9 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8002082:	2066      	movs	r0, #102	; 0x66
 8002084:	f7ff fdda 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8002088:	203c      	movs	r0, #60	; 0x3c
 800208a:	f7ff fdf3 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fdf0 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8002094:	20cd      	movs	r0, #205	; 0xcd
 8002096:	f7ff fded 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800209a:	2067      	movs	r0, #103	; 0x67
 800209c:	f7ff fdea 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80020a0:	2045      	movs	r0, #69	; 0x45
 80020a2:	f7ff fde7 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80020a6:	2045      	movs	r0, #69	; 0x45
 80020a8:	f7ff fde4 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80020ac:	2010      	movs	r0, #16
 80020ae:	f7ff fde1 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fdde 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fddb 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fdd8 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80020c4:	2067      	movs	r0, #103	; 0x67
 80020c6:	f7ff fdb9 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fdd2 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80020d0:	203c      	movs	r0, #60	; 0x3c
 80020d2:	f7ff fdcf 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fdcc 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fdc9 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fdc6 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff fdc3 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 80020ee:	2054      	movs	r0, #84	; 0x54
 80020f0:	f7ff fdc0 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80020f4:	2010      	movs	r0, #16
 80020f6:	f7ff fdbd 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80020fa:	2032      	movs	r0, #50	; 0x32
 80020fc:	f7ff fdba 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8002100:	2098      	movs	r0, #152	; 0x98
 8002102:	f7ff fdb7 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8002106:	2074      	movs	r0, #116	; 0x74
 8002108:	f7ff fd98 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 800210c:	2010      	movs	r0, #16
 800210e:	f7ff fdb1 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8002112:	2085      	movs	r0, #133	; 0x85
 8002114:	f7ff fdae 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8002118:	2080      	movs	r0, #128	; 0x80
 800211a:	f7ff fdab 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff fda8 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff fda5 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800212a:	204e      	movs	r0, #78	; 0x4e
 800212c:	f7ff fda2 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fd9f 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8002136:	2098      	movs	r0, #152	; 0x98
 8002138:	f7ff fd80 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 800213c:	203e      	movs	r0, #62	; 0x3e
 800213e:	f7ff fd99 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8002142:	2007      	movs	r0, #7
 8002144:	f7ff fd96 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8002148:	2035      	movs	r0, #53	; 0x35
 800214a:	f7ff fd77 	bl	8001c3c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 800214e:	2021      	movs	r0, #33	; 0x21
 8002150:	f7ff fd74 	bl	8001c3c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8002154:	2011      	movs	r0, #17
 8002156:	f7ff fd71 	bl	8001c3c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 800215a:	2078      	movs	r0, #120	; 0x78
 800215c:	f000 fa2a 	bl	80025b4 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8002160:	2029      	movs	r0, #41	; 0x29
 8002162:	f7ff fd6b 	bl	8001c3c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8002166:	2014      	movs	r0, #20
 8002168:	f000 fa24 	bl	80025b4 <HAL_Delay>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <LCD_1IN28_SetAttributes+0x54>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8002180:	2308      	movs	r3, #8
 8002182:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <LCD_1IN28_SetAttributes+0x54>)
 800218c:	22f0      	movs	r2, #240	; 0xf0
 800218e:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <LCD_1IN28_SetAttributes+0x54>)
 8002192:	22f0      	movs	r2, #240	; 0xf0
 8002194:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8002196:	23c8      	movs	r3, #200	; 0xc8
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	e007      	b.n	80021ac <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <LCD_1IN28_SetAttributes+0x54>)
 800219e:	22f0      	movs	r2, #240	; 0xf0
 80021a0:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <LCD_1IN28_SetAttributes+0x54>)
 80021a4:	22f0      	movs	r2, #240	; 0xf0
 80021a6:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80021a8:	2368      	movs	r3, #104	; 0x68
 80021aa:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80021ac:	2036      	movs	r0, #54	; 0x36
 80021ae:	f7ff fd45 	bl	8001c3c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fd5d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001a8 	.word	0x200001a8

080021c8 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80021d2:	f7ff fd11 	bl	8001bf8 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ffc9 	bl	8002170 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80021de:	f7ff fd95 	bl	8001d0c <LCD_1IN28_InitReg>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80021ea:	b590      	push	{r4, r7, lr}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4604      	mov	r4, r0
 80021f2:	4608      	mov	r0, r1
 80021f4:	4611      	mov	r1, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	80fb      	strh	r3, [r7, #6]
 80021fc:	4603      	mov	r3, r0
 80021fe:	80bb      	strh	r3, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8002208:	202a      	movs	r0, #42	; 0x2a
 800220a:	f7ff fd17 	bl	8001c3c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff fd30 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fd2b 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fd28 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fd23 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 800222e:	202b      	movs	r0, #43	; 0x2b
 8002230:	f7ff fd04 	bl	8001c3c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fd1d 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 800223a:	88bb      	ldrh	r3, [r7, #4]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd18 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fd15 	bl	8001c74 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fd10 	bl	8001c74 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8002254:	202c      	movs	r0, #44	; 0x2c
 8002256:	f7ff fcf1 	bl	8001c3c <LCD_1IN28_SendCommand>
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
	...

08002264 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 800226e:	23ef      	movs	r3, #239	; 0xef
 8002270:	22ef      	movs	r2, #239	; 0xef
 8002272:	2100      	movs	r1, #0
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff ffb8 	bl	80021ea <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002280:	4812      	ldr	r0, [pc, #72]	; (80022cc <LCD_1IN28_Clear+0x68>)
 8002282:	f000 fc35 	bl	8002af0 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8002286:	2300      	movs	r3, #0
 8002288:	81fb      	strh	r3, [r7, #14]
 800228a:	e017      	b.n	80022bc <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800228c:	2300      	movs	r3, #0
 800228e:	81bb      	strh	r3, [r7, #12]
 8002290:	e00e      	b.n	80022b0 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fd6e 	bl	8000d7c <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd69 	bl	8000d7c <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80022aa:	89bb      	ldrh	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	81bb      	strh	r3, [r7, #12]
 80022b0:	89bb      	ldrh	r3, [r7, #12]
 80022b2:	2bef      	cmp	r3, #239	; 0xef
 80022b4:	d9ed      	bls.n	8002292 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80022b6:	89fb      	ldrh	r3, [r7, #14]
 80022b8:	3301      	adds	r3, #1
 80022ba:	81fb      	strh	r3, [r7, #14]
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	2bef      	cmp	r3, #239	; 0xef
 80022c0:	d9e4      	bls.n	800228c <LCD_1IN28_Clear+0x28>
		}
	 }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40020000 	.word	0x40020000

080022d0 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
 80022da:	460b      	mov	r3, r1
 80022dc:	80bb      	strh	r3, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	88b9      	ldrh	r1, [r7, #4]
 80022e8:	88f8      	ldrh	r0, [r7, #6]
 80022ea:	f7ff ff7e 	bl	80021ea <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fce1 	bl	8001cb8 <LCD_1IN28_SendData_16Bit>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <LCD_1IN28_SetBackLight+0x1c>)
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40000400 	.word	0x40000400

08002320 <LCD_1in28_test>:
#include <LCD_1in28.h>
#include <LCD_Test.h>


void LCD_1in28_test()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af04      	add	r7, sp, #16
	printf("LCD_1IN28_test Demo\r\n");
 8002326:	485c      	ldr	r0, [pc, #368]	; (8002498 <LCD_1in28_test+0x178>)
 8002328:	f002 fd9a 	bl	8004e60 <puts>
	DEV_Module_Init();
 800232c:	f7fe fd38 	bl	8000da0 <DEV_Module_Init>
  
  printf("LCD_1IN28_ Init and Clear...\r\n");
 8002330:	485a      	ldr	r0, [pc, #360]	; (800249c <LCD_1in28_test+0x17c>)
 8002332:	f002 fd95 	bl	8004e60 <puts>
	LCD_1IN28_SetBackLight(1000);
 8002336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233a:	f7ff ffe1 	bl	8002300 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff ff42 	bl	80021c8 <LCD_1IN28_Init>
 	LCD_1IN28_Clear(BLACK);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ff8d 	bl	8002264 <LCD_1IN28_Clear>
	
	printf("Paint_NewImage\r\n");
 800234a:	4855      	ldr	r0, [pc, #340]	; (80024a0 <LCD_1in28_test+0x180>)
 800234c:	f002 fd88 	bl	8004e60 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8002350:	2300      	movs	r3, #0
 8002352:	2200      	movs	r2, #0
 8002354:	21f0      	movs	r1, #240	; 0xf0
 8002356:	20f0      	movs	r0, #240	; 0xf0
 8002358:	f7fe fd42 	bl	8000de0 <Paint_NewImage>
	
	printf("Set Clear and Display Funtion\r\n");
 800235c:	4851      	ldr	r0, [pc, #324]	; (80024a4 <LCD_1in28_test+0x184>)
 800235e:	f002 fd7f 	bl	8004e60 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8002362:	4851      	ldr	r0, [pc, #324]	; (80024a8 <LCD_1in28_test+0x188>)
 8002364:	f7fe fd88 	bl	8000e78 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8002368:	4850      	ldr	r0, [pc, #320]	; (80024ac <LCD_1in28_test+0x18c>)
 800236a:	f7fe fd95 	bl	8000e98 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 800236e:	4850      	ldr	r0, [pc, #320]	; (80024b0 <LCD_1in28_test+0x190>)
 8002370:	f002 fd76 	bl	8004e60 <puts>
	Paint_Clear(BLACK);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fe4f 	bl	8001018 <Paint_Clear>
  DEV_Delay_ms(1000); 
 800237a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237e:	f000 f919 	bl	80025b4 <HAL_Delay>
	
	printf("drawing...\r\n");
 8002382:	484c      	ldr	r0, [pc, #304]	; (80024b4 <LCD_1in28_test+0x194>)
 8002384:	f002 fd6c 	bl	8004e60 <puts>
	Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002388:	2300      	movs	r3, #0
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2302      	movs	r3, #2
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	231f      	movs	r3, #31
 8002392:	2278      	movs	r2, #120	; 0x78
 8002394:	2178      	movs	r1, #120	; 0x78
 8002396:	2078      	movs	r0, #120	; 0x78
 8002398:	f7fe ff9a 	bl	80012d0 <Paint_DrawCircle>
  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800239c:	2300      	movs	r3, #0
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	2304      	movs	r3, #4
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	230c      	movs	r3, #12
 80023ac:	2278      	movs	r2, #120	; 0x78
 80023ae:	2100      	movs	r1, #0
 80023b0:	2078      	movs	r0, #120	; 0x78
 80023b2:	f7fe fedd 	bl	8001170 <Paint_DrawLine>
  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80023b6:	2300      	movs	r3, #0
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	2304      	movs	r3, #4
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	23f0      	movs	r3, #240	; 0xf0
 80023c6:	2278      	movs	r2, #120	; 0x78
 80023c8:	21e4      	movs	r1, #228	; 0xe4
 80023ca:	2078      	movs	r0, #120	; 0x78
 80023cc:	f7fe fed0 	bl	8001170 <Paint_DrawLine>
  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80023d0:	2300      	movs	r3, #0
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	2304      	movs	r3, #4
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2378      	movs	r3, #120	; 0x78
 80023e0:	220c      	movs	r2, #12
 80023e2:	2178      	movs	r1, #120	; 0x78
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fec3 	bl	8001170 <Paint_DrawLine>
  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80023ea:	2300      	movs	r3, #0
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2304      	movs	r3, #4
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2378      	movs	r3, #120	; 0x78
 80023fa:	22f0      	movs	r2, #240	; 0xf0
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	20e4      	movs	r0, #228	; 0xe4
 8002400:	f7fe feb6 	bl	8001170 <Paint_DrawLine>
	
  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70); 
 8002404:	2346      	movs	r3, #70	; 0x46
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2346      	movs	r3, #70	; 0x46
 800240a:	2219      	movs	r2, #25
 800240c:	2155      	movs	r1, #85	; 0x55
 800240e:	482a      	ldr	r0, [pc, #168]	; (80024b8 <LCD_1in28_test+0x198>)
 8002410:	f7ff fb8c 	bl	8001b2c <Paint_DrawImage>
  Paint_DrawString_CN(56,140, "΢ѩ����",   &Font24CN,BLACK,  WHITE);
 8002414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	2300      	movs	r3, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <LCD_1in28_test+0x19c>)
 8002420:	4a27      	ldr	r2, [pc, #156]	; (80024c0 <LCD_1in28_test+0x1a0>)
 8002422:	218c      	movs	r1, #140	; 0x8c
 8002424:	2038      	movs	r0, #56	; 0x38
 8002426:	f7ff f9e5 	bl	80017f4 <Paint_DrawString_CN>
  Paint_DrawString_EN(123, 123, "WAVESHARE",&Font16,  BLACK, GREEN); 
 800242a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <LCD_1in28_test+0x1a4>)
 8002436:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <LCD_1in28_test+0x1a8>)
 8002438:	217b      	movs	r1, #123	; 0x7b
 800243a:	207b      	movs	r0, #123	; 0x7b
 800243c:	f7ff f982 	bl	8001744 <Paint_DrawString_EN>
	
	Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8002440:	2300      	movs	r3, #0
 8002442:	9302      	str	r3, [sp, #8]
 8002444:	2303      	movs	r3, #3
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2346      	movs	r3, #70	; 0x46
 8002450:	2246      	movs	r2, #70	; 0x46
 8002452:	2178      	movs	r1, #120	; 0x78
 8002454:	2078      	movs	r0, #120	; 0x78
 8002456:	f7fe fe8b 	bl	8001170 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 800245a:	2300      	movs	r3, #0
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	2303      	movs	r3, #3
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	231f      	movs	r3, #31
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	22b0      	movs	r2, #176	; 0xb0
 800246a:	2178      	movs	r1, #120	; 0x78
 800246c:	2078      	movs	r0, #120	; 0x78
 800246e:	f7fe fe7f 	bl	8001170 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 8002472:	2300      	movs	r3, #0
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2302      	movs	r3, #2
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	23d2      	movs	r3, #210	; 0xd2
 8002482:	2278      	movs	r2, #120	; 0x78
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	2078      	movs	r0, #120	; 0x78
 8002488:	f7fe fe72 	bl	8001170 <Paint_DrawLine>
	
	printf("quit...\r\n");
 800248c:	480f      	ldr	r0, [pc, #60]	; (80024cc <LCD_1in28_test+0x1ac>)
 800248e:	f002 fce7 	bl	8004e60 <puts>
	//DEV_Module_Exit();
  
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	08005ea8 	.word	0x08005ea8
 800249c:	08005ec0 	.word	0x08005ec0
 80024a0:	08005ee0 	.word	0x08005ee0
 80024a4:	08005ef0 	.word	0x08005ef0
 80024a8:	08002265 	.word	0x08002265
 80024ac:	080022d1 	.word	0x080022d1
 80024b0:	08005f10 	.word	0x08005f10
 80024b4:	08005f20 	.word	0x08005f20
 80024b8:	08007cd4 	.word	0x08007cd4
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	08005f2c 	.word	0x08005f2c
 80024c4:	20000004 	.word	0x20000004
 80024c8:	08005f40 	.word	0x08005f40
 80024cc:	08005f4c 	.word	0x08005f4c

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f931 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7fe f9e0 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f93b 	bl	80027ae <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f911 	bl	8002776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000000 	.word	0x20000000
 800256c:	2000001c 	.word	0x2000001c
 8002570:	20000018 	.word	0x20000018

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000001c 	.word	0x2000001c
 8002598:	200001b0 	.word	0x200001b0

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200001b0 	.word	0x200001b0

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000001c 	.word	0x2000001c

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272c:	d301      	bcc.n	8002732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <SysTick_Config+0x40>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273a:	210f      	movs	r1, #15
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f7ff ff8e 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SysTick_Config+0x40>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <SysTick_Config+0x40>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010

08002760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff47 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002788:	f7ff ff5c 	bl	8002644 <__NVIC_GetPriorityGrouping>
 800278c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6978      	ldr	r0, [r7, #20]
 8002794:	f7ff ff8e 	bl	80026b4 <NVIC_EncodePriority>
 8002798:	4602      	mov	r2, r0
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff5d 	bl	8002660 <__NVIC_SetPriority>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffb0 	bl	800271c <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e165      	b.n	8002ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8154 	bne.w	8002aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ae 	beq.w	8002aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_GPIO_Init+0x304>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x308>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x314>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x206>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x202>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae96 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0cc      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d90c      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d044      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d119      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e067      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff fcc2 	bl	800259c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff fcbe 	bl	800259c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e04f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f855 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fc22 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005f58 	.word	0x08005f58
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000018 	.word	0x20000018

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08005f68 	.word	0x08005f68

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08005f68 	.word	0x08005f68

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d5c:	b0ae      	sub	sp, #184	; 0xb8
 8002d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d7e:	4bcb      	ldr	r3, [pc, #812]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	f200 8206 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x440>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002dc9 	.word	0x08002dc9
 8002d98:	08003199 	.word	0x08003199
 8002d9c:	08003199 	.word	0x08003199
 8002da0:	08003199 	.word	0x08003199
 8002da4:	08002dd1 	.word	0x08002dd1
 8002da8:	08003199 	.word	0x08003199
 8002dac:	08003199 	.word	0x08003199
 8002db0:	08003199 	.word	0x08003199
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08003199 	.word	0x08003199
 8002dbc:	08003199 	.word	0x08003199
 8002dc0:	08003199 	.word	0x08003199
 8002dc4:	08002fc9 	.word	0x08002fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4bb9      	ldr	r3, [pc, #740]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dce:	e1e7      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd0:	4bb8      	ldr	r3, [pc, #736]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dd6:	e1e3      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4bb4      	ldr	r3, [pc, #720]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de4:	4bb1      	ldr	r3, [pc, #708]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d071      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df0:	4bae      	ldr	r3, [pc, #696]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dfc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0159      	lsls	r1, r3, #5
 8002e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e28:	0150      	lsls	r0, r2, #5
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	1a51      	subs	r1, r2, r1
 8002e32:	6439      	str	r1, [r7, #64]	; 0x40
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e48:	4649      	mov	r1, r9
 8002e4a:	018b      	lsls	r3, r1, #6
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e52:	4641      	mov	r1, r8
 8002e54:	018a      	lsls	r2, r1, #6
 8002e56:	4641      	mov	r1, r8
 8002e58:	1a51      	subs	r1, r2, r1
 8002e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e70:	4649      	mov	r1, r9
 8002e72:	00cb      	lsls	r3, r1, #3
 8002e74:	4641      	mov	r1, r8
 8002e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	00ca      	lsls	r2, r1, #3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	4622      	mov	r2, r4
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8a:	462b      	mov	r3, r5
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	eb42 0303 	adc.w	r3, r2, r3
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	024b      	lsls	r3, r1, #9
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eaa:	4621      	mov	r1, r4
 8002eac:	024a      	lsls	r2, r1, #9
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ec0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ec4:	f7fd f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ed2:	e067      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	4b75      	ldr	r3, [pc, #468]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eee:	2300      	movs	r3, #0
 8002ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ef2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	462b      	mov	r3, r5
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0159      	lsls	r1, r3, #5
 8002f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f08:	0150      	lsls	r0, r2, #5
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4621      	mov	r1, r4
 8002f10:	1a51      	subs	r1, r2, r1
 8002f12:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f14:	4629      	mov	r1, r5
 8002f16:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f28:	4649      	mov	r1, r9
 8002f2a:	018b      	lsls	r3, r1, #6
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f32:	4641      	mov	r1, r8
 8002f34:	018a      	lsls	r2, r1, #6
 8002f36:	4641      	mov	r1, r8
 8002f38:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f3c:	4649      	mov	r1, r9
 8002f3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f56:	4692      	mov	sl, r2
 8002f58:	469b      	mov	fp, r3
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	462b      	mov	r3, r5
 8002f64:	eb4b 0303 	adc.w	r3, fp, r3
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f80:	4621      	mov	r1, r4
 8002f82:	028a      	lsls	r2, r1, #10
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f90:	677a      	str	r2, [r7, #116]	; 0x74
 8002f92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f96:	f7fd f98b 	bl	80002b0 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa4:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fc6:	e0eb      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d06b      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe0:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ff8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	462b      	mov	r3, r5
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4621      	mov	r1, r4
 8003016:	1a51      	subs	r1, r2, r1
 8003018:	61b9      	str	r1, [r7, #24]
 800301a:	4629      	mov	r1, r5
 800301c:	eb63 0301 	sbc.w	r3, r3, r1
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800302e:	4659      	mov	r1, fp
 8003030:	018b      	lsls	r3, r1, #6
 8003032:	4651      	mov	r1, sl
 8003034:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003038:	4651      	mov	r1, sl
 800303a:	018a      	lsls	r2, r1, #6
 800303c:	4651      	mov	r1, sl
 800303e:	ebb2 0801 	subs.w	r8, r2, r1
 8003042:	4659      	mov	r1, fp
 8003044:	eb63 0901 	sbc.w	r9, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003054:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003058:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305c:	4690      	mov	r8, r2
 800305e:	4699      	mov	r9, r3
 8003060:	4623      	mov	r3, r4
 8003062:	eb18 0303 	adds.w	r3, r8, r3
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	462b      	mov	r3, r5
 800306a:	eb49 0303 	adc.w	r3, r9, r3
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800307c:	4629      	mov	r1, r5
 800307e:	024b      	lsls	r3, r1, #9
 8003080:	4621      	mov	r1, r4
 8003082:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003086:	4621      	mov	r1, r4
 8003088:	024a      	lsls	r2, r1, #9
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003092:	2200      	movs	r2, #0
 8003094:	65bb      	str	r3, [r7, #88]	; 0x58
 8003096:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309c:	f7fd f908 	bl	80002b0 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030aa:	e065      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x420>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	2200      	movs	r2, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	4611      	mov	r1, r2
 80030c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030c8:	653b      	str	r3, [r7, #80]	; 0x50
 80030ca:	2300      	movs	r3, #0
 80030cc:	657b      	str	r3, [r7, #84]	; 0x54
 80030ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030d2:	4642      	mov	r2, r8
 80030d4:	464b      	mov	r3, r9
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4641      	mov	r1, r8
 80030ec:	1a51      	subs	r1, r2, r1
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	4649      	mov	r1, r9
 80030f2:	eb63 0301 	sbc.w	r3, r3, r1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003104:	4659      	mov	r1, fp
 8003106:	018b      	lsls	r3, r1, #6
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310e:	4651      	mov	r1, sl
 8003110:	018a      	lsls	r2, r1, #6
 8003112:	4651      	mov	r1, sl
 8003114:	1a54      	subs	r4, r2, r1
 8003116:	4659      	mov	r1, fp
 8003118:	eb63 0501 	sbc.w	r5, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	00eb      	lsls	r3, r5, #3
 8003126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312a:	00e2      	lsls	r2, r4, #3
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
 8003130:	4643      	mov	r3, r8
 8003132:	18e3      	adds	r3, r4, r3
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	464b      	mov	r3, r9
 8003138:	eb45 0303 	adc.w	r3, r5, r3
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800314a:	4629      	mov	r1, r5
 800314c:	028b      	lsls	r3, r1, #10
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003154:	4621      	mov	r1, r4
 8003156:	028a      	lsls	r2, r1, #10
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003160:	2200      	movs	r2, #0
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
 8003164:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003166:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800316a:	f7fd f8a1 	bl	80002b0 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4613      	mov	r3, r2
 8003174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0f1b      	lsrs	r3, r3, #28
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800318a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003196:	e003      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800319a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800319e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	37b8      	adds	r7, #184	; 0xb8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	00f42400 	.word	0x00f42400

080031b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e28d      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8083 	beq.w	80032de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d019      	beq.n	8003218 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f0:	4b8e      	ldr	r3, [pc, #568]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d00c      	beq.n	8003218 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b8b      	ldr	r3, [pc, #556]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d112      	bne.n	8003230 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003216:	d10b      	bne.n	8003230 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	4b84      	ldr	r3, [pc, #528]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d05b      	beq.n	80032dc <HAL_RCC_OscConfig+0x124>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d157      	bne.n	80032dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e25a      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x90>
 800323a:	4b7c      	ldr	r3, [pc, #496]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7b      	ldr	r2, [pc, #492]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e01d      	b.n	8003284 <HAL_RCC_OscConfig+0xcc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0xb4>
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a75      	ldr	r2, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a72      	ldr	r2, [pc, #456]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xcc>
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6b      	ldr	r2, [pc, #428]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7ff f986 	bl	800259c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7ff f982 	bl	800259c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e21f      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0xdc>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7ff f972 	bl	800259c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032bc:	f7ff f96e 	bl	800259c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e20b      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	4b57      	ldr	r3, [pc, #348]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x104>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d06f      	beq.n	80033ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ea:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032f6:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d105      	bne.n	800330e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003302:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331a:	4b44      	ldr	r3, [pc, #272]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x186>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1d3      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4937      	ldr	r1, [pc, #220]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e03a      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x278>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7ff f91b 	bl	800259c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7ff f917 	bl	800259c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1b4      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4925      	ldr	r1, [pc, #148]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCC_OscConfig+0x278>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7ff f8fa 	bl	800259c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ac:	f7ff f8f6 	bl	800259c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e193      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x274>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d036      	beq.n	8003444 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RCC_OscConfig+0x27c>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7ff f8da 	bl	800259c <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ec:	f7ff f8d6 	bl	800259c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e173      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_OscConfig+0x274>)
 8003400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x234>
 800340a:	e01b      	b.n	8003444 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_RCC_OscConfig+0x27c>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7ff f8c3 	bl	800259c <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	e00e      	b.n	8003438 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7ff f8bf 	bl	800259c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d907      	bls.n	8003438 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e15c      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000
 8003434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ea      	bne.n	800341a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8097 	beq.w	8003580 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b83      	ldr	r3, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	6413      	str	r3, [r2, #64]	; 0x40
 8003472:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b79      	ldr	r3, [pc, #484]	; (8003668 <HAL_RCC_OscConfig+0x4b0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x4b0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a75      	ldr	r2, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x4b0>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7ff f87f 	bl	800259c <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7ff f87b 	bl	800259c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e118      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x4b0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x31e>
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	e01c      	b.n	8003510 <HAL_RCC_OscConfig+0x358>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x340>
 80034de:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a60      	ldr	r2, [pc, #384]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0x358>
 80034f8:	4b5a      	ldr	r3, [pc, #360]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4a59      	ldr	r2, [pc, #356]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6713      	str	r3, [r2, #112]	; 0x70
 8003504:	4b57      	ldr	r3, [pc, #348]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	f023 0304 	bic.w	r3, r3, #4
 800350e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003518:	f7ff f840 	bl	800259c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7ff f83c 	bl	800259c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0d7      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RCC_OscConfig+0x368>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7ff f82a 	bl	800259c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7ff f826 	bl	800259c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0c1      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ee      	bne.n	800354c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80ad 	beq.w	80036e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	d060      	beq.n	8003658 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d145      	bne.n	800362a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <HAL_RCC_OscConfig+0x4b4>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fffa 	bl	800259c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fff6 	bl	800259c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e093      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	3b01      	subs	r3, #1
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	071b      	lsls	r3, r3, #28
 80035f6:	491b      	ldr	r1, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x4b4>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fe ffcb 	bl	800259c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360a:	f7fe ffc7 	bl	800259c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e064      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x452>
 8003628:	e05c      	b.n	80036e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_RCC_OscConfig+0x4b4>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe ffb4 	bl	800259c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe ffb0 	bl	800259c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e04d      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x480>
 8003656:	e045      	b.n	80036e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e040      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000
 800366c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCC_OscConfig+0x538>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d030      	beq.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d129      	bne.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d122      	bne.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d119      	bne.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10f      	bne.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e07b      	b.n	80037fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003716:	d009      	beq.n	800372c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]
 800371e:	e005      	b.n	800372c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f876 	bl	8000838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	ea42 0103 	orr.w	r1, r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0104 	and.w	r1, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0210 	and.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b088      	sub	sp, #32
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_SPI_Transmit+0x22>
 8003824:	2302      	movs	r3, #2
 8003826:	e126      	b.n	8003a76 <HAL_SPI_Transmit+0x270>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003830:	f7fe feb4 	bl	800259c <HAL_GetTick>
 8003834:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800384a:	e10b      	b.n	8003a64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x52>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385c:	e102      	b.n	8003a64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2203      	movs	r2, #3
 8003862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a4:	d10f      	bne.n	80038c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d007      	beq.n	80038e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ec:	d14b      	bne.n	8003986 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0xf6>
 80038f6:	8afb      	ldrh	r3, [r7, #22]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d13e      	bne.n	800397a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003920:	e02b      	b.n	800397a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d112      	bne.n	8003956 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	881a      	ldrh	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	86da      	strh	r2, [r3, #54]	; 0x36
 8003954:	e011      	b.n	800397a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003956:	f7fe fe21 	bl	800259c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d803      	bhi.n	800396e <HAL_SPI_Transmit+0x168>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d102      	bne.n	8003974 <HAL_SPI_Transmit+0x16e>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003978:	e074      	b.n	8003a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ce      	bne.n	8003922 <HAL_SPI_Transmit+0x11c>
 8003984:	e04c      	b.n	8003a20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0x18e>
 800398e:	8afb      	ldrh	r3, [r7, #22]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d140      	bne.n	8003a16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ba:	e02c      	b.n	8003a16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d113      	bne.n	80039f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	7812      	ldrb	r2, [r2, #0]
 80039d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80039f0:	e011      	b.n	8003a16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f2:	f7fe fdd3 	bl	800259c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d803      	bhi.n	8003a0a <HAL_SPI_Transmit+0x204>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_Transmit+0x20a>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a14:	e026      	b.n	8003a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1cd      	bne.n	80039bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	6839      	ldr	r1, [r7, #0]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f8b3 	bl	8003b90 <SPI_EndRxTxTransaction>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e000      	b.n	8003a64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a90:	f7fe fd84 	bl	800259c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa0:	f7fe fd7c 	bl	800259c <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	015b      	lsls	r3, r3, #5
 8003aac:	0d1b      	lsrs	r3, r3, #20
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab6:	e054      	b.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d050      	beq.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac0:	f7fe fd6c 	bl	800259c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d902      	bls.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d13d      	bne.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aee:	d111      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	d004      	beq.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	d107      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d10f      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e017      	b.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d19b      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000

08003b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <SPI_EndRxTxTransaction+0x7c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <SPI_EndRxTxTransaction+0x80>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0d5b      	lsrs	r3, r3, #21
 8003ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d112      	bne.n	8003be2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ff5a 	bl	8003a80 <SPI_WaitFlagStateUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0220 	orr.w	r2, r3, #32
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e00f      	b.n	8003c02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d0f2      	beq.n	8003be2 <SPI_EndRxTxTransaction+0x52>
 8003bfc:	e000      	b.n	8003c00 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bfe:	bf00      	nop
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	165e9f81 	.word	0x165e9f81

08003c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fc ffa6 	bl	8000b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 f9b8 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_TIM_PWM_Start+0x24>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e022      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d109      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x3e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	e015      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start+0x58>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07c      	b.n	8003e20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x82>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	e013      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x92>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0xa2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb7e 	bl	8004468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <HAL_TIM_PWM_Start+0x174>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_PWM_Start+0xcc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_TIM_PWM_Start+0x178>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIM_PWM_Start+0xd0>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_TIM_PWM_Start+0xd2>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_TIM_PWM_Start+0x174>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d022      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d01d      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <HAL_TIM_PWM_Start+0x17c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d018      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <HAL_TIM_PWM_Start+0x180>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_TIM_PWM_Start+0x184>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <HAL_TIM_PWM_Start+0x178>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_TIM_PWM_Start+0x188>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIM_PWM_Start+0x136>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_TIM_PWM_Start+0x18c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d111      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b06      	cmp	r3, #6
 8003dfa:	d010      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	e007      	b.n	8003e1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40001800 	.word	0x40001800

08003e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0ae      	b.n	8003fc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	f200 809f 	bhi.w	8003fb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ead 	.word	0x08003ead
 8003e7c:	08003fb1 	.word	0x08003fb1
 8003e80:	08003fb1 	.word	0x08003fb1
 8003e84:	08003fb1 	.word	0x08003fb1
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003fb1 	.word	0x08003fb1
 8003e90:	08003fb1 	.word	0x08003fb1
 8003e94:	08003fb1 	.word	0x08003fb1
 8003e98:	08003f2f 	.word	0x08003f2f
 8003e9c:	08003fb1 	.word	0x08003fb1
 8003ea0:	08003fb1 	.word	0x08003fb1
 8003ea4:	08003fb1 	.word	0x08003fb1
 8003ea8:	08003f6f 	.word	0x08003f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f928 	bl	8004108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0208 	orr.w	r2, r2, #8
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	619a      	str	r2, [r3, #24]
      break;
 8003eea:	e064      	b.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f978 	bl	80041e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	619a      	str	r2, [r3, #24]
      break;
 8003f2c:	e043      	b.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f9cd 	bl	80042d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0208 	orr.w	r2, r2, #8
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0204 	bic.w	r2, r2, #4
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	61da      	str	r2, [r3, #28]
      break;
 8003f6c:	e023      	b.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fa21 	bl	80043bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a40      	ldr	r2, [pc, #256]	; (80040dc <TIM_Base_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3b      	ldr	r2, [pc, #236]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d027      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <TIM_Base_SetConfig+0x118>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d023      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <TIM_Base_SetConfig+0x11c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <TIM_Base_SetConfig+0x120>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <TIM_Base_SetConfig+0x124>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a28      	ldr	r2, [pc, #160]	; (80040f0 <TIM_Base_SetConfig+0x128>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <TIM_Base_SetConfig+0x12c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <TIM_Base_SetConfig+0x130>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0x134>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <TIM_Base_SetConfig+0x138>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a23      	ldr	r2, [pc, #140]	; (8004104 <TIM_Base_SetConfig+0x13c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <TIM_Base_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0c      	ldr	r2, [pc, #48]	; (80040ec <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	615a      	str	r2, [r3, #20]
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40010400 	.word	0x40010400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	40001800 	.word	0x40001800
 8004100:	40001c00 	.word	0x40001c00
 8004104:	40002000 	.word	0x40002000

08004108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 0302 	bic.w	r3, r3, #2
 8004150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <TIM_OC1_SetConfig+0xd8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_OC1_SetConfig+0x64>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10c      	bne.n	8004186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0308 	bic.w	r3, r3, #8
 8004172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <TIM_OC1_SetConfig+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC1_SetConfig+0x8e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <TIM_OC1_SetConfig+0xdc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0210 	bic.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0320 	bic.w	r3, r3, #32
 8004232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_OC2_SetConfig+0xe4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC2_SetConfig+0x68>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <TIM_OC2_SetConfig+0xe8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10d      	bne.n	800426c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <TIM_OC2_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC2_SetConfig+0x94>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <TIM_OC2_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d113      	bne.n	80042a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40010400 	.word	0x40010400

080042d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800431c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <TIM_OC3_SetConfig+0xe0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_OC3_SetConfig+0x66>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_OC3_SetConfig+0xe4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10d      	bne.n	8004356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <TIM_OC3_SetConfig+0xe0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x92>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <TIM_OC3_SetConfig+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d113      	bne.n	800438e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800436c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40010400 	.word	0x40010400

080043bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	031b      	lsls	r3, r3, #12
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <TIM_OC4_SetConfig+0xa4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC4_SetConfig+0x68>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <TIM_OC4_SetConfig+0xa8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40010400 	.word	0x40010400

08004468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	43db      	mvns	r3, r3
 800448a:	401a      	ands	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e05a      	b.n	8004582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a21      	ldr	r2, [pc, #132]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d022      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d01d      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d018      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1a      	ldr	r2, [pc, #104]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00e      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d10c      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40001800 	.word	0x40001800

080045ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e03f      	b.n	800463e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fb60 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f829 	bl	8004648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b0c0      	sub	sp, #256	; 0x100
 800464e:	af00      	add	r7, sp, #0
 8004650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	68d9      	ldr	r1, [r3, #12]
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	ea40 0301 	orr.w	r3, r0, r1
 8004670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	431a      	orrs	r2, r3
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046a0:	f021 010c 	bic.w	r1, r1, #12
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ae:	430b      	orrs	r3, r1
 80046b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	6999      	ldr	r1, [r3, #24]
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	ea40 0301 	orr.w	r3, r0, r1
 80046ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <UART_SetConfig+0x2cc>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	d005      	beq.n	80046e8 <UART_SetConfig+0xa0>
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b8d      	ldr	r3, [pc, #564]	; (8004918 <UART_SetConfig+0x2d0>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d104      	bne.n	80046f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fb22 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 80046ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046f0:	e003      	b.n	80046fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046f2:	f7fe fb09 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80046f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004704:	f040 810c 	bne.w	8004920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	1891      	adds	r1, r2, r2
 8004720:	65b9      	str	r1, [r7, #88]	; 0x58
 8004722:	415b      	adcs	r3, r3
 8004724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800472a:	4621      	mov	r1, r4
 800472c:	eb12 0801 	adds.w	r8, r2, r1
 8004730:	4629      	mov	r1, r5
 8004732:	eb43 0901 	adc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004758:	462b      	mov	r3, r5
 800475a:	eb49 0303 	adc.w	r3, r9, r3
 800475e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004776:	460b      	mov	r3, r1
 8004778:	18db      	adds	r3, r3, r3
 800477a:	653b      	str	r3, [r7, #80]	; 0x50
 800477c:	4613      	mov	r3, r2
 800477e:	eb42 0303 	adc.w	r3, r2, r3
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
 8004784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800478c:	f7fb fd90 	bl	80002b0 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <UART_SetConfig+0x2d4>)
 8004796:	fba3 2302 	umull	r2, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	011c      	lsls	r4, r3, #4
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047b8:	415b      	adcs	r3, r3
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047c0:	4641      	mov	r1, r8
 80047c2:	eb12 0a01 	adds.w	sl, r2, r1
 80047c6:	4649      	mov	r1, r9
 80047c8:	eb43 0b01 	adc.w	fp, r3, r1
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e0:	4692      	mov	sl, r2
 80047e2:	469b      	mov	fp, r3
 80047e4:	4643      	mov	r3, r8
 80047e6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ee:	464b      	mov	r3, r9
 80047f0:	eb4b 0303 	adc.w	r3, fp, r3
 80047f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800480c:	460b      	mov	r3, r1
 800480e:	18db      	adds	r3, r3, r3
 8004810:	643b      	str	r3, [r7, #64]	; 0x40
 8004812:	4613      	mov	r3, r2
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800481e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004822:	f7fb fd45 	bl	80002b0 <__aeabi_uldivmod>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4611      	mov	r1, r2
 800482c:	4b3b      	ldr	r3, [pc, #236]	; (800491c <UART_SetConfig+0x2d4>)
 800482e:	fba3 2301 	umull	r2, r3, r3, r1
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2264      	movs	r2, #100	; 0x64
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	1acb      	subs	r3, r1, r3
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <UART_SetConfig+0x2d4>)
 8004844:	fba3 2302 	umull	r2, r3, r3, r2
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004850:	441c      	add	r4, r3
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	1891      	adds	r1, r2, r2
 800486a:	63b9      	str	r1, [r7, #56]	; 0x38
 800486c:	415b      	adcs	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004874:	4641      	mov	r1, r8
 8004876:	1851      	adds	r1, r2, r1
 8004878:	6339      	str	r1, [r7, #48]	; 0x30
 800487a:	4649      	mov	r1, r9
 800487c:	414b      	adcs	r3, r1
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800488c:	4659      	mov	r1, fp
 800488e:	00cb      	lsls	r3, r1, #3
 8004890:	4651      	mov	r1, sl
 8004892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004896:	4651      	mov	r1, sl
 8004898:	00ca      	lsls	r2, r1, #3
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	4642      	mov	r2, r8
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048a8:	464b      	mov	r3, r9
 80048aa:	460a      	mov	r2, r1
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048c8:	460b      	mov	r3, r1
 80048ca:	18db      	adds	r3, r3, r3
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ce:	4613      	mov	r3, r2
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048de:	f7fb fce7 	bl	80002b0 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x2d4>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x2d4>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 0207 	and.w	r2, r3, #7
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4422      	add	r2, r4
 800490e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004910:	e105      	b.n	8004b1e <UART_SetConfig+0x4d6>
 8004912:	bf00      	nop
 8004914:	40011000 	.word	0x40011000
 8004918:	40011400 	.word	0x40011400
 800491c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800492a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800492e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004932:	4642      	mov	r2, r8
 8004934:	464b      	mov	r3, r9
 8004936:	1891      	adds	r1, r2, r2
 8004938:	6239      	str	r1, [r7, #32]
 800493a:	415b      	adcs	r3, r3
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004942:	4641      	mov	r1, r8
 8004944:	1854      	adds	r4, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb43 0501 	adc.w	r5, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004968:	464b      	mov	r3, r9
 800496a:	eb45 0303 	adc.w	r3, r5, r3
 800496e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800497e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800498e:	4629      	mov	r1, r5
 8004990:	008b      	lsls	r3, r1, #2
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004998:	4621      	mov	r1, r4
 800499a:	008a      	lsls	r2, r1, #2
 800499c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049a0:	f7fb fc86 	bl	80002b0 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b60      	ldr	r3, [pc, #384]	; (8004b2c <UART_SetConfig+0x4e4>)
 80049aa:	fba3 2302 	umull	r2, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	011c      	lsls	r4, r3, #4
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	61b9      	str	r1, [r7, #24]
 80049cc:	415b      	adcs	r3, r3
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	6139      	str	r1, [r7, #16]
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	008b      	lsls	r3, r1, #2
 8004a30:	4641      	mov	r1, r8
 8004a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a36:	4641      	mov	r1, r8
 8004a38:	008a      	lsls	r2, r1, #2
 8004a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a3e:	f7fb fc37 	bl	80002b0 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a34      	ldr	r2, [pc, #208]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a66:	441c      	add	r4, r3
 8004a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a70:	677a      	str	r2, [r7, #116]	; 0x74
 8004a72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a76:	4642      	mov	r2, r8
 8004a78:	464b      	mov	r3, r9
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a86:	4641      	mov	r1, r8
 8004a88:	1851      	adds	r1, r2, r1
 8004a8a:	6039      	str	r1, [r7, #0]
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	414b      	adcs	r3, r1
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a9e:	4659      	mov	r1, fp
 8004aa0:	00cb      	lsls	r3, r1, #3
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	00ca      	lsls	r2, r1, #3
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4642      	mov	r2, r8
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	663b      	str	r3, [r7, #96]	; 0x60
 8004acc:	667a      	str	r2, [r7, #100]	; 0x64
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ada:	4649      	mov	r1, r9
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	4641      	mov	r1, r8
 8004ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	008a      	lsls	r2, r1, #2
 8004ae8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aec:	f7fb fbe0 	bl	80002b0 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004af6:	fba3 1302 	umull	r1, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2164      	movs	r1, #100	; 0x64
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	; 0x32
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4422      	add	r2, r4
 8004b1c:	609a      	str	r2, [r3, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b24:	46bd      	mov	sp, r7
 8004b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2a:	bf00      	nop
 8004b2c:	51eb851f 	.word	0x51eb851f

08004b30 <__errno>:
 8004b30:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <__errno+0x8>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000020 	.word	0x20000020

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d0d      	ldr	r5, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	2600      	movs	r6, #0
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <__libc_init_array+0x44>)
 8004b50:	f001 f824 	bl	8005b9c <_init>
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	2600      	movs	r6, #0
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	4798      	blx	r3
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	4798      	blx	r3
 8004b70:	3601      	adds	r6, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	0800a3bc 	.word	0x0800a3bc
 8004b78:	0800a3bc 	.word	0x0800a3bc
 8004b7c:	0800a3bc 	.word	0x0800a3bc
 8004b80:	0800a3c0 	.word	0x0800a3c0

08004b84 <memset>:
 8004b84:	4402      	add	r2, r0
 8004b86:	4603      	mov	r3, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <_free_r>:
 8004b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b96:	2900      	cmp	r1, #0
 8004b98:	d044      	beq.n	8004c24 <_free_r+0x90>
 8004b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b9e:	9001      	str	r0, [sp, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ba6:	bfb8      	it	lt
 8004ba8:	18e4      	addlt	r4, r4, r3
 8004baa:	f000 fc51 	bl	8005450 <__malloc_lock>
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <_free_r+0x94>)
 8004bb0:	9801      	ldr	r0, [sp, #4]
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	b933      	cbnz	r3, 8004bc4 <_free_r+0x30>
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	b003      	add	sp, #12
 8004bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bc0:	f000 bc4c 	b.w	800545c <__malloc_unlock>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d908      	bls.n	8004bda <_free_r+0x46>
 8004bc8:	6825      	ldr	r5, [r4, #0]
 8004bca:	1961      	adds	r1, r4, r5
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf01      	itttt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	e7ed      	b.n	8004bb6 <_free_r+0x22>
 8004bda:	461a      	mov	r2, r3
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b10b      	cbz	r3, 8004be4 <_free_r+0x50>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d9fa      	bls.n	8004bda <_free_r+0x46>
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	1855      	adds	r5, r2, r1
 8004be8:	42a5      	cmp	r5, r4
 8004bea:	d10b      	bne.n	8004c04 <_free_r+0x70>
 8004bec:	6824      	ldr	r4, [r4, #0]
 8004bee:	4421      	add	r1, r4
 8004bf0:	1854      	adds	r4, r2, r1
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	6011      	str	r1, [r2, #0]
 8004bf6:	d1e0      	bne.n	8004bba <_free_r+0x26>
 8004bf8:	681c      	ldr	r4, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	6053      	str	r3, [r2, #4]
 8004bfe:	4421      	add	r1, r4
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	e7da      	b.n	8004bba <_free_r+0x26>
 8004c04:	d902      	bls.n	8004c0c <_free_r+0x78>
 8004c06:	230c      	movs	r3, #12
 8004c08:	6003      	str	r3, [r0, #0]
 8004c0a:	e7d6      	b.n	8004bba <_free_r+0x26>
 8004c0c:	6825      	ldr	r5, [r4, #0]
 8004c0e:	1961      	adds	r1, r4, r5
 8004c10:	428b      	cmp	r3, r1
 8004c12:	bf04      	itt	eq
 8004c14:	6819      	ldreq	r1, [r3, #0]
 8004c16:	685b      	ldreq	r3, [r3, #4]
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	bf04      	itt	eq
 8004c1c:	1949      	addeq	r1, r1, r5
 8004c1e:	6021      	streq	r1, [r4, #0]
 8004c20:	6054      	str	r4, [r2, #4]
 8004c22:	e7ca      	b.n	8004bba <_free_r+0x26>
 8004c24:	b003      	add	sp, #12
 8004c26:	bd30      	pop	{r4, r5, pc}
 8004c28:	200001b4 	.word	0x200001b4

08004c2c <sbrk_aligned>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4e0e      	ldr	r6, [pc, #56]	; (8004c68 <sbrk_aligned+0x3c>)
 8004c30:	460c      	mov	r4, r1
 8004c32:	6831      	ldr	r1, [r6, #0]
 8004c34:	4605      	mov	r5, r0
 8004c36:	b911      	cbnz	r1, 8004c3e <sbrk_aligned+0x12>
 8004c38:	f000 f91a 	bl	8004e70 <_sbrk_r>
 8004c3c:	6030      	str	r0, [r6, #0]
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 f915 	bl	8004e70 <_sbrk_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d00a      	beq.n	8004c60 <sbrk_aligned+0x34>
 8004c4a:	1cc4      	adds	r4, r0, #3
 8004c4c:	f024 0403 	bic.w	r4, r4, #3
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d007      	beq.n	8004c64 <sbrk_aligned+0x38>
 8004c54:	1a21      	subs	r1, r4, r0
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f90a 	bl	8004e70 <_sbrk_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d101      	bne.n	8004c64 <sbrk_aligned+0x38>
 8004c60:	f04f 34ff 	mov.w	r4, #4294967295
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	200001b8 	.word	0x200001b8

08004c6c <_malloc_r>:
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	1ccd      	adds	r5, r1, #3
 8004c72:	f025 0503 	bic.w	r5, r5, #3
 8004c76:	3508      	adds	r5, #8
 8004c78:	2d0c      	cmp	r5, #12
 8004c7a:	bf38      	it	cc
 8004c7c:	250c      	movcc	r5, #12
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	4607      	mov	r7, r0
 8004c82:	db01      	blt.n	8004c88 <_malloc_r+0x1c>
 8004c84:	42a9      	cmp	r1, r5
 8004c86:	d905      	bls.n	8004c94 <_malloc_r+0x28>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	4630      	mov	r0, r6
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c94:	4e2e      	ldr	r6, [pc, #184]	; (8004d50 <_malloc_r+0xe4>)
 8004c96:	f000 fbdb 	bl	8005450 <__malloc_lock>
 8004c9a:	6833      	ldr	r3, [r6, #0]
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	bb34      	cbnz	r4, 8004cee <_malloc_r+0x82>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff ffc2 	bl	8004c2c <sbrk_aligned>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	4604      	mov	r4, r0
 8004cac:	d14d      	bne.n	8004d4a <_malloc_r+0xde>
 8004cae:	6834      	ldr	r4, [r6, #0]
 8004cb0:	4626      	mov	r6, r4
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	d140      	bne.n	8004d38 <_malloc_r+0xcc>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4638      	mov	r0, r7
 8004cbc:	eb04 0803 	add.w	r8, r4, r3
 8004cc0:	f000 f8d6 	bl	8004e70 <_sbrk_r>
 8004cc4:	4580      	cmp	r8, r0
 8004cc6:	d13a      	bne.n	8004d3e <_malloc_r+0xd2>
 8004cc8:	6821      	ldr	r1, [r4, #0]
 8004cca:	3503      	adds	r5, #3
 8004ccc:	1a6d      	subs	r5, r5, r1
 8004cce:	f025 0503 	bic.w	r5, r5, #3
 8004cd2:	3508      	adds	r5, #8
 8004cd4:	2d0c      	cmp	r5, #12
 8004cd6:	bf38      	it	cc
 8004cd8:	250c      	movcc	r5, #12
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f7ff ffa5 	bl	8004c2c <sbrk_aligned>
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d02b      	beq.n	8004d3e <_malloc_r+0xd2>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	442b      	add	r3, r5
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	e00e      	b.n	8004d0c <_malloc_r+0xa0>
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	1b52      	subs	r2, r2, r5
 8004cf2:	d41e      	bmi.n	8004d32 <_malloc_r+0xc6>
 8004cf4:	2a0b      	cmp	r2, #11
 8004cf6:	d916      	bls.n	8004d26 <_malloc_r+0xba>
 8004cf8:	1961      	adds	r1, r4, r5
 8004cfa:	42a3      	cmp	r3, r4
 8004cfc:	6025      	str	r5, [r4, #0]
 8004cfe:	bf18      	it	ne
 8004d00:	6059      	strne	r1, [r3, #4]
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	bf08      	it	eq
 8004d06:	6031      	streq	r1, [r6, #0]
 8004d08:	5162      	str	r2, [r4, r5]
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f104 060b 	add.w	r6, r4, #11
 8004d12:	f000 fba3 	bl	800545c <__malloc_unlock>
 8004d16:	f026 0607 	bic.w	r6, r6, #7
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	1af2      	subs	r2, r6, r3
 8004d1e:	d0b6      	beq.n	8004c8e <_malloc_r+0x22>
 8004d20:	1b9b      	subs	r3, r3, r6
 8004d22:	50a3      	str	r3, [r4, r2]
 8004d24:	e7b3      	b.n	8004c8e <_malloc_r+0x22>
 8004d26:	6862      	ldr	r2, [r4, #4]
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	bf0c      	ite	eq
 8004d2c:	6032      	streq	r2, [r6, #0]
 8004d2e:	605a      	strne	r2, [r3, #4]
 8004d30:	e7ec      	b.n	8004d0c <_malloc_r+0xa0>
 8004d32:	4623      	mov	r3, r4
 8004d34:	6864      	ldr	r4, [r4, #4]
 8004d36:	e7b2      	b.n	8004c9e <_malloc_r+0x32>
 8004d38:	4634      	mov	r4, r6
 8004d3a:	6876      	ldr	r6, [r6, #4]
 8004d3c:	e7b9      	b.n	8004cb2 <_malloc_r+0x46>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4638      	mov	r0, r7
 8004d44:	f000 fb8a 	bl	800545c <__malloc_unlock>
 8004d48:	e7a1      	b.n	8004c8e <_malloc_r+0x22>
 8004d4a:	6025      	str	r5, [r4, #0]
 8004d4c:	e7de      	b.n	8004d0c <_malloc_r+0xa0>
 8004d4e:	bf00      	nop
 8004d50:	200001b4 	.word	0x200001b4

08004d54 <iprintf>:
 8004d54:	b40f      	push	{r0, r1, r2, r3}
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <iprintf+0x2c>)
 8004d58:	b513      	push	{r0, r1, r4, lr}
 8004d5a:	681c      	ldr	r4, [r3, #0]
 8004d5c:	b124      	cbz	r4, 8004d68 <iprintf+0x14>
 8004d5e:	69a3      	ldr	r3, [r4, #24]
 8004d60:	b913      	cbnz	r3, 8004d68 <iprintf+0x14>
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fa6e 	bl	8005244 <__sinit>
 8004d68:	ab05      	add	r3, sp, #20
 8004d6a:	9a04      	ldr	r2, [sp, #16]
 8004d6c:	68a1      	ldr	r1, [r4, #8]
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 fba3 	bl	80054bc <_vfiprintf_r>
 8004d76:	b002      	add	sp, #8
 8004d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d7c:	b004      	add	sp, #16
 8004d7e:	4770      	bx	lr
 8004d80:	20000020 	.word	0x20000020

08004d84 <_puts_r>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	460e      	mov	r6, r1
 8004d88:	4605      	mov	r5, r0
 8004d8a:	b118      	cbz	r0, 8004d94 <_puts_r+0x10>
 8004d8c:	6983      	ldr	r3, [r0, #24]
 8004d8e:	b90b      	cbnz	r3, 8004d94 <_puts_r+0x10>
 8004d90:	f000 fa58 	bl	8005244 <__sinit>
 8004d94:	69ab      	ldr	r3, [r5, #24]
 8004d96:	68ac      	ldr	r4, [r5, #8]
 8004d98:	b913      	cbnz	r3, 8004da0 <_puts_r+0x1c>
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 fa52 	bl	8005244 <__sinit>
 8004da0:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <_puts_r+0xd0>)
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d120      	bne.n	8004de8 <_puts_r+0x64>
 8004da6:	686c      	ldr	r4, [r5, #4]
 8004da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004daa:	07db      	lsls	r3, r3, #31
 8004dac:	d405      	bmi.n	8004dba <_puts_r+0x36>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	0598      	lsls	r0, r3, #22
 8004db2:	d402      	bmi.n	8004dba <_puts_r+0x36>
 8004db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db6:	f000 fae3 	bl	8005380 <__retarget_lock_acquire_recursive>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	0719      	lsls	r1, r3, #28
 8004dbe:	d51d      	bpl.n	8004dfc <_puts_r+0x78>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	b1db      	cbz	r3, 8004dfc <_puts_r+0x78>
 8004dc4:	3e01      	subs	r6, #1
 8004dc6:	68a3      	ldr	r3, [r4, #8]
 8004dc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	60a3      	str	r3, [r4, #8]
 8004dd0:	bb39      	cbnz	r1, 8004e22 <_puts_r+0x9e>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da38      	bge.n	8004e48 <_puts_r+0xc4>
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	210a      	movs	r1, #10
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 f858 	bl	8004e90 <__swbuf_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d011      	beq.n	8004e08 <_puts_r+0x84>
 8004de4:	250a      	movs	r5, #10
 8004de6:	e011      	b.n	8004e0c <_puts_r+0x88>
 8004de8:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <_puts_r+0xd4>)
 8004dea:	429c      	cmp	r4, r3
 8004dec:	d101      	bne.n	8004df2 <_puts_r+0x6e>
 8004dee:	68ac      	ldr	r4, [r5, #8]
 8004df0:	e7da      	b.n	8004da8 <_puts_r+0x24>
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <_puts_r+0xd8>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	bf08      	it	eq
 8004df8:	68ec      	ldreq	r4, [r5, #12]
 8004dfa:	e7d5      	b.n	8004da8 <_puts_r+0x24>
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f898 	bl	8004f34 <__swsetup_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d0dd      	beq.n	8004dc4 <_puts_r+0x40>
 8004e08:	f04f 35ff 	mov.w	r5, #4294967295
 8004e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e0e:	07da      	lsls	r2, r3, #31
 8004e10:	d405      	bmi.n	8004e1e <_puts_r+0x9a>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	059b      	lsls	r3, r3, #22
 8004e16:	d402      	bmi.n	8004e1e <_puts_r+0x9a>
 8004e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1a:	f000 fab2 	bl	8005382 <__retarget_lock_release_recursive>
 8004e1e:	4628      	mov	r0, r5
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da04      	bge.n	8004e30 <_puts_r+0xac>
 8004e26:	69a2      	ldr	r2, [r4, #24]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	dc06      	bgt.n	8004e3a <_puts_r+0xb6>
 8004e2c:	290a      	cmp	r1, #10
 8004e2e:	d004      	beq.n	8004e3a <_puts_r+0xb6>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	6022      	str	r2, [r4, #0]
 8004e36:	7019      	strb	r1, [r3, #0]
 8004e38:	e7c5      	b.n	8004dc6 <_puts_r+0x42>
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 f827 	bl	8004e90 <__swbuf_r>
 8004e42:	3001      	adds	r0, #1
 8004e44:	d1bf      	bne.n	8004dc6 <_puts_r+0x42>
 8004e46:	e7df      	b.n	8004e08 <_puts_r+0x84>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	250a      	movs	r5, #10
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	701d      	strb	r5, [r3, #0]
 8004e52:	e7db      	b.n	8004e0c <_puts_r+0x88>
 8004e54:	0800a340 	.word	0x0800a340
 8004e58:	0800a360 	.word	0x0800a360
 8004e5c:	0800a320 	.word	0x0800a320

08004e60 <puts>:
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <puts+0xc>)
 8004e62:	4601      	mov	r1, r0
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f7ff bf8d 	b.w	8004d84 <_puts_r>
 8004e6a:	bf00      	nop
 8004e6c:	20000020 	.word	0x20000020

08004e70 <_sbrk_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d06      	ldr	r5, [pc, #24]	; (8004e8c <_sbrk_r+0x1c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fb fde4 	bl	8000a48 <_sbrk>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_sbrk_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_sbrk_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200001c0 	.word	0x200001c0

08004e90 <__swbuf_r>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	460e      	mov	r6, r1
 8004e94:	4614      	mov	r4, r2
 8004e96:	4605      	mov	r5, r0
 8004e98:	b118      	cbz	r0, 8004ea2 <__swbuf_r+0x12>
 8004e9a:	6983      	ldr	r3, [r0, #24]
 8004e9c:	b90b      	cbnz	r3, 8004ea2 <__swbuf_r+0x12>
 8004e9e:	f000 f9d1 	bl	8005244 <__sinit>
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <__swbuf_r+0x98>)
 8004ea4:	429c      	cmp	r4, r3
 8004ea6:	d12b      	bne.n	8004f00 <__swbuf_r+0x70>
 8004ea8:	686c      	ldr	r4, [r5, #4]
 8004eaa:	69a3      	ldr	r3, [r4, #24]
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	071a      	lsls	r2, r3, #28
 8004eb2:	d52f      	bpl.n	8004f14 <__swbuf_r+0x84>
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	b36b      	cbz	r3, 8004f14 <__swbuf_r+0x84>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	1ac0      	subs	r0, r0, r3
 8004ebe:	6963      	ldr	r3, [r4, #20]
 8004ec0:	b2f6      	uxtb	r6, r6
 8004ec2:	4283      	cmp	r3, r0
 8004ec4:	4637      	mov	r7, r6
 8004ec6:	dc04      	bgt.n	8004ed2 <__swbuf_r+0x42>
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f926 	bl	800511c <_fflush_r>
 8004ed0:	bb30      	cbnz	r0, 8004f20 <__swbuf_r+0x90>
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60a3      	str	r3, [r4, #8]
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	6022      	str	r2, [r4, #0]
 8004ede:	701e      	strb	r6, [r3, #0]
 8004ee0:	6963      	ldr	r3, [r4, #20]
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	4283      	cmp	r3, r0
 8004ee6:	d004      	beq.n	8004ef2 <__swbuf_r+0x62>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	07db      	lsls	r3, r3, #31
 8004eec:	d506      	bpl.n	8004efc <__swbuf_r+0x6c>
 8004eee:	2e0a      	cmp	r6, #10
 8004ef0:	d104      	bne.n	8004efc <__swbuf_r+0x6c>
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 f911 	bl	800511c <_fflush_r>
 8004efa:	b988      	cbnz	r0, 8004f20 <__swbuf_r+0x90>
 8004efc:	4638      	mov	r0, r7
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <__swbuf_r+0x9c>)
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d101      	bne.n	8004f0a <__swbuf_r+0x7a>
 8004f06:	68ac      	ldr	r4, [r5, #8]
 8004f08:	e7cf      	b.n	8004eaa <__swbuf_r+0x1a>
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <__swbuf_r+0xa0>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	bf08      	it	eq
 8004f10:	68ec      	ldreq	r4, [r5, #12]
 8004f12:	e7ca      	b.n	8004eaa <__swbuf_r+0x1a>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f80c 	bl	8004f34 <__swsetup_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d0cb      	beq.n	8004eb8 <__swbuf_r+0x28>
 8004f20:	f04f 37ff 	mov.w	r7, #4294967295
 8004f24:	e7ea      	b.n	8004efc <__swbuf_r+0x6c>
 8004f26:	bf00      	nop
 8004f28:	0800a340 	.word	0x0800a340
 8004f2c:	0800a360 	.word	0x0800a360
 8004f30:	0800a320 	.word	0x0800a320

08004f34 <__swsetup_r>:
 8004f34:	4b32      	ldr	r3, [pc, #200]	; (8005000 <__swsetup_r+0xcc>)
 8004f36:	b570      	push	{r4, r5, r6, lr}
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	b125      	cbz	r5, 8004f4a <__swsetup_r+0x16>
 8004f40:	69ab      	ldr	r3, [r5, #24]
 8004f42:	b913      	cbnz	r3, 8004f4a <__swsetup_r+0x16>
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 f97d 	bl	8005244 <__sinit>
 8004f4a:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <__swsetup_r+0xd0>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	d10f      	bne.n	8004f70 <__swsetup_r+0x3c>
 8004f50:	686c      	ldr	r4, [r5, #4]
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f58:	0719      	lsls	r1, r3, #28
 8004f5a:	d42c      	bmi.n	8004fb6 <__swsetup_r+0x82>
 8004f5c:	06dd      	lsls	r5, r3, #27
 8004f5e:	d411      	bmi.n	8004f84 <__swsetup_r+0x50>
 8004f60:	2309      	movs	r3, #9
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6e:	e03e      	b.n	8004fee <__swsetup_r+0xba>
 8004f70:	4b25      	ldr	r3, [pc, #148]	; (8005008 <__swsetup_r+0xd4>)
 8004f72:	429c      	cmp	r4, r3
 8004f74:	d101      	bne.n	8004f7a <__swsetup_r+0x46>
 8004f76:	68ac      	ldr	r4, [r5, #8]
 8004f78:	e7eb      	b.n	8004f52 <__swsetup_r+0x1e>
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <__swsetup_r+0xd8>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	bf08      	it	eq
 8004f80:	68ec      	ldreq	r4, [r5, #12]
 8004f82:	e7e6      	b.n	8004f52 <__swsetup_r+0x1e>
 8004f84:	0758      	lsls	r0, r3, #29
 8004f86:	d512      	bpl.n	8004fae <__swsetup_r+0x7a>
 8004f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f8a:	b141      	cbz	r1, 8004f9e <__swsetup_r+0x6a>
 8004f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f90:	4299      	cmp	r1, r3
 8004f92:	d002      	beq.n	8004f9a <__swsetup_r+0x66>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff fdfd 	bl	8004b94 <_free_r>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f043 0308 	orr.w	r3, r3, #8
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	b94b      	cbnz	r3, 8004fce <__swsetup_r+0x9a>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc4:	d003      	beq.n	8004fce <__swsetup_r+0x9a>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 fa01 	bl	80053d0 <__smakebuf_r>
 8004fce:	89a0      	ldrh	r0, [r4, #12]
 8004fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fd4:	f010 0301 	ands.w	r3, r0, #1
 8004fd8:	d00a      	beq.n	8004ff0 <__swsetup_r+0xbc>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60a3      	str	r3, [r4, #8]
 8004fde:	6963      	ldr	r3, [r4, #20]
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	61a3      	str	r3, [r4, #24]
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	b943      	cbnz	r3, 8004ffa <__swsetup_r+0xc6>
 8004fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fec:	d1ba      	bne.n	8004f64 <__swsetup_r+0x30>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	0781      	lsls	r1, r0, #30
 8004ff2:	bf58      	it	pl
 8004ff4:	6963      	ldrpl	r3, [r4, #20]
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	e7f4      	b.n	8004fe4 <__swsetup_r+0xb0>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e7f7      	b.n	8004fee <__swsetup_r+0xba>
 8004ffe:	bf00      	nop
 8005000:	20000020 	.word	0x20000020
 8005004:	0800a340 	.word	0x0800a340
 8005008:	0800a360 	.word	0x0800a360
 800500c:	0800a320 	.word	0x0800a320

08005010 <__sflush_r>:
 8005010:	898a      	ldrh	r2, [r1, #12]
 8005012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	0710      	lsls	r0, r2, #28
 800501a:	460c      	mov	r4, r1
 800501c:	d458      	bmi.n	80050d0 <__sflush_r+0xc0>
 800501e:	684b      	ldr	r3, [r1, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	dc05      	bgt.n	8005030 <__sflush_r+0x20>
 8005024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	dc02      	bgt.n	8005030 <__sflush_r+0x20>
 800502a:	2000      	movs	r0, #0
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005032:	2e00      	cmp	r6, #0
 8005034:	d0f9      	beq.n	800502a <__sflush_r+0x1a>
 8005036:	2300      	movs	r3, #0
 8005038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800503c:	682f      	ldr	r7, [r5, #0]
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	d032      	beq.n	80050a8 <__sflush_r+0x98>
 8005042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	075a      	lsls	r2, r3, #29
 8005048:	d505      	bpl.n	8005056 <__sflush_r+0x46>
 800504a:	6863      	ldr	r3, [r4, #4]
 800504c:	1ac0      	subs	r0, r0, r3
 800504e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005050:	b10b      	cbz	r3, 8005056 <__sflush_r+0x46>
 8005052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005054:	1ac0      	subs	r0, r0, r3
 8005056:	2300      	movs	r3, #0
 8005058:	4602      	mov	r2, r0
 800505a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800505c:	6a21      	ldr	r1, [r4, #32]
 800505e:	4628      	mov	r0, r5
 8005060:	47b0      	blx	r6
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	d106      	bne.n	8005076 <__sflush_r+0x66>
 8005068:	6829      	ldr	r1, [r5, #0]
 800506a:	291d      	cmp	r1, #29
 800506c:	d82c      	bhi.n	80050c8 <__sflush_r+0xb8>
 800506e:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <__sflush_r+0x108>)
 8005070:	40ca      	lsrs	r2, r1
 8005072:	07d6      	lsls	r6, r2, #31
 8005074:	d528      	bpl.n	80050c8 <__sflush_r+0xb8>
 8005076:	2200      	movs	r2, #0
 8005078:	6062      	str	r2, [r4, #4]
 800507a:	04d9      	lsls	r1, r3, #19
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	6022      	str	r2, [r4, #0]
 8005080:	d504      	bpl.n	800508c <__sflush_r+0x7c>
 8005082:	1c42      	adds	r2, r0, #1
 8005084:	d101      	bne.n	800508a <__sflush_r+0x7a>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	b903      	cbnz	r3, 800508c <__sflush_r+0x7c>
 800508a:	6560      	str	r0, [r4, #84]	; 0x54
 800508c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800508e:	602f      	str	r7, [r5, #0]
 8005090:	2900      	cmp	r1, #0
 8005092:	d0ca      	beq.n	800502a <__sflush_r+0x1a>
 8005094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005098:	4299      	cmp	r1, r3
 800509a:	d002      	beq.n	80050a2 <__sflush_r+0x92>
 800509c:	4628      	mov	r0, r5
 800509e:	f7ff fd79 	bl	8004b94 <_free_r>
 80050a2:	2000      	movs	r0, #0
 80050a4:	6360      	str	r0, [r4, #52]	; 0x34
 80050a6:	e7c1      	b.n	800502c <__sflush_r+0x1c>
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	2301      	movs	r3, #1
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	1c41      	adds	r1, r0, #1
 80050b2:	d1c7      	bne.n	8005044 <__sflush_r+0x34>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0c4      	beq.n	8005044 <__sflush_r+0x34>
 80050ba:	2b1d      	cmp	r3, #29
 80050bc:	d001      	beq.n	80050c2 <__sflush_r+0xb2>
 80050be:	2b16      	cmp	r3, #22
 80050c0:	d101      	bne.n	80050c6 <__sflush_r+0xb6>
 80050c2:	602f      	str	r7, [r5, #0]
 80050c4:	e7b1      	b.n	800502a <__sflush_r+0x1a>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e7ad      	b.n	800502c <__sflush_r+0x1c>
 80050d0:	690f      	ldr	r7, [r1, #16]
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	d0a9      	beq.n	800502a <__sflush_r+0x1a>
 80050d6:	0793      	lsls	r3, r2, #30
 80050d8:	680e      	ldr	r6, [r1, #0]
 80050da:	bf08      	it	eq
 80050dc:	694b      	ldreq	r3, [r1, #20]
 80050de:	600f      	str	r7, [r1, #0]
 80050e0:	bf18      	it	ne
 80050e2:	2300      	movne	r3, #0
 80050e4:	eba6 0807 	sub.w	r8, r6, r7
 80050e8:	608b      	str	r3, [r1, #8]
 80050ea:	f1b8 0f00 	cmp.w	r8, #0
 80050ee:	dd9c      	ble.n	800502a <__sflush_r+0x1a>
 80050f0:	6a21      	ldr	r1, [r4, #32]
 80050f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050f4:	4643      	mov	r3, r8
 80050f6:	463a      	mov	r2, r7
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dc06      	bgt.n	800510e <__sflush_r+0xfe>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e78e      	b.n	800502c <__sflush_r+0x1c>
 800510e:	4407      	add	r7, r0
 8005110:	eba8 0800 	sub.w	r8, r8, r0
 8005114:	e7e9      	b.n	80050ea <__sflush_r+0xda>
 8005116:	bf00      	nop
 8005118:	20400001 	.word	0x20400001

0800511c <_fflush_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	4605      	mov	r5, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b913      	cbnz	r3, 800512c <_fflush_r+0x10>
 8005126:	2500      	movs	r5, #0
 8005128:	4628      	mov	r0, r5
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	b118      	cbz	r0, 8005136 <_fflush_r+0x1a>
 800512e:	6983      	ldr	r3, [r0, #24]
 8005130:	b90b      	cbnz	r3, 8005136 <_fflush_r+0x1a>
 8005132:	f000 f887 	bl	8005244 <__sinit>
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <_fflush_r+0x6c>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d11b      	bne.n	8005174 <_fflush_r+0x58>
 800513c:	686c      	ldr	r4, [r5, #4]
 800513e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ef      	beq.n	8005126 <_fflush_r+0xa>
 8005146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005148:	07d0      	lsls	r0, r2, #31
 800514a:	d404      	bmi.n	8005156 <_fflush_r+0x3a>
 800514c:	0599      	lsls	r1, r3, #22
 800514e:	d402      	bmi.n	8005156 <_fflush_r+0x3a>
 8005150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005152:	f000 f915 	bl	8005380 <__retarget_lock_acquire_recursive>
 8005156:	4628      	mov	r0, r5
 8005158:	4621      	mov	r1, r4
 800515a:	f7ff ff59 	bl	8005010 <__sflush_r>
 800515e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005160:	07da      	lsls	r2, r3, #31
 8005162:	4605      	mov	r5, r0
 8005164:	d4e0      	bmi.n	8005128 <_fflush_r+0xc>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	059b      	lsls	r3, r3, #22
 800516a:	d4dd      	bmi.n	8005128 <_fflush_r+0xc>
 800516c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516e:	f000 f908 	bl	8005382 <__retarget_lock_release_recursive>
 8005172:	e7d9      	b.n	8005128 <_fflush_r+0xc>
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <_fflush_r+0x70>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d101      	bne.n	800517e <_fflush_r+0x62>
 800517a:	68ac      	ldr	r4, [r5, #8]
 800517c:	e7df      	b.n	800513e <_fflush_r+0x22>
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <_fflush_r+0x74>)
 8005180:	429c      	cmp	r4, r3
 8005182:	bf08      	it	eq
 8005184:	68ec      	ldreq	r4, [r5, #12]
 8005186:	e7da      	b.n	800513e <_fflush_r+0x22>
 8005188:	0800a340 	.word	0x0800a340
 800518c:	0800a360 	.word	0x0800a360
 8005190:	0800a320 	.word	0x0800a320

08005194 <std>:
 8005194:	2300      	movs	r3, #0
 8005196:	b510      	push	{r4, lr}
 8005198:	4604      	mov	r4, r0
 800519a:	e9c0 3300 	strd	r3, r3, [r0]
 800519e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051a2:	6083      	str	r3, [r0, #8]
 80051a4:	8181      	strh	r1, [r0, #12]
 80051a6:	6643      	str	r3, [r0, #100]	; 0x64
 80051a8:	81c2      	strh	r2, [r0, #14]
 80051aa:	6183      	str	r3, [r0, #24]
 80051ac:	4619      	mov	r1, r3
 80051ae:	2208      	movs	r2, #8
 80051b0:	305c      	adds	r0, #92	; 0x5c
 80051b2:	f7ff fce7 	bl	8004b84 <memset>
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x38>)
 80051b8:	6263      	str	r3, [r4, #36]	; 0x24
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std+0x3c>)
 80051bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <std+0x40>)
 80051c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <std+0x44>)
 80051c4:	6224      	str	r4, [r4, #32]
 80051c6:	6323      	str	r3, [r4, #48]	; 0x30
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	bf00      	nop
 80051cc:	08005a45 	.word	0x08005a45
 80051d0:	08005a67 	.word	0x08005a67
 80051d4:	08005a9f 	.word	0x08005a9f
 80051d8:	08005ac3 	.word	0x08005ac3

080051dc <_cleanup_r>:
 80051dc:	4901      	ldr	r1, [pc, #4]	; (80051e4 <_cleanup_r+0x8>)
 80051de:	f000 b8af 	b.w	8005340 <_fwalk_reent>
 80051e2:	bf00      	nop
 80051e4:	0800511d 	.word	0x0800511d

080051e8 <__sfmoreglue>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	2268      	movs	r2, #104	; 0x68
 80051ec:	1e4d      	subs	r5, r1, #1
 80051ee:	4355      	muls	r5, r2
 80051f0:	460e      	mov	r6, r1
 80051f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051f6:	f7ff fd39 	bl	8004c6c <_malloc_r>
 80051fa:	4604      	mov	r4, r0
 80051fc:	b140      	cbz	r0, 8005210 <__sfmoreglue+0x28>
 80051fe:	2100      	movs	r1, #0
 8005200:	e9c0 1600 	strd	r1, r6, [r0]
 8005204:	300c      	adds	r0, #12
 8005206:	60a0      	str	r0, [r4, #8]
 8005208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800520c:	f7ff fcba 	bl	8004b84 <memset>
 8005210:	4620      	mov	r0, r4
 8005212:	bd70      	pop	{r4, r5, r6, pc}

08005214 <__sfp_lock_acquire>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__sfp_lock_acquire+0x8>)
 8005216:	f000 b8b3 	b.w	8005380 <__retarget_lock_acquire_recursive>
 800521a:	bf00      	nop
 800521c:	200001bd 	.word	0x200001bd

08005220 <__sfp_lock_release>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__sfp_lock_release+0x8>)
 8005222:	f000 b8ae 	b.w	8005382 <__retarget_lock_release_recursive>
 8005226:	bf00      	nop
 8005228:	200001bd 	.word	0x200001bd

0800522c <__sinit_lock_acquire>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sinit_lock_acquire+0x8>)
 800522e:	f000 b8a7 	b.w	8005380 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	200001be 	.word	0x200001be

08005238 <__sinit_lock_release>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__sinit_lock_release+0x8>)
 800523a:	f000 b8a2 	b.w	8005382 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	200001be 	.word	0x200001be

08005244 <__sinit>:
 8005244:	b510      	push	{r4, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	f7ff fff0 	bl	800522c <__sinit_lock_acquire>
 800524c:	69a3      	ldr	r3, [r4, #24]
 800524e:	b11b      	cbz	r3, 8005258 <__sinit+0x14>
 8005250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005254:	f7ff bff0 	b.w	8005238 <__sinit_lock_release>
 8005258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800525c:	6523      	str	r3, [r4, #80]	; 0x50
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <__sinit+0x68>)
 8005260:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <__sinit+0x6c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62a2      	str	r2, [r4, #40]	; 0x28
 8005266:	42a3      	cmp	r3, r4
 8005268:	bf04      	itt	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	61a3      	streq	r3, [r4, #24]
 800526e:	4620      	mov	r0, r4
 8005270:	f000 f820 	bl	80052b4 <__sfp>
 8005274:	6060      	str	r0, [r4, #4]
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f81c 	bl	80052b4 <__sfp>
 800527c:	60a0      	str	r0, [r4, #8]
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f818 	bl	80052b4 <__sfp>
 8005284:	2200      	movs	r2, #0
 8005286:	60e0      	str	r0, [r4, #12]
 8005288:	2104      	movs	r1, #4
 800528a:	6860      	ldr	r0, [r4, #4]
 800528c:	f7ff ff82 	bl	8005194 <std>
 8005290:	68a0      	ldr	r0, [r4, #8]
 8005292:	2201      	movs	r2, #1
 8005294:	2109      	movs	r1, #9
 8005296:	f7ff ff7d 	bl	8005194 <std>
 800529a:	68e0      	ldr	r0, [r4, #12]
 800529c:	2202      	movs	r2, #2
 800529e:	2112      	movs	r1, #18
 80052a0:	f7ff ff78 	bl	8005194 <std>
 80052a4:	2301      	movs	r3, #1
 80052a6:	61a3      	str	r3, [r4, #24]
 80052a8:	e7d2      	b.n	8005250 <__sinit+0xc>
 80052aa:	bf00      	nop
 80052ac:	0800a31c 	.word	0x0800a31c
 80052b0:	080051dd 	.word	0x080051dd

080052b4 <__sfp>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	4607      	mov	r7, r0
 80052b8:	f7ff ffac 	bl	8005214 <__sfp_lock_acquire>
 80052bc:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <__sfp+0x84>)
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	69b3      	ldr	r3, [r6, #24]
 80052c2:	b913      	cbnz	r3, 80052ca <__sfp+0x16>
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff ffbd 	bl	8005244 <__sinit>
 80052ca:	3648      	adds	r6, #72	; 0x48
 80052cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	d503      	bpl.n	80052dc <__sfp+0x28>
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	b30b      	cbz	r3, 800531c <__sfp+0x68>
 80052d8:	6836      	ldr	r6, [r6, #0]
 80052da:	e7f7      	b.n	80052cc <__sfp+0x18>
 80052dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052e0:	b9d5      	cbnz	r5, 8005318 <__sfp+0x64>
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <__sfp+0x88>)
 80052e4:	60e3      	str	r3, [r4, #12]
 80052e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052ea:	6665      	str	r5, [r4, #100]	; 0x64
 80052ec:	f000 f847 	bl	800537e <__retarget_lock_init_recursive>
 80052f0:	f7ff ff96 	bl	8005220 <__sfp_lock_release>
 80052f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052fc:	6025      	str	r5, [r4, #0]
 80052fe:	61a5      	str	r5, [r4, #24]
 8005300:	2208      	movs	r2, #8
 8005302:	4629      	mov	r1, r5
 8005304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005308:	f7ff fc3c 	bl	8004b84 <memset>
 800530c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005314:	4620      	mov	r0, r4
 8005316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005318:	3468      	adds	r4, #104	; 0x68
 800531a:	e7d9      	b.n	80052d0 <__sfp+0x1c>
 800531c:	2104      	movs	r1, #4
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ff62 	bl	80051e8 <__sfmoreglue>
 8005324:	4604      	mov	r4, r0
 8005326:	6030      	str	r0, [r6, #0]
 8005328:	2800      	cmp	r0, #0
 800532a:	d1d5      	bne.n	80052d8 <__sfp+0x24>
 800532c:	f7ff ff78 	bl	8005220 <__sfp_lock_release>
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	e7ee      	b.n	8005314 <__sfp+0x60>
 8005336:	bf00      	nop
 8005338:	0800a31c 	.word	0x0800a31c
 800533c:	ffff0001 	.word	0xffff0001

08005340 <_fwalk_reent>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4606      	mov	r6, r0
 8005346:	4688      	mov	r8, r1
 8005348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800534c:	2700      	movs	r7, #0
 800534e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005352:	f1b9 0901 	subs.w	r9, r9, #1
 8005356:	d505      	bpl.n	8005364 <_fwalk_reent+0x24>
 8005358:	6824      	ldr	r4, [r4, #0]
 800535a:	2c00      	cmp	r4, #0
 800535c:	d1f7      	bne.n	800534e <_fwalk_reent+0xe>
 800535e:	4638      	mov	r0, r7
 8005360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005364:	89ab      	ldrh	r3, [r5, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d907      	bls.n	800537a <_fwalk_reent+0x3a>
 800536a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800536e:	3301      	adds	r3, #1
 8005370:	d003      	beq.n	800537a <_fwalk_reent+0x3a>
 8005372:	4629      	mov	r1, r5
 8005374:	4630      	mov	r0, r6
 8005376:	47c0      	blx	r8
 8005378:	4307      	orrs	r7, r0
 800537a:	3568      	adds	r5, #104	; 0x68
 800537c:	e7e9      	b.n	8005352 <_fwalk_reent+0x12>

0800537e <__retarget_lock_init_recursive>:
 800537e:	4770      	bx	lr

08005380 <__retarget_lock_acquire_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_release_recursive>:
 8005382:	4770      	bx	lr

08005384 <__swhatbuf_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2900      	cmp	r1, #0
 800538e:	b096      	sub	sp, #88	; 0x58
 8005390:	4614      	mov	r4, r2
 8005392:	461d      	mov	r5, r3
 8005394:	da08      	bge.n	80053a8 <__swhatbuf_r+0x24>
 8005396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	061a      	lsls	r2, r3, #24
 80053a0:	d410      	bmi.n	80053c4 <__swhatbuf_r+0x40>
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	e00e      	b.n	80053c6 <__swhatbuf_r+0x42>
 80053a8:	466a      	mov	r2, sp
 80053aa:	f000 fbb1 	bl	8005b10 <_fstat_r>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	dbf1      	blt.n	8005396 <__swhatbuf_r+0x12>
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053bc:	425a      	negs	r2, r3
 80053be:	415a      	adcs	r2, r3
 80053c0:	602a      	str	r2, [r5, #0]
 80053c2:	e7ee      	b.n	80053a2 <__swhatbuf_r+0x1e>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	2000      	movs	r0, #0
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	b016      	add	sp, #88	; 0x58
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080053d0 <__smakebuf_r>:
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d4:	079d      	lsls	r5, r3, #30
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	d507      	bpl.n	80053ec <__smakebuf_r+0x1c>
 80053dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	2301      	movs	r3, #1
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	b002      	add	sp, #8
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	ab01      	add	r3, sp, #4
 80053ee:	466a      	mov	r2, sp
 80053f0:	f7ff ffc8 	bl	8005384 <__swhatbuf_r>
 80053f4:	9900      	ldr	r1, [sp, #0]
 80053f6:	4605      	mov	r5, r0
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7ff fc37 	bl	8004c6c <_malloc_r>
 80053fe:	b948      	cbnz	r0, 8005414 <__smakebuf_r+0x44>
 8005400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005404:	059a      	lsls	r2, r3, #22
 8005406:	d4ef      	bmi.n	80053e8 <__smakebuf_r+0x18>
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	e7e3      	b.n	80053dc <__smakebuf_r+0xc>
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <__smakebuf_r+0x7c>)
 8005416:	62b3      	str	r3, [r6, #40]	; 0x28
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	6020      	str	r0, [r4, #0]
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	9b00      	ldr	r3, [sp, #0]
 8005424:	6163      	str	r3, [r4, #20]
 8005426:	9b01      	ldr	r3, [sp, #4]
 8005428:	6120      	str	r0, [r4, #16]
 800542a:	b15b      	cbz	r3, 8005444 <__smakebuf_r+0x74>
 800542c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005430:	4630      	mov	r0, r6
 8005432:	f000 fb7f 	bl	8005b34 <_isatty_r>
 8005436:	b128      	cbz	r0, 8005444 <__smakebuf_r+0x74>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	89a0      	ldrh	r0, [r4, #12]
 8005446:	4305      	orrs	r5, r0
 8005448:	81a5      	strh	r5, [r4, #12]
 800544a:	e7cd      	b.n	80053e8 <__smakebuf_r+0x18>
 800544c:	080051dd 	.word	0x080051dd

08005450 <__malloc_lock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_lock+0x8>)
 8005452:	f7ff bf95 	b.w	8005380 <__retarget_lock_acquire_recursive>
 8005456:	bf00      	nop
 8005458:	200001bc 	.word	0x200001bc

0800545c <__malloc_unlock>:
 800545c:	4801      	ldr	r0, [pc, #4]	; (8005464 <__malloc_unlock+0x8>)
 800545e:	f7ff bf90 	b.w	8005382 <__retarget_lock_release_recursive>
 8005462:	bf00      	nop
 8005464:	200001bc 	.word	0x200001bc

08005468 <__sfputc_r>:
 8005468:	6893      	ldr	r3, [r2, #8]
 800546a:	3b01      	subs	r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	b410      	push	{r4}
 8005470:	6093      	str	r3, [r2, #8]
 8005472:	da08      	bge.n	8005486 <__sfputc_r+0x1e>
 8005474:	6994      	ldr	r4, [r2, #24]
 8005476:	42a3      	cmp	r3, r4
 8005478:	db01      	blt.n	800547e <__sfputc_r+0x16>
 800547a:	290a      	cmp	r1, #10
 800547c:	d103      	bne.n	8005486 <__sfputc_r+0x1e>
 800547e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005482:	f7ff bd05 	b.w	8004e90 <__swbuf_r>
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	1c58      	adds	r0, r3, #1
 800548a:	6010      	str	r0, [r2, #0]
 800548c:	7019      	strb	r1, [r3, #0]
 800548e:	4608      	mov	r0, r1
 8005490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005494:	4770      	bx	lr

08005496 <__sfputs_r>:
 8005496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005498:	4606      	mov	r6, r0
 800549a:	460f      	mov	r7, r1
 800549c:	4614      	mov	r4, r2
 800549e:	18d5      	adds	r5, r2, r3
 80054a0:	42ac      	cmp	r4, r5
 80054a2:	d101      	bne.n	80054a8 <__sfputs_r+0x12>
 80054a4:	2000      	movs	r0, #0
 80054a6:	e007      	b.n	80054b8 <__sfputs_r+0x22>
 80054a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ac:	463a      	mov	r2, r7
 80054ae:	4630      	mov	r0, r6
 80054b0:	f7ff ffda 	bl	8005468 <__sfputc_r>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d1f3      	bne.n	80054a0 <__sfputs_r+0xa>
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054bc <_vfiprintf_r>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	460d      	mov	r5, r1
 80054c2:	b09d      	sub	sp, #116	; 0x74
 80054c4:	4614      	mov	r4, r2
 80054c6:	4698      	mov	r8, r3
 80054c8:	4606      	mov	r6, r0
 80054ca:	b118      	cbz	r0, 80054d4 <_vfiprintf_r+0x18>
 80054cc:	6983      	ldr	r3, [r0, #24]
 80054ce:	b90b      	cbnz	r3, 80054d4 <_vfiprintf_r+0x18>
 80054d0:	f7ff feb8 	bl	8005244 <__sinit>
 80054d4:	4b89      	ldr	r3, [pc, #548]	; (80056fc <_vfiprintf_r+0x240>)
 80054d6:	429d      	cmp	r5, r3
 80054d8:	d11b      	bne.n	8005512 <_vfiprintf_r+0x56>
 80054da:	6875      	ldr	r5, [r6, #4]
 80054dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054de:	07d9      	lsls	r1, r3, #31
 80054e0:	d405      	bmi.n	80054ee <_vfiprintf_r+0x32>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	059a      	lsls	r2, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_vfiprintf_r+0x32>
 80054e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ea:	f7ff ff49 	bl	8005380 <__retarget_lock_acquire_recursive>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	d501      	bpl.n	80054f8 <_vfiprintf_r+0x3c>
 80054f4:	692b      	ldr	r3, [r5, #16]
 80054f6:	b9eb      	cbnz	r3, 8005534 <_vfiprintf_r+0x78>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f7ff fd1a 	bl	8004f34 <__swsetup_r>
 8005500:	b1c0      	cbz	r0, 8005534 <_vfiprintf_r+0x78>
 8005502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005504:	07dc      	lsls	r4, r3, #31
 8005506:	d50e      	bpl.n	8005526 <_vfiprintf_r+0x6a>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	b01d      	add	sp, #116	; 0x74
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	4b7b      	ldr	r3, [pc, #492]	; (8005700 <_vfiprintf_r+0x244>)
 8005514:	429d      	cmp	r5, r3
 8005516:	d101      	bne.n	800551c <_vfiprintf_r+0x60>
 8005518:	68b5      	ldr	r5, [r6, #8]
 800551a:	e7df      	b.n	80054dc <_vfiprintf_r+0x20>
 800551c:	4b79      	ldr	r3, [pc, #484]	; (8005704 <_vfiprintf_r+0x248>)
 800551e:	429d      	cmp	r5, r3
 8005520:	bf08      	it	eq
 8005522:	68f5      	ldreq	r5, [r6, #12]
 8005524:	e7da      	b.n	80054dc <_vfiprintf_r+0x20>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	0598      	lsls	r0, r3, #22
 800552a:	d4ed      	bmi.n	8005508 <_vfiprintf_r+0x4c>
 800552c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552e:	f7ff ff28 	bl	8005382 <__retarget_lock_release_recursive>
 8005532:	e7e9      	b.n	8005508 <_vfiprintf_r+0x4c>
 8005534:	2300      	movs	r3, #0
 8005536:	9309      	str	r3, [sp, #36]	; 0x24
 8005538:	2320      	movs	r3, #32
 800553a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800553e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005542:	2330      	movs	r3, #48	; 0x30
 8005544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005708 <_vfiprintf_r+0x24c>
 8005548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800554c:	f04f 0901 	mov.w	r9, #1
 8005550:	4623      	mov	r3, r4
 8005552:	469a      	mov	sl, r3
 8005554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005558:	b10a      	cbz	r2, 800555e <_vfiprintf_r+0xa2>
 800555a:	2a25      	cmp	r2, #37	; 0x25
 800555c:	d1f9      	bne.n	8005552 <_vfiprintf_r+0x96>
 800555e:	ebba 0b04 	subs.w	fp, sl, r4
 8005562:	d00b      	beq.n	800557c <_vfiprintf_r+0xc0>
 8005564:	465b      	mov	r3, fp
 8005566:	4622      	mov	r2, r4
 8005568:	4629      	mov	r1, r5
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff ff93 	bl	8005496 <__sfputs_r>
 8005570:	3001      	adds	r0, #1
 8005572:	f000 80aa 	beq.w	80056ca <_vfiprintf_r+0x20e>
 8005576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005578:	445a      	add	r2, fp
 800557a:	9209      	str	r2, [sp, #36]	; 0x24
 800557c:	f89a 3000 	ldrb.w	r3, [sl]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a2 	beq.w	80056ca <_vfiprintf_r+0x20e>
 8005586:	2300      	movs	r3, #0
 8005588:	f04f 32ff 	mov.w	r2, #4294967295
 800558c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005590:	f10a 0a01 	add.w	sl, sl, #1
 8005594:	9304      	str	r3, [sp, #16]
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800559c:	931a      	str	r3, [sp, #104]	; 0x68
 800559e:	4654      	mov	r4, sl
 80055a0:	2205      	movs	r2, #5
 80055a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a6:	4858      	ldr	r0, [pc, #352]	; (8005708 <_vfiprintf_r+0x24c>)
 80055a8:	f7fa fe32 	bl	8000210 <memchr>
 80055ac:	9a04      	ldr	r2, [sp, #16]
 80055ae:	b9d8      	cbnz	r0, 80055e8 <_vfiprintf_r+0x12c>
 80055b0:	06d1      	lsls	r1, r2, #27
 80055b2:	bf44      	itt	mi
 80055b4:	2320      	movmi	r3, #32
 80055b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ba:	0713      	lsls	r3, r2, #28
 80055bc:	bf44      	itt	mi
 80055be:	232b      	movmi	r3, #43	; 0x2b
 80055c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055c4:	f89a 3000 	ldrb.w	r3, [sl]
 80055c8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ca:	d015      	beq.n	80055f8 <_vfiprintf_r+0x13c>
 80055cc:	9a07      	ldr	r2, [sp, #28]
 80055ce:	4654      	mov	r4, sl
 80055d0:	2000      	movs	r0, #0
 80055d2:	f04f 0c0a 	mov.w	ip, #10
 80055d6:	4621      	mov	r1, r4
 80055d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055dc:	3b30      	subs	r3, #48	; 0x30
 80055de:	2b09      	cmp	r3, #9
 80055e0:	d94e      	bls.n	8005680 <_vfiprintf_r+0x1c4>
 80055e2:	b1b0      	cbz	r0, 8005612 <_vfiprintf_r+0x156>
 80055e4:	9207      	str	r2, [sp, #28]
 80055e6:	e014      	b.n	8005612 <_vfiprintf_r+0x156>
 80055e8:	eba0 0308 	sub.w	r3, r0, r8
 80055ec:	fa09 f303 	lsl.w	r3, r9, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	46a2      	mov	sl, r4
 80055f6:	e7d2      	b.n	800559e <_vfiprintf_r+0xe2>
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	1d19      	adds	r1, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	9103      	str	r1, [sp, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfbb      	ittet	lt
 8005604:	425b      	neglt	r3, r3
 8005606:	f042 0202 	orrlt.w	r2, r2, #2
 800560a:	9307      	strge	r3, [sp, #28]
 800560c:	9307      	strlt	r3, [sp, #28]
 800560e:	bfb8      	it	lt
 8005610:	9204      	strlt	r2, [sp, #16]
 8005612:	7823      	ldrb	r3, [r4, #0]
 8005614:	2b2e      	cmp	r3, #46	; 0x2e
 8005616:	d10c      	bne.n	8005632 <_vfiprintf_r+0x176>
 8005618:	7863      	ldrb	r3, [r4, #1]
 800561a:	2b2a      	cmp	r3, #42	; 0x2a
 800561c:	d135      	bne.n	800568a <_vfiprintf_r+0x1ce>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	9203      	str	r2, [sp, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfb8      	it	lt
 800562a:	f04f 33ff 	movlt.w	r3, #4294967295
 800562e:	3402      	adds	r4, #2
 8005630:	9305      	str	r3, [sp, #20]
 8005632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005718 <_vfiprintf_r+0x25c>
 8005636:	7821      	ldrb	r1, [r4, #0]
 8005638:	2203      	movs	r2, #3
 800563a:	4650      	mov	r0, sl
 800563c:	f7fa fde8 	bl	8000210 <memchr>
 8005640:	b140      	cbz	r0, 8005654 <_vfiprintf_r+0x198>
 8005642:	2340      	movs	r3, #64	; 0x40
 8005644:	eba0 000a 	sub.w	r0, r0, sl
 8005648:	fa03 f000 	lsl.w	r0, r3, r0
 800564c:	9b04      	ldr	r3, [sp, #16]
 800564e:	4303      	orrs	r3, r0
 8005650:	3401      	adds	r4, #1
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005658:	482c      	ldr	r0, [pc, #176]	; (800570c <_vfiprintf_r+0x250>)
 800565a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800565e:	2206      	movs	r2, #6
 8005660:	f7fa fdd6 	bl	8000210 <memchr>
 8005664:	2800      	cmp	r0, #0
 8005666:	d03f      	beq.n	80056e8 <_vfiprintf_r+0x22c>
 8005668:	4b29      	ldr	r3, [pc, #164]	; (8005710 <_vfiprintf_r+0x254>)
 800566a:	bb1b      	cbnz	r3, 80056b4 <_vfiprintf_r+0x1f8>
 800566c:	9b03      	ldr	r3, [sp, #12]
 800566e:	3307      	adds	r3, #7
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	3308      	adds	r3, #8
 8005676:	9303      	str	r3, [sp, #12]
 8005678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567a:	443b      	add	r3, r7
 800567c:	9309      	str	r3, [sp, #36]	; 0x24
 800567e:	e767      	b.n	8005550 <_vfiprintf_r+0x94>
 8005680:	fb0c 3202 	mla	r2, ip, r2, r3
 8005684:	460c      	mov	r4, r1
 8005686:	2001      	movs	r0, #1
 8005688:	e7a5      	b.n	80055d6 <_vfiprintf_r+0x11a>
 800568a:	2300      	movs	r3, #0
 800568c:	3401      	adds	r4, #1
 800568e:	9305      	str	r3, [sp, #20]
 8005690:	4619      	mov	r1, r3
 8005692:	f04f 0c0a 	mov.w	ip, #10
 8005696:	4620      	mov	r0, r4
 8005698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800569c:	3a30      	subs	r2, #48	; 0x30
 800569e:	2a09      	cmp	r2, #9
 80056a0:	d903      	bls.n	80056aa <_vfiprintf_r+0x1ee>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0c5      	beq.n	8005632 <_vfiprintf_r+0x176>
 80056a6:	9105      	str	r1, [sp, #20]
 80056a8:	e7c3      	b.n	8005632 <_vfiprintf_r+0x176>
 80056aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ae:	4604      	mov	r4, r0
 80056b0:	2301      	movs	r3, #1
 80056b2:	e7f0      	b.n	8005696 <_vfiprintf_r+0x1da>
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	462a      	mov	r2, r5
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <_vfiprintf_r+0x258>)
 80056bc:	a904      	add	r1, sp, #16
 80056be:	4630      	mov	r0, r6
 80056c0:	f3af 8000 	nop.w
 80056c4:	4607      	mov	r7, r0
 80056c6:	1c78      	adds	r0, r7, #1
 80056c8:	d1d6      	bne.n	8005678 <_vfiprintf_r+0x1bc>
 80056ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056cc:	07d9      	lsls	r1, r3, #31
 80056ce:	d405      	bmi.n	80056dc <_vfiprintf_r+0x220>
 80056d0:	89ab      	ldrh	r3, [r5, #12]
 80056d2:	059a      	lsls	r2, r3, #22
 80056d4:	d402      	bmi.n	80056dc <_vfiprintf_r+0x220>
 80056d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d8:	f7ff fe53 	bl	8005382 <__retarget_lock_release_recursive>
 80056dc:	89ab      	ldrh	r3, [r5, #12]
 80056de:	065b      	lsls	r3, r3, #25
 80056e0:	f53f af12 	bmi.w	8005508 <_vfiprintf_r+0x4c>
 80056e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056e6:	e711      	b.n	800550c <_vfiprintf_r+0x50>
 80056e8:	ab03      	add	r3, sp, #12
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	462a      	mov	r2, r5
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <_vfiprintf_r+0x258>)
 80056f0:	a904      	add	r1, sp, #16
 80056f2:	4630      	mov	r0, r6
 80056f4:	f000 f880 	bl	80057f8 <_printf_i>
 80056f8:	e7e4      	b.n	80056c4 <_vfiprintf_r+0x208>
 80056fa:	bf00      	nop
 80056fc:	0800a340 	.word	0x0800a340
 8005700:	0800a360 	.word	0x0800a360
 8005704:	0800a320 	.word	0x0800a320
 8005708:	0800a380 	.word	0x0800a380
 800570c:	0800a38a 	.word	0x0800a38a
 8005710:	00000000 	.word	0x00000000
 8005714:	08005497 	.word	0x08005497
 8005718:	0800a386 	.word	0x0800a386

0800571c <_printf_common>:
 800571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	4616      	mov	r6, r2
 8005722:	4699      	mov	r9, r3
 8005724:	688a      	ldr	r2, [r1, #8]
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800572c:	4293      	cmp	r3, r2
 800572e:	bfb8      	it	lt
 8005730:	4613      	movlt	r3, r2
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005738:	4607      	mov	r7, r0
 800573a:	460c      	mov	r4, r1
 800573c:	b10a      	cbz	r2, 8005742 <_printf_common+0x26>
 800573e:	3301      	adds	r3, #1
 8005740:	6033      	str	r3, [r6, #0]
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	0699      	lsls	r1, r3, #26
 8005746:	bf42      	ittt	mi
 8005748:	6833      	ldrmi	r3, [r6, #0]
 800574a:	3302      	addmi	r3, #2
 800574c:	6033      	strmi	r3, [r6, #0]
 800574e:	6825      	ldr	r5, [r4, #0]
 8005750:	f015 0506 	ands.w	r5, r5, #6
 8005754:	d106      	bne.n	8005764 <_printf_common+0x48>
 8005756:	f104 0a19 	add.w	sl, r4, #25
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	6832      	ldr	r2, [r6, #0]
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	42ab      	cmp	r3, r5
 8005762:	dc26      	bgt.n	80057b2 <_printf_common+0x96>
 8005764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005768:	1e13      	subs	r3, r2, #0
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	2301      	movne	r3, #1
 8005770:	0692      	lsls	r2, r2, #26
 8005772:	d42b      	bmi.n	80057cc <_printf_common+0xb0>
 8005774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005778:	4649      	mov	r1, r9
 800577a:	4638      	mov	r0, r7
 800577c:	47c0      	blx	r8
 800577e:	3001      	adds	r0, #1
 8005780:	d01e      	beq.n	80057c0 <_printf_common+0xa4>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	68e5      	ldr	r5, [r4, #12]
 8005786:	6832      	ldr	r2, [r6, #0]
 8005788:	f003 0306 	and.w	r3, r3, #6
 800578c:	2b04      	cmp	r3, #4
 800578e:	bf08      	it	eq
 8005790:	1aad      	subeq	r5, r5, r2
 8005792:	68a3      	ldr	r3, [r4, #8]
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	bf0c      	ite	eq
 8005798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800579c:	2500      	movne	r5, #0
 800579e:	4293      	cmp	r3, r2
 80057a0:	bfc4      	itt	gt
 80057a2:	1a9b      	subgt	r3, r3, r2
 80057a4:	18ed      	addgt	r5, r5, r3
 80057a6:	2600      	movs	r6, #0
 80057a8:	341a      	adds	r4, #26
 80057aa:	42b5      	cmp	r5, r6
 80057ac:	d11a      	bne.n	80057e4 <_printf_common+0xc8>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e008      	b.n	80057c4 <_printf_common+0xa8>
 80057b2:	2301      	movs	r3, #1
 80057b4:	4652      	mov	r2, sl
 80057b6:	4649      	mov	r1, r9
 80057b8:	4638      	mov	r0, r7
 80057ba:	47c0      	blx	r8
 80057bc:	3001      	adds	r0, #1
 80057be:	d103      	bne.n	80057c8 <_printf_common+0xac>
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	3501      	adds	r5, #1
 80057ca:	e7c6      	b.n	800575a <_printf_common+0x3e>
 80057cc:	18e1      	adds	r1, r4, r3
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	2030      	movs	r0, #48	; 0x30
 80057d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d6:	4422      	add	r2, r4
 80057d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e0:	3302      	adds	r3, #2
 80057e2:	e7c7      	b.n	8005774 <_printf_common+0x58>
 80057e4:	2301      	movs	r3, #1
 80057e6:	4622      	mov	r2, r4
 80057e8:	4649      	mov	r1, r9
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d0e6      	beq.n	80057c0 <_printf_common+0xa4>
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7d9      	b.n	80057aa <_printf_common+0x8e>
	...

080057f8 <_printf_i>:
 80057f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	7e0f      	ldrb	r7, [r1, #24]
 80057fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005800:	2f78      	cmp	r7, #120	; 0x78
 8005802:	4691      	mov	r9, r2
 8005804:	4680      	mov	r8, r0
 8005806:	460c      	mov	r4, r1
 8005808:	469a      	mov	sl, r3
 800580a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800580e:	d807      	bhi.n	8005820 <_printf_i+0x28>
 8005810:	2f62      	cmp	r7, #98	; 0x62
 8005812:	d80a      	bhi.n	800582a <_printf_i+0x32>
 8005814:	2f00      	cmp	r7, #0
 8005816:	f000 80d8 	beq.w	80059ca <_printf_i+0x1d2>
 800581a:	2f58      	cmp	r7, #88	; 0x58
 800581c:	f000 80a3 	beq.w	8005966 <_printf_i+0x16e>
 8005820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005828:	e03a      	b.n	80058a0 <_printf_i+0xa8>
 800582a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582e:	2b15      	cmp	r3, #21
 8005830:	d8f6      	bhi.n	8005820 <_printf_i+0x28>
 8005832:	a101      	add	r1, pc, #4	; (adr r1, 8005838 <_printf_i+0x40>)
 8005834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005838:	08005891 	.word	0x08005891
 800583c:	080058a5 	.word	0x080058a5
 8005840:	08005821 	.word	0x08005821
 8005844:	08005821 	.word	0x08005821
 8005848:	08005821 	.word	0x08005821
 800584c:	08005821 	.word	0x08005821
 8005850:	080058a5 	.word	0x080058a5
 8005854:	08005821 	.word	0x08005821
 8005858:	08005821 	.word	0x08005821
 800585c:	08005821 	.word	0x08005821
 8005860:	08005821 	.word	0x08005821
 8005864:	080059b1 	.word	0x080059b1
 8005868:	080058d5 	.word	0x080058d5
 800586c:	08005993 	.word	0x08005993
 8005870:	08005821 	.word	0x08005821
 8005874:	08005821 	.word	0x08005821
 8005878:	080059d3 	.word	0x080059d3
 800587c:	08005821 	.word	0x08005821
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005821 	.word	0x08005821
 8005888:	08005821 	.word	0x08005821
 800588c:	0800599b 	.word	0x0800599b
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	1d1a      	adds	r2, r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	602a      	str	r2, [r5, #0]
 8005898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800589c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0a3      	b.n	80059ec <_printf_i+0x1f4>
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	6829      	ldr	r1, [r5, #0]
 80058a8:	0606      	lsls	r6, r0, #24
 80058aa:	f101 0304 	add.w	r3, r1, #4
 80058ae:	d50a      	bpl.n	80058c6 <_printf_i+0xce>
 80058b0:	680e      	ldr	r6, [r1, #0]
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	2e00      	cmp	r6, #0
 80058b6:	da03      	bge.n	80058c0 <_printf_i+0xc8>
 80058b8:	232d      	movs	r3, #45	; 0x2d
 80058ba:	4276      	negs	r6, r6
 80058bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c0:	485e      	ldr	r0, [pc, #376]	; (8005a3c <_printf_i+0x244>)
 80058c2:	230a      	movs	r3, #10
 80058c4:	e019      	b.n	80058fa <_printf_i+0x102>
 80058c6:	680e      	ldr	r6, [r1, #0]
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ce:	bf18      	it	ne
 80058d0:	b236      	sxthne	r6, r6
 80058d2:	e7ef      	b.n	80058b4 <_printf_i+0xbc>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1d19      	adds	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	0601      	lsls	r1, r0, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xec>
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	e002      	b.n	80058ea <_printf_i+0xf2>
 80058e4:	0646      	lsls	r6, r0, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xe8>
 80058e8:	881e      	ldrh	r6, [r3, #0]
 80058ea:	4854      	ldr	r0, [pc, #336]	; (8005a3c <_printf_i+0x244>)
 80058ec:	2f6f      	cmp	r7, #111	; 0x6f
 80058ee:	bf0c      	ite	eq
 80058f0:	2308      	moveq	r3, #8
 80058f2:	230a      	movne	r3, #10
 80058f4:	2100      	movs	r1, #0
 80058f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058fa:	6865      	ldr	r5, [r4, #4]
 80058fc:	60a5      	str	r5, [r4, #8]
 80058fe:	2d00      	cmp	r5, #0
 8005900:	bfa2      	ittt	ge
 8005902:	6821      	ldrge	r1, [r4, #0]
 8005904:	f021 0104 	bicge.w	r1, r1, #4
 8005908:	6021      	strge	r1, [r4, #0]
 800590a:	b90e      	cbnz	r6, 8005910 <_printf_i+0x118>
 800590c:	2d00      	cmp	r5, #0
 800590e:	d04d      	beq.n	80059ac <_printf_i+0x1b4>
 8005910:	4615      	mov	r5, r2
 8005912:	fbb6 f1f3 	udiv	r1, r6, r3
 8005916:	fb03 6711 	mls	r7, r3, r1, r6
 800591a:	5dc7      	ldrb	r7, [r0, r7]
 800591c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005920:	4637      	mov	r7, r6
 8005922:	42bb      	cmp	r3, r7
 8005924:	460e      	mov	r6, r1
 8005926:	d9f4      	bls.n	8005912 <_printf_i+0x11a>
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10b      	bne.n	8005944 <_printf_i+0x14c>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07de      	lsls	r6, r3, #31
 8005930:	d508      	bpl.n	8005944 <_printf_i+0x14c>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6861      	ldr	r1, [r4, #4]
 8005936:	4299      	cmp	r1, r3
 8005938:	bfde      	ittt	le
 800593a:	2330      	movle	r3, #48	; 0x30
 800593c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005940:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005944:	1b52      	subs	r2, r2, r5
 8005946:	6122      	str	r2, [r4, #16]
 8005948:	f8cd a000 	str.w	sl, [sp]
 800594c:	464b      	mov	r3, r9
 800594e:	aa03      	add	r2, sp, #12
 8005950:	4621      	mov	r1, r4
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fee2 	bl	800571c <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	d14c      	bne.n	80059f6 <_printf_i+0x1fe>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	b004      	add	sp, #16
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	4835      	ldr	r0, [pc, #212]	; (8005a3c <_printf_i+0x244>)
 8005968:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800596c:	6829      	ldr	r1, [r5, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f851 6b04 	ldr.w	r6, [r1], #4
 8005974:	6029      	str	r1, [r5, #0]
 8005976:	061d      	lsls	r5, r3, #24
 8005978:	d514      	bpl.n	80059a4 <_printf_i+0x1ac>
 800597a:	07df      	lsls	r7, r3, #31
 800597c:	bf44      	itt	mi
 800597e:	f043 0320 	orrmi.w	r3, r3, #32
 8005982:	6023      	strmi	r3, [r4, #0]
 8005984:	b91e      	cbnz	r6, 800598e <_printf_i+0x196>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	f023 0320 	bic.w	r3, r3, #32
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	2310      	movs	r3, #16
 8005990:	e7b0      	b.n	80058f4 <_printf_i+0xfc>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f043 0320 	orr.w	r3, r3, #32
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	2378      	movs	r3, #120	; 0x78
 800599c:	4828      	ldr	r0, [pc, #160]	; (8005a40 <_printf_i+0x248>)
 800599e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059a2:	e7e3      	b.n	800596c <_printf_i+0x174>
 80059a4:	0659      	lsls	r1, r3, #25
 80059a6:	bf48      	it	mi
 80059a8:	b2b6      	uxthmi	r6, r6
 80059aa:	e7e6      	b.n	800597a <_printf_i+0x182>
 80059ac:	4615      	mov	r5, r2
 80059ae:	e7bb      	b.n	8005928 <_printf_i+0x130>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	6826      	ldr	r6, [r4, #0]
 80059b4:	6961      	ldr	r1, [r4, #20]
 80059b6:	1d18      	adds	r0, r3, #4
 80059b8:	6028      	str	r0, [r5, #0]
 80059ba:	0635      	lsls	r5, r6, #24
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	d501      	bpl.n	80059c4 <_printf_i+0x1cc>
 80059c0:	6019      	str	r1, [r3, #0]
 80059c2:	e002      	b.n	80059ca <_printf_i+0x1d2>
 80059c4:	0670      	lsls	r0, r6, #25
 80059c6:	d5fb      	bpl.n	80059c0 <_printf_i+0x1c8>
 80059c8:	8019      	strh	r1, [r3, #0]
 80059ca:	2300      	movs	r3, #0
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	4615      	mov	r5, r2
 80059d0:	e7ba      	b.n	8005948 <_printf_i+0x150>
 80059d2:	682b      	ldr	r3, [r5, #0]
 80059d4:	1d1a      	adds	r2, r3, #4
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	6862      	ldr	r2, [r4, #4]
 80059dc:	2100      	movs	r1, #0
 80059de:	4628      	mov	r0, r5
 80059e0:	f7fa fc16 	bl	8000210 <memchr>
 80059e4:	b108      	cbz	r0, 80059ea <_printf_i+0x1f2>
 80059e6:	1b40      	subs	r0, r0, r5
 80059e8:	6060      	str	r0, [r4, #4]
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	6123      	str	r3, [r4, #16]
 80059ee:	2300      	movs	r3, #0
 80059f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f4:	e7a8      	b.n	8005948 <_printf_i+0x150>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	462a      	mov	r2, r5
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d0ab      	beq.n	800595c <_printf_i+0x164>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	079b      	lsls	r3, r3, #30
 8005a08:	d413      	bmi.n	8005a32 <_printf_i+0x23a>
 8005a0a:	68e0      	ldr	r0, [r4, #12]
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	4298      	cmp	r0, r3
 8005a10:	bfb8      	it	lt
 8005a12:	4618      	movlt	r0, r3
 8005a14:	e7a4      	b.n	8005960 <_printf_i+0x168>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4632      	mov	r2, r6
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	47d0      	blx	sl
 8005a20:	3001      	adds	r0, #1
 8005a22:	d09b      	beq.n	800595c <_printf_i+0x164>
 8005a24:	3501      	adds	r5, #1
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	9903      	ldr	r1, [sp, #12]
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dcf2      	bgt.n	8005a16 <_printf_i+0x21e>
 8005a30:	e7eb      	b.n	8005a0a <_printf_i+0x212>
 8005a32:	2500      	movs	r5, #0
 8005a34:	f104 0619 	add.w	r6, r4, #25
 8005a38:	e7f5      	b.n	8005a26 <_printf_i+0x22e>
 8005a3a:	bf00      	nop
 8005a3c:	0800a391 	.word	0x0800a391
 8005a40:	0800a3a2 	.word	0x0800a3a2

08005a44 <__sread>:
 8005a44:	b510      	push	{r4, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	f000 f894 	bl	8005b78 <_read_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	bfab      	itete	ge
 8005a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a56:	89a3      	ldrhlt	r3, [r4, #12]
 8005a58:	181b      	addge	r3, r3, r0
 8005a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a5e:	bfac      	ite	ge
 8005a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a62:	81a3      	strhlt	r3, [r4, #12]
 8005a64:	bd10      	pop	{r4, pc}

08005a66 <__swrite>:
 8005a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	05db      	lsls	r3, r3, #23
 8005a70:	4605      	mov	r5, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	4616      	mov	r6, r2
 8005a76:	d505      	bpl.n	8005a84 <__swrite+0x1e>
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f000 f868 	bl	8005b54 <_lseek_r>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	4632      	mov	r2, r6
 8005a92:	463b      	mov	r3, r7
 8005a94:	4628      	mov	r0, r5
 8005a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	f000 b817 	b.w	8005acc <_write_r>

08005a9e <__sseek>:
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa6:	f000 f855 	bl	8005b54 <_lseek_r>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	bf15      	itete	ne
 8005ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aba:	81a3      	strheq	r3, [r4, #12]
 8005abc:	bf18      	it	ne
 8005abe:	81a3      	strhne	r3, [r4, #12]
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <__sclose>:
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 b813 	b.w	8005af0 <_close_r>
	...

08005acc <_write_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d07      	ldr	r5, [pc, #28]	; (8005aec <_write_r+0x20>)
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	602a      	str	r2, [r5, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f7fa ff63 	bl	80009a6 <_write>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_write_r+0x1e>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_write_r+0x1e>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	200001c0 	.word	0x200001c0

08005af0 <_close_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_close_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fa ff6f 	bl	80009de <_close>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_close_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_close_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	200001c0 	.word	0x200001c0

08005b10 <_fstat_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	; (8005b30 <_fstat_r+0x20>)
 8005b14:	2300      	movs	r3, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	f7fa ff6a 	bl	80009f6 <_fstat>
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d102      	bne.n	8005b2c <_fstat_r+0x1c>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	b103      	cbz	r3, 8005b2c <_fstat_r+0x1c>
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	200001c0 	.word	0x200001c0

08005b34 <_isatty_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	; (8005b50 <_isatty_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fa ff69 	bl	8000a16 <_isatty>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_isatty_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_isatty_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	200001c0 	.word	0x200001c0

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d07      	ldr	r5, [pc, #28]	; (8005b74 <_lseek_r+0x20>)
 8005b58:	4604      	mov	r4, r0
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fa ff62 	bl	8000a2c <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200001c0 	.word	0x200001c0

08005b78 <_read_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d07      	ldr	r5, [pc, #28]	; (8005b98 <_read_r+0x20>)
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fa fef0 	bl	800096c <_read>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_read_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_read_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200001c0 	.word	0x200001c0

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
