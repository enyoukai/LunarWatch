
LunarWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002098  08008560  08008560  00018560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f8  0800a5f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a600  0800a600  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  0800a680  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800a680  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dc6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8a  00000000  00000000  00033e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025543  00000000  00000000  00038eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017901  00000000  00000000  0005e3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0dd  00000000  00000000  00075cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005624  00000000  00000000  00150e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008544 	.word	0x08008544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08008544 	.word	0x08008544

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b974 	b.w	8000f8c <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9d08      	ldr	r5, [sp, #32]
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	468e      	mov	lr, r1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d14d      	bne.n	8000d66 <__udivmoddi4+0xaa>
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	4694      	mov	ip, r2
 8000cce:	d969      	bls.n	8000da4 <__udivmoddi4+0xe8>
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	b152      	cbz	r2, 8000cec <__udivmoddi4+0x30>
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	f1c2 0120 	rsb	r1, r2, #32
 8000cde:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cea:	4094      	lsls	r4, r2
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	0c21      	lsrs	r1, r4, #16
 8000cf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf6:	fa1f f78c 	uxth.w	r7, ip
 8000cfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d02:	fb06 f107 	mul.w	r1, r6, r7
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d90a      	bls.n	8000d20 <__udivmoddi4+0x64>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d12:	f080 811f 	bcs.w	8000f54 <__udivmoddi4+0x298>
 8000d16:	4299      	cmp	r1, r3
 8000d18:	f240 811c 	bls.w	8000f54 <__udivmoddi4+0x298>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb00 f707 	mul.w	r7, r0, r7
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x92>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	f080 810a 	bcs.w	8000f58 <__udivmoddi4+0x29c>
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	f240 8107 	bls.w	8000f58 <__udivmoddi4+0x29c>
 8000d4a:	4464      	add	r4, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	1be4      	subs	r4, r4, r7
 8000d54:	2600      	movs	r6, #0
 8000d56:	b11d      	cbz	r5, 8000d60 <__udivmoddi4+0xa4>
 8000d58:	40d4      	lsrs	r4, r2
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d909      	bls.n	8000d7e <__udivmoddi4+0xc2>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	f000 80ef 	beq.w	8000f4e <__udivmoddi4+0x292>
 8000d70:	2600      	movs	r6, #0
 8000d72:	e9c5 0100 	strd	r0, r1, [r5]
 8000d76:	4630      	mov	r0, r6
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	fab3 f683 	clz	r6, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d14a      	bne.n	8000e1c <__udivmoddi4+0x160>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xd4>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 80f9 	bhi.w	8000f82 <__udivmoddi4+0x2c6>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb61 0303 	sbc.w	r3, r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	469e      	mov	lr, r3
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e0      	beq.n	8000d60 <__udivmoddi4+0xa4>
 8000d9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000da2:	e7dd      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000da4:	b902      	cbnz	r2, 8000da8 <__udivmoddi4+0xec>
 8000da6:	deff      	udf	#255	; 0xff
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	f040 8092 	bne.w	8000ed6 <__udivmoddi4+0x21a>
 8000db2:	eba1 010c 	sub.w	r1, r1, ip
 8000db6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	0c20      	lsrs	r0, r4, #16
 8000dc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dce:	fb0e f003 	mul.w	r0, lr, r3
 8000dd2:	4288      	cmp	r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x12c>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x12a>
 8000de0:	4288      	cmp	r0, r1
 8000de2:	f200 80cb 	bhi.w	8000f7c <__udivmoddi4+0x2c0>
 8000de6:	4643      	mov	r3, r8
 8000de8:	1a09      	subs	r1, r1, r0
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df0:	fb07 1110 	mls	r1, r7, r0, r1
 8000df4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x156>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d202      	bcs.n	8000e10 <__udivmoddi4+0x154>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f200 80bb 	bhi.w	8000f86 <__udivmoddi4+0x2ca>
 8000e10:	4608      	mov	r0, r1
 8000e12:	eba4 040e 	sub.w	r4, r4, lr
 8000e16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e1a:	e79c      	b.n	8000d56 <__udivmoddi4+0x9a>
 8000e1c:	f1c6 0720 	rsb	r7, r6, #32
 8000e20:	40b3      	lsls	r3, r6
 8000e22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e32:	431c      	orrs	r4, r3
 8000e34:	40f9      	lsrs	r1, r7
 8000e36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e42:	0c20      	lsrs	r0, r4, #16
 8000e44:	fa1f fe8c 	uxth.w	lr, ip
 8000e48:	fb09 1118 	mls	r1, r9, r8, r1
 8000e4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e50:	fb08 f00e 	mul.w	r0, r8, lr
 8000e54:	4288      	cmp	r0, r1
 8000e56:	fa02 f206 	lsl.w	r2, r2, r6
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x1b8>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e64:	f080 8088 	bcs.w	8000f78 <__udivmoddi4+0x2bc>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f240 8085 	bls.w	8000f78 <__udivmoddi4+0x2bc>
 8000e6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	1a09      	subs	r1, r1, r0
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e88:	458e      	cmp	lr, r1
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x1e2>
 8000e8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e94:	d26c      	bcs.n	8000f70 <__udivmoddi4+0x2b4>
 8000e96:	458e      	cmp	lr, r1
 8000e98:	d96a      	bls.n	8000f70 <__udivmoddi4+0x2b4>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	4461      	add	r1, ip
 8000e9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ea2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea6:	eba1 010e 	sub.w	r1, r1, lr
 8000eaa:	42a1      	cmp	r1, r4
 8000eac:	46c8      	mov	r8, r9
 8000eae:	46a6      	mov	lr, r4
 8000eb0:	d356      	bcc.n	8000f60 <__udivmoddi4+0x2a4>
 8000eb2:	d053      	beq.n	8000f5c <__udivmoddi4+0x2a0>
 8000eb4:	b15d      	cbz	r5, 8000ece <__udivmoddi4+0x212>
 8000eb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eba:	eb61 010e 	sbc.w	r1, r1, lr
 8000ebe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ec2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec6:	40f1      	lsrs	r1, r6
 8000ec8:	431f      	orrs	r7, r3
 8000eca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ece:	2600      	movs	r6, #0
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	f1c2 0320 	rsb	r3, r2, #32
 8000eda:	40d8      	lsrs	r0, r3
 8000edc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	4301      	orrs	r1, r0
 8000ee8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef8:	0c0b      	lsrs	r3, r1, #16
 8000efa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efe:	fb00 f60e 	mul.w	r6, r0, lr
 8000f02:	429e      	cmp	r6, r3
 8000f04:	fa04 f402 	lsl.w	r4, r4, r2
 8000f08:	d908      	bls.n	8000f1c <__udivmoddi4+0x260>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f12:	d22f      	bcs.n	8000f74 <__udivmoddi4+0x2b8>
 8000f14:	429e      	cmp	r6, r3
 8000f16:	d92d      	bls.n	8000f74 <__udivmoddi4+0x2b8>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4463      	add	r3, ip
 8000f1c:	1b9b      	subs	r3, r3, r6
 8000f1e:	b289      	uxth	r1, r1
 8000f20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f24:	fb07 3316 	mls	r3, r7, r6, r3
 8000f28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x28a>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f3c:	d216      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d914      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f42:	3e02      	subs	r6, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f4c:	e738      	b.n	8000dc0 <__udivmoddi4+0x104>
 8000f4e:	462e      	mov	r6, r5
 8000f50:	4628      	mov	r0, r5
 8000f52:	e705      	b.n	8000d60 <__udivmoddi4+0xa4>
 8000f54:	4606      	mov	r6, r0
 8000f56:	e6e3      	b.n	8000d20 <__udivmoddi4+0x64>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6f8      	b.n	8000d4e <__udivmoddi4+0x92>
 8000f5c:	454b      	cmp	r3, r9
 8000f5e:	d2a9      	bcs.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f60:	ebb9 0802 	subs.w	r8, r9, r2
 8000f64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f68:	3801      	subs	r0, #1
 8000f6a:	e7a3      	b.n	8000eb4 <__udivmoddi4+0x1f8>
 8000f6c:	4646      	mov	r6, r8
 8000f6e:	e7ea      	b.n	8000f46 <__udivmoddi4+0x28a>
 8000f70:	4620      	mov	r0, r4
 8000f72:	e794      	b.n	8000e9e <__udivmoddi4+0x1e2>
 8000f74:	4640      	mov	r0, r8
 8000f76:	e7d1      	b.n	8000f1c <__udivmoddi4+0x260>
 8000f78:	46d0      	mov	r8, sl
 8000f7a:	e77b      	b.n	8000e74 <__udivmoddi4+0x1b8>
 8000f7c:	3b02      	subs	r3, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	e732      	b.n	8000de8 <__udivmoddi4+0x12c>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e709      	b.n	8000d9a <__udivmoddi4+0xde>
 8000f86:	4464      	add	r4, ip
 8000f88:	3802      	subs	r0, #2
 8000f8a:	e742      	b.n	8000e12 <__udivmoddi4+0x156>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a37      	ldr	r2, [pc, #220]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a30      	ldr	r2, [pc, #192]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <MX_GPIO_Init+0xfc>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <MX_GPIO_Init+0xfc>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xfc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_GPIO_Init+0xfc>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_GPIO_Init+0xfc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7140 	mov.w	r1, #768	; 0x300
 800101c:	481c      	ldr	r0, [pc, #112]	; (8001090 <MX_GPIO_Init+0x100>)
 800101e:	f002 f899 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	481b      	ldr	r0, [pc, #108]	; (8001094 <MX_GPIO_Init+0x104>)
 8001028:	f002 f894 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001032:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <MX_GPIO_Init+0x108>)
 8001044:	f001 fef2 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 8001048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <MX_GPIO_Init+0x100>)
 8001062:	f001 fee3 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001066:	2340      	movs	r3, #64	; 0x40
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0x104>)
 800107e:	f001 fed5 	bl	8002e2c <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800

0800109c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	2201      	movs	r2, #1
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <__io_putchar+0x20>)
 80010ae:	f004 fc24 	bl	80058fa <HAL_UART_Transmit>
  return ch;
 80010b2:	687b      	ldr	r3, [r7, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000016c 	.word	0x2000016c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b091      	sub	sp, #68	; 0x44
 80010c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f001 fd35 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f9d7 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f7ff ff5f 	bl	8000f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d2:	f000 fd51 	bl	8001b78 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010d6:	f000 fc99 	bl	8001a0c <MX_TIM3_Init>
  MX_SPI1_Init();
 80010da:	f000 fb11 	bl	8001700 <MX_SPI1_Init>
  MX_RTC_Init();
 80010de:	f000 fa8b 	bl	80015f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  LCDInit();
 80010e2:	f000 fa3d 	bl	8001560 <LCDInit>
  LCDBootScreen();
 80010e6:	f000 fa63 	bl	80015b0 <LCDBootScreen>

  Paint_Clear(WHITE);
 80010ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010ee:	f000 ff2d 	bl	8001f4c <Paint_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Paint_Clear(WHITE);
 80010f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010f6:	f000 ff29 	bl	8001f4c <Paint_Clear>

	RTC_DateTypeDef getDate = {0};
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef getTime = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	48cd      	ldr	r0, [pc, #820]	; (8001448 <main+0x388>)
 8001114:	f003 fa5a 	bl	80045cc <HAL_RTC_GetTime>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <main+0x62>
	{
	Error_Handler();
 800111e:	f000 fa65 	bl	80015ec <Error_Handler>
	}
	if (HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN) != HAL_OK)
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	48c7      	ldr	r0, [pc, #796]	; (8001448 <main+0x388>)
 800112c:	f003 fb30 	bl	8004790 <HAL_RTC_GetDate>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <main+0x7a>
	{
	Error_Handler();
 8001136:	f000 fa59 	bl	80015ec <Error_Handler>
	}
	printf("%02d:%02d:%02d\n", getTime.Hours, getTime.Minutes, getTime.Seconds);
 800113a:	783b      	ldrb	r3, [r7, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	461a      	mov	r2, r3
 8001142:	78bb      	ldrb	r3, [r7, #2]
 8001144:	48c1      	ldr	r0, [pc, #772]	; (800144c <main+0x38c>)
 8001146:	f005 f86d 	bl	8006224 <iprintf>
	printf("%02d/%02d/%02d\n", getDate.Date, getDate.Month, getDate.Year);
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	4619      	mov	r1, r3
 800114e:	7d7b      	ldrb	r3, [r7, #21]
 8001150:	461a      	mov	r2, r3
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	48be      	ldr	r0, [pc, #760]	; (8001450 <main+0x390>)
 8001156:	f005 f865 	bl	8006224 <iprintf>

	sprintf(messageBuffer, "%d:%02d", getTime.Hours, getTime.Minutes);
 800115a:	783b      	ldrb	r3, [r7, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	787b      	ldrb	r3, [r7, #1]
 8001160:	49bc      	ldr	r1, [pc, #752]	; (8001454 <main+0x394>)
 8001162:	48bd      	ldr	r0, [pc, #756]	; (8001458 <main+0x398>)
 8001164:	f005 f8fc 	bl	8006360 <siprintf>

	float secondsDeg = (360 * (float)getTime.Seconds) / 60;
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001172:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800145c <main+0x39c>
 8001176:	ee27 7a87 	vmul.f32	s14, s15, s14
 800117a:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8001460 <main+0x3a0>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float secondsRad = degToRad(secondsDeg);
 8001186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001188:	f7ff f9f6 	bl	8000578 <__aeabi_f2d>
 800118c:	a3ac      	add	r3, pc, #688	; (adr r3, 8001440 <main+0x380>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff fa49 	bl	8000628 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4bb0      	ldr	r3, [pc, #704]	; (8001464 <main+0x3a4>)
 80011a4:	f7ff fb6a 	bl	800087c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd1c 	bl	8000bec <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28

	float minutesDeg = (360 * (float)getTime.Minutes) / 60;
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c2:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800145c <main+0x39c>
 80011c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011ca:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8001460 <main+0x3a0>
 80011ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float minutesRad = degToRad(minutesDeg);
 80011d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d8:	f7ff f9ce 	bl	8000578 <__aeabi_f2d>
 80011dc:	a398      	add	r3, pc, #608	; (adr r3, 8001440 <main+0x380>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa21 	bl	8000628 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b9c      	ldr	r3, [pc, #624]	; (8001464 <main+0x3a4>)
 80011f4:	f7ff fb42 	bl	800087c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcf4 	bl	8000bec <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	623b      	str	r3, [r7, #32]

	float hoursDeg = (360 * (float)getTime.Hours) / 24; // military time
 8001208:	783b      	ldrb	r3, [r7, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001212:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800145c <main+0x39c>
 8001216:	ee27 7a87 	vmul.f32	s14, s15, s14
 800121a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	edc7 7a07 	vstr	s15, [r7, #28]
	float hoursRad = degToRad(hoursDeg);
 8001226:	69f8      	ldr	r0, [r7, #28]
 8001228:	f7ff f9a6 	bl	8000578 <__aeabi_f2d>
 800122c:	a384      	add	r3, pc, #528	; (adr r3, 8001440 <main+0x380>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f9f9 	bl	8000628 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <main+0x3a4>)
 8001244:	f7ff fb1a 	bl	800087c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fccc 	bl	8000bec <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]

	Paint_DrawLine  (120, 120, 120 + HOURS_RADIUS * sin(hoursRad), 120 - HOURS_RADIUS * cos(hoursRad),BLACK ,DOT_PIXEL_3X3,LINE_STYLE_SOLID); // hour
 8001258:	69b8      	ldr	r0, [r7, #24]
 800125a:	f7ff f98d 	bl	8000578 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f006 f923 	bl	80074b0 <sin>
 800126a:	ec51 0b10 	vmov	r0, r1, d0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <main+0x3a8>)
 8001274:	f7ff f9d8 	bl	8000628 <__aeabi_dmul>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b79      	ldr	r3, [pc, #484]	; (800146c <main+0x3ac>)
 8001286:	f7ff f819 	bl	80002bc <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc8b 	bl	8000bac <__aeabi_d2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	b29c      	uxth	r4, r3
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f7ff f96c 	bl	8000578 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b10 	vmov	d0, r2, r3
 80012a8:	f006 f8ae 	bl	8007408 <cos>
 80012ac:	ec51 0b10 	vmov	r0, r1, d0
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <main+0x3a8>)
 80012b6:	f7ff f9b7 	bl	8000628 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f04f 0000 	mov.w	r0, #0
 80012c2:	496a      	ldr	r1, [pc, #424]	; (800146c <main+0x3ac>)
 80012c4:	f7fe fff8 	bl	80002b8 <__aeabi_dsub>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc6c 	bl	8000bac <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	9202      	str	r2, [sp, #8]
 80012dc:	2203      	movs	r2, #3
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	4622      	mov	r2, r4
 80012e6:	2178      	movs	r1, #120	; 0x78
 80012e8:	2078      	movs	r0, #120	; 0x78
 80012ea:	f000 fedb 	bl	80020a4 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120 + MINUTES_RADIUS * sin(minutesRad), 120 - MINUTES_RADIUS * cos(minutesRad),BLACK ,DOT_PIXEL_3X3,LINE_STYLE_SOLID); // minute
 80012ee:	6a38      	ldr	r0, [r7, #32]
 80012f0:	f7ff f942 	bl	8000578 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	ec43 2b10 	vmov	d0, r2, r3
 80012fc:	f006 f8d8 	bl	80074b0 <sin>
 8001300:	ec51 0b10 	vmov	r0, r1, d0
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <main+0x3b0>)
 800130a:	f7ff f98d 	bl	8000628 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <main+0x3ac>)
 800131c:	f7fe ffce 	bl	80002bc <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc40 	bl	8000bac <__aeabi_d2uiz>
 800132c:	4603      	mov	r3, r0
 800132e:	b29c      	uxth	r4, r3
 8001330:	6a38      	ldr	r0, [r7, #32]
 8001332:	f7ff f921 	bl	8000578 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	ec43 2b10 	vmov	d0, r2, r3
 800133e:	f006 f863 	bl	8007408 <cos>
 8001342:	ec51 0b10 	vmov	r0, r1, d0
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <main+0x3b0>)
 800134c:	f7ff f96c 	bl	8000628 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	f04f 0000 	mov.w	r0, #0
 8001358:	4944      	ldr	r1, [pc, #272]	; (800146c <main+0x3ac>)
 800135a:	f7fe ffad 	bl	80002b8 <__aeabi_dsub>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc21 	bl	8000bac <__aeabi_d2uiz>
 800136a:	4603      	mov	r3, r0
 800136c:	b29b      	uxth	r3, r3
 800136e:	2200      	movs	r2, #0
 8001370:	9202      	str	r2, [sp, #8]
 8001372:	2203      	movs	r2, #3
 8001374:	9201      	str	r2, [sp, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	4622      	mov	r2, r4
 800137c:	2178      	movs	r1, #120	; 0x78
 800137e:	2078      	movs	r0, #120	; 0x78
 8001380:	f000 fe90 	bl	80020a4 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120 + SECONDS_RADIUS * sin(secondsRad), 120 - SECONDS_RADIUS * cos(secondsRad),RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID); // seconds
 8001384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001386:	f7ff f8f7 	bl	8000578 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b10 	vmov	d0, r2, r3
 8001392:	f006 f88d 	bl	80074b0 <sin>
 8001396:	ec51 0b10 	vmov	r0, r1, d0
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <main+0x3b4>)
 80013a0:	f7ff f942 	bl	8000628 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <main+0x3ac>)
 80013b2:	f7fe ff83 	bl	80002bc <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbf5 	bl	8000bac <__aeabi_d2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29c      	uxth	r4, r3
 80013c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c8:	f7ff f8d6 	bl	8000578 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	ec43 2b10 	vmov	d0, r2, r3
 80013d4:	f006 f818 	bl	8007408 <cos>
 80013d8:	ec51 0b10 	vmov	r0, r1, d0
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <main+0x3b4>)
 80013e2:	f7ff f921 	bl	8000628 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	f04f 0000 	mov.w	r0, #0
 80013ee:	491f      	ldr	r1, [pc, #124]	; (800146c <main+0x3ac>)
 80013f0:	f7fe ff62 	bl	80002b8 <__aeabi_dsub>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fbd6 	bl	8000bac <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29b      	uxth	r3, r3
 8001404:	2200      	movs	r2, #0
 8001406:	9202      	str	r2, [sp, #8]
 8001408:	2202      	movs	r2, #2
 800140a:	9201      	str	r2, [sp, #4]
 800140c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	4622      	mov	r2, r4
 8001414:	2178      	movs	r1, #120	; 0x78
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 fe44 	bl	80020a4 <Paint_DrawLine>

	Paint_DrawString_EN(56, 120, messageBuffer,&Font24,  WHITE, BLUE);
 800141c:	231f      	movs	r3, #31
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <main+0x3b8>)
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <main+0x398>)
 800142a:	2178      	movs	r1, #120	; 0x78
 800142c:	2038      	movs	r0, #56	; 0x38
 800142e:	f000 ff95 	bl	800235c <Paint_DrawString_EN>

	HAL_Delay(1000);
 8001432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001436:	f001 fbef 	bl	8002c18 <HAL_Delay>
  {
 800143a:	e65a      	b.n	80010f2 <main+0x32>
 800143c:	f3af 8000 	nop.w
 8001440:	54442d18 	.word	0x54442d18
 8001444:	400921fb 	.word	0x400921fb
 8001448:	200000a8 	.word	0x200000a8
 800144c:	08008560 	.word	0x08008560
 8001450:	08008570 	.word	0x08008570
 8001454:	08008580 	.word	0x08008580
 8001458:	20000094 	.word	0x20000094
 800145c:	43b40000 	.word	0x43b40000
 8001460:	42700000 	.word	0x42700000
 8001464:	40668000 	.word	0x40668000
 8001468:	40490000 	.word	0x40490000
 800146c:	405e0000 	.word	0x405e0000
 8001470:	40518000 	.word	0x40518000
 8001474:	40568000 	.word	0x40568000
 8001478:	20000004 	.word	0x20000004

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2234      	movs	r2, #52	; 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f004 fde2 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <SystemClock_Config+0xdc>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <SystemClock_Config+0xdc>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <SystemClock_Config+0xdc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <SystemClock_Config+0xe0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <SystemClock_Config+0xe0>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <SystemClock_Config+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014dc:	230a      	movs	r3, #10
 80014de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e8:	2310      	movs	r3, #16
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f8:	2310      	movs	r3, #16
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001502:	2304      	movs	r3, #4
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150a:	2302      	movs	r3, #2
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fcac 	bl	8003e70 <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800151e:	f000 f865 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2302      	movs	r3, #2
 8001528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fe22 	bl	8003188 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800154a:	f000 f84f 	bl	80015ec <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <LCDInit>:

/* USER CODE BEGIN 4 */

void LCDInit() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	DEV_Module_Init();
 8001564:	f000 fbb6 	bl	8001cd4 <DEV_Module_Init>

	LCD_1IN28_SetBackLight(10000);
 8001568:	f242 7010 	movw	r0, #10000	; 0x2710
 800156c:	f001 fad2 	bl	8002b14 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 8001570:	2001      	movs	r0, #1
 8001572:	f001 fa33 	bl	80029dc <LCD_1IN28_Init>

	printf("Paint_NewImage\r\n");
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <LCDInit+0x40>)
 8001578:	f004 feda 	bl	8006330 <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, WHITE);
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	2200      	movs	r2, #0
 8001582:	21f0      	movs	r1, #240	; 0xf0
 8001584:	20f0      	movs	r0, #240	; 0xf0
 8001586:	f000 fbc5 	bl	8001d14 <Paint_NewImage>

	printf("Set Clear and Display Funtion\r\n");
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <LCDInit+0x44>)
 800158c:	f004 fed0 	bl	8006330 <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <LCDInit+0x48>)
 8001592:	f000 fc0b 	bl	8001dac <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <LCDInit+0x4c>)
 8001598:	f000 fc18 	bl	8001dcc <Paint_SetDisplayFuntion>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	08008588 	.word	0x08008588
 80015a4:	08008598 	.word	0x08008598
 80015a8:	08002a79 	.word	0x08002a79
 80015ac:	08002ae5 	.word	0x08002ae5

080015b0 <LCDBootScreen>:

void LCDBootScreen() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	Paint_Clear(WHITE);
 80015b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015ba:	f000 fcc7 	bl	8001f4c <Paint_Clear>
	Paint_DrawString_EN(56, 120, "LunarWatch",&Font24,  WHITE, BLUE);
 80015be:	231f      	movs	r3, #31
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <LCDBootScreen+0x34>)
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <LCDBootScreen+0x38>)
 80015cc:	2178      	movs	r1, #120	; 0x78
 80015ce:	2038      	movs	r0, #56	; 0x38
 80015d0:	f000 fec4 	bl	800235c <Paint_DrawString_EN>

	HAL_Delay(2000);
 80015d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015d8:	f001 fb1e 	bl	8002c18 <HAL_Delay>

}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000004 	.word	0x20000004
 80015e8:	080085b8 	.word	0x080085b8

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <MX_RTC_Init+0xac>)
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <MX_RTC_Init+0xb0>)
 8001614:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_RTC_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_RTC_Init+0xac>)
 800161e:	227f      	movs	r2, #127	; 0x7f
 8001620:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_RTC_Init+0xac>)
 8001624:	22ff      	movs	r2, #255	; 0xff
 8001626:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_RTC_Init+0xac>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_RTC_Init+0xac>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_RTC_Init+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163a:	481a      	ldr	r0, [pc, #104]	; (80016a4 <MX_RTC_Init+0xac>)
 800163c:	f002 feb6 	bl	80043ac <HAL_RTC_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001646:	f7ff ffd1 	bl	80015ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800164a:	2300      	movs	r3, #0
 800164c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001652:	2300      	movs	r3, #0
 8001654:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	480f      	ldr	r0, [pc, #60]	; (80016a4 <MX_RTC_Init+0xac>)
 8001666:	f002 ff17 	bl	8004498 <HAL_RTC_SetTime>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001670:	f7ff ffbc 	bl	80015ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001674:	2301      	movs	r3, #1
 8001676:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001678:	2301      	movs	r3, #1
 800167a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800167c:	2301      	movs	r3, #1
 800167e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001680:	2300      	movs	r3, #0
 8001682:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	2201      	movs	r2, #1
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_RTC_Init+0xac>)
 800168c:	f002 fffc 	bl	8004688 <HAL_RTC_SetDate>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001696:	f7ff ffa9 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000a8 	.word	0x200000a8
 80016a8:	40002800 	.word	0x40002800

080016ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09a      	sub	sp, #104	; 0x68
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	225c      	movs	r2, #92	; 0x5c
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fcc9 	bl	8006054 <memset>
  if(rtcHandle->Instance==RTC)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_RTC_MspInit+0x4c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d111      	bne.n	80016f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016cc:	2320      	movs	r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fe6e 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016e6:	f7ff ff81 	bl	80015ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RTC_MspInit+0x50>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016f0:	bf00      	nop
 80016f2:	3768      	adds	r7, #104	; 0x68
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40002800 	.word	0x40002800
 80016fc:	42470e3c 	.word	0x42470e3c

08001700 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_SPI1_Init+0x64>)
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <MX_SPI1_Init+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI1_Init+0x64>)
 800170c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_SPI1_Init+0x64>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_SPI1_Init+0x64>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI1_Init+0x64>)
 8001734:	2208      	movs	r2, #8
 8001736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI1_Init+0x64>)
 800174c:	220a      	movs	r2, #10
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_SPI1_Init+0x64>)
 8001752:	f003 f929 	bl	80049a8 <HAL_SPI_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800175c:	f7ff ff46 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200000c8 	.word	0x200000c8
 8001768:	40013000 	.word	0x40013000

0800176c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_SPI_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017c6:	23e0      	movs	r3, #224	; 0xe0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d6:	2305      	movs	r3, #5
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017e2:	f001 fb23 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40013000 	.word	0x40013000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183a:	2007      	movs	r0, #7
 800183c:	f001 fac2 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f001 f99e 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
  }

  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e009      	b.n	8001900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fbd1 	bl	800109c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf1      	blt.n	80018ec <_write+0x12>
  }
  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_close>:

int _close(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193a:	605a      	str	r2, [r3, #4]
  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f004 fb1a 	bl	8005fe4 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20020000 	.word	0x20020000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	20000120 	.word	0x20000120
 80019e4:	200001f0 	.word	0x200001f0

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a30:	4a22      	ldr	r2, [pc, #136]	; (8001abc <MX_TIM3_Init+0xb0>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a36:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001a3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a44:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a56:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a58:	f003 fa36 	bl	8004ec8 <HAL_TIM_PWM_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a62:	f7ff fdc3 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4619      	mov	r1, r3
 8001a74:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a76:	f003 fe77 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a80:	f7ff fdb4 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a84:	2360      	movs	r3, #96	; 0x60
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2204      	movs	r2, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001a9c:	f003 fb2c 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001aa6:	f7ff fda1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <MX_TIM3_Init+0xac>)
 8001aac:	f000 f82a 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000124 	.word	0x20000124
 8001abc:	40000400 	.word	0x40000400

08001ac0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10d      	bne.n	8001aee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_TIM_PWM_MspInit+0x40>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_TIM_PWM_MspInit+0x40>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_TIM_PWM_MspInit+0x40>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_TIM_MspPostInit+0x68>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d11d      	bne.n	8001b62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_TIM_MspPostInit+0x6c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_TIM_MspPostInit+0x6c>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_TIM_MspPostInit+0x6c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_TIM_MspPostInit+0x70>)
 8001b5e:	f001 f965 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020800 	.word	0x40020800

08001b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f003 fe56 	bl	8005860 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f7ff fd17 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000016c 	.word	0x2000016c
 8001bc8:	40004400 	.word	0x40004400

08001bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_UART_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12b      	bne.n	8001c46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_UART_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c26:	230c      	movs	r3, #12
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c36:	2307      	movs	r3, #7
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_UART_MspInit+0x8c>)
 8001c42:	f001 f8f3 	bl	8002e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40004400 	.word	0x40004400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c62:	490e      	ldr	r1, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c78:	4c0b      	ldr	r4, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c86:	f7ff feaf 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f004 f9b1 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff fa17 	bl	80010c0 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ca0:	0800a608 	.word	0x0800a608
  ldr r2, =_sbss
 8001ca4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ca8:	200001ec 	.word	0x200001ec

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>
	...

08001cb0 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8001cba:	1df9      	adds	r1, r7, #7
 8001cbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <DEV_SPI_WRite+0x20>)
 8001cc4:	f002 fef9 	bl	8004aba <HAL_SPI_Transmit>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200000c8 	.word	0x200000c8

08001cd4 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cde:	480a      	ldr	r0, [pc, #40]	; (8001d08 <DEV_Module_Init+0x34>)
 8001ce0:	f001 fa38 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2140      	movs	r1, #64	; 0x40
 8001ce8:	4808      	ldr	r0, [pc, #32]	; (8001d0c <DEV_Module_Init+0x38>)
 8001cea:	f001 fa33 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf4:	4804      	ldr	r0, [pc, #16]	; (8001d08 <DEV_Module_Init+0x34>)
 8001cf6:	f001 fa2d 	bl	8003154 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <DEV_Module_Init+0x3c>)
 8001cfe:	f003 f933 	bl	8004f68 <HAL_TIM_PWM_Start>
		return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	20000124 	.word	0x20000124

08001d14 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <Paint_NewImage+0x90>)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <Paint_NewImage+0x90>)
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8001d3e:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <Paint_NewImage+0x90>)
 8001d40:	883b      	ldrh	r3, [r7, #0]
 8001d42:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <Paint_NewImage+0x90>)
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <Paint_NewImage+0x90>)
 8001d4c:	88bb      	ldrh	r3, [r7, #4]
 8001d4e:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <Paint_NewImage+0x90>)
 8001d52:	8a5b      	ldrh	r3, [r3, #18]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <Paint_NewImage+0x90>)
 8001d5a:	8a9b      	ldrh	r3, [r3, #20]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4811      	ldr	r0, [pc, #68]	; (8001da8 <Paint_NewImage+0x94>)
 8001d62:	f004 fa5f 	bl	8006224 <iprintf>
   
    Paint.Rotate = Rotate;
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <Paint_NewImage+0x90>)
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <Paint_NewImage+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <Paint_NewImage+0x6a>
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	2bb4      	cmp	r3, #180	; 0xb4
 8001d7c:	d106      	bne.n	8001d8c <Paint_NewImage+0x78>
        Paint.Width = Width;
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <Paint_NewImage+0x90>)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <Paint_NewImage+0x90>)
 8001d86:	88bb      	ldrh	r3, [r7, #4]
 8001d88:	80d3      	strh	r3, [r2, #6]
 8001d8a:	e006      	b.n	8001d9a <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <Paint_NewImage+0x90>)
 8001d8e:	88bb      	ldrh	r3, [r7, #4]
 8001d90:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <Paint_NewImage+0x90>)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	80d3      	strh	r3, [r2, #6]
    }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200001b0 	.word	0x200001b0
 8001da8:	080085c4 	.word	0x080085c4

08001dac <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <Paint_SetClearFuntion+0x1c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200001cc 	.word	0x200001cc

08001dcc <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <Paint_SetDisplayFuntion+0x1c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200001c8 	.word	0x200001c8

08001dec <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
 8001df6:	460b      	mov	r3, r1
 8001df8:	80bb      	strh	r3, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e00:	889b      	ldrh	r3, [r3, #4]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d805      	bhi.n	8001e16 <Paint_SetPixel+0x2a>
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e0c:	88db      	ldrh	r3, [r3, #6]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	88ba      	ldrh	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d903      	bls.n	8001e1e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8001e16:	484b      	ldr	r0, [pc, #300]	; (8001f44 <Paint_SetPixel+0x158>)
 8001e18:	f004 fa8a 	bl	8006330 <puts>
        return;
 8001e1c:	e08c      	b.n	8001f38 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e20:	89db      	ldrh	r3, [r3, #14]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001e28:	d02d      	beq.n	8001e86 <Paint_SetPixel+0x9a>
 8001e2a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001e2e:	f300 8080 	bgt.w	8001f32 <Paint_SetPixel+0x146>
 8001e32:	2bb4      	cmp	r3, #180	; 0xb4
 8001e34:	d016      	beq.n	8001e64 <Paint_SetPixel+0x78>
 8001e36:	2bb4      	cmp	r3, #180	; 0xb4
 8001e38:	dc7b      	bgt.n	8001f32 <Paint_SetPixel+0x146>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <Paint_SetPixel+0x58>
 8001e3e:	2b5a      	cmp	r3, #90	; 0x5a
 8001e40:	d005      	beq.n	8001e4e <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8001e42:	e076      	b.n	8001f32 <Paint_SetPixel+0x146>
        X = Xpoint;
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8001e48:	88bb      	ldrh	r3, [r7, #4]
 8001e4a:	81bb      	strh	r3, [r7, #12]
        break;
 8001e4c:	e026      	b.n	8001e9c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e50:	891b      	ldrh	r3, [r3, #8]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	81bb      	strh	r3, [r7, #12]
        break;
 8001e62:	e01b      	b.n	8001e9c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e66:	891b      	ldrh	r3, [r3, #8]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8001e74:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e76:	895b      	ldrh	r3, [r3, #10]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	81bb      	strh	r3, [r7, #12]
        break;
 8001e84:	e00a      	b.n	8001e9c <Paint_SetPixel+0xb0>
        X = Ypoint;
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	81bb      	strh	r3, [r7, #12]
        break;
 8001e9a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <Paint_SetPixel+0x154>)
 8001e9e:	8a1b      	ldrh	r3, [r3, #16]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d847      	bhi.n	8001f36 <Paint_SetPixel+0x14a>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <Paint_SetPixel+0xc0>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001f03 	.word	0x08001f03
 8001eb0:	08001ebd 	.word	0x08001ebd
 8001eb4:	08001ecf 	.word	0x08001ecf
 8001eb8:	08001ee1 	.word	0x08001ee1
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <Paint_SetPixel+0x154>)
 8001ebe:	891b      	ldrh	r3, [r3, #8]
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	81fb      	strh	r3, [r7, #14]
        break;
 8001ecc:	e01a      	b.n	8001f04 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <Paint_SetPixel+0x154>)
 8001ed0:	895b      	ldrh	r3, [r3, #10]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	89bb      	ldrh	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	81bb      	strh	r3, [r7, #12]
        break;
 8001ede:	e011      	b.n	8001f04 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <Paint_SetPixel+0x154>)
 8001ee2:	891b      	ldrh	r3, [r3, #8]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	89fb      	ldrh	r3, [r7, #14]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <Paint_SetPixel+0x154>)
 8001ef2:	895b      	ldrh	r3, [r3, #10]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	89bb      	ldrh	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	81bb      	strh	r3, [r7, #12]
        break;
 8001f00:	e000      	b.n	8001f04 <Paint_SetPixel+0x118>
        break;
 8001f02:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Paint_SetPixel+0x154>)
 8001f06:	891b      	ldrh	r3, [r3, #8]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	89fa      	ldrh	r2, [r7, #14]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d805      	bhi.n	8001f1c <Paint_SetPixel+0x130>
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <Paint_SetPixel+0x154>)
 8001f12:	895b      	ldrh	r3, [r3, #10]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	89ba      	ldrh	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d903      	bls.n	8001f24 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <Paint_SetPixel+0x158>)
 8001f1e:	f004 fa07 	bl	8006330 <puts>
        return;
 8001f22:	e009      	b.n	8001f38 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <Paint_SetPixel+0x15c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	887a      	ldrh	r2, [r7, #2]
 8001f2a:	89b9      	ldrh	r1, [r7, #12]
 8001f2c:	89f8      	ldrh	r0, [r7, #14]
 8001f2e:	4798      	blx	r3
 8001f30:	e002      	b.n	8001f38 <Paint_SetPixel+0x14c>
        return;
 8001f32:	bf00      	nop
 8001f34:	e000      	b.n	8001f38 <Paint_SetPixel+0x14c>
        return;
 8001f36:	bf00      	nop
}
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001b0 	.word	0x200001b0
 8001f44:	080086c4 	.word	0x080086c4
 8001f48:	200001c8 	.word	0x200001c8

08001f4c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <Paint_Clear+0x1c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4798      	blx	r3
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200001cc 	.word	0x200001cc

08001f6c <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4623      	mov	r3, r4
 8001f7c:	80fb      	strh	r3, [r7, #6]
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80bb      	strh	r3, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
 8001f86:	4613      	mov	r3, r2
 8001f88:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <Paint_DrawPoint+0x130>)
 8001f8c:	889b      	ldrh	r3, [r3, #4]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	88fa      	ldrh	r2, [r7, #6]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d805      	bhi.n	8001fa2 <Paint_DrawPoint+0x36>
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <Paint_DrawPoint+0x130>)
 8001f98:	88db      	ldrh	r3, [r3, #6]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	88ba      	ldrh	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d903      	bls.n	8001faa <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8001fa2:	483f      	ldr	r0, [pc, #252]	; (80020a0 <Paint_DrawPoint+0x134>)
 8001fa4:	f004 f9c4 	bl	8006330 <puts>
        return;
 8001fa8:	e074      	b.n	8002094 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8001faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d144      	bne.n	800203c <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	81fb      	strh	r3, [r7, #14]
 8001fb6:	e039      	b.n	800202c <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	81bb      	strh	r3, [r7, #12]
 8001fbc:	e029      	b.n	8002012 <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	787b      	ldrb	r3, [r7, #1]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db28      	blt.n	8002020 <Paint_DrawPoint+0xb4>
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	787b      	ldrb	r3, [r7, #1]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db20      	blt.n	8002020 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001fde:	89fa      	ldrh	r2, [r7, #14]
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	787b      	ldrb	r3, [r7, #1]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b298      	uxth	r0, r3
 8001fee:	89ba      	ldrh	r2, [r7, #12]
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	787b      	ldrb	r3, [r7, #1]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	4619      	mov	r1, r3
 8002002:	f7ff fef3 	bl	8001dec <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8002006:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800200a:	b29b      	uxth	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	b29b      	uxth	r3, r3
 8002010:	81bb      	strh	r3, [r7, #12]
 8002012:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002016:	787b      	ldrb	r3, [r7, #1]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	3b01      	subs	r3, #1
 800201c:	429a      	cmp	r2, r3
 800201e:	dbce      	blt.n	8001fbe <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8002020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	81fb      	strh	r3, [r7, #14]
 800202c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	3b01      	subs	r3, #1
 8002036:	429a      	cmp	r2, r3
 8002038:	dbbe      	blt.n	8001fb8 <Paint_DrawPoint+0x4c>
 800203a:	e02b      	b.n	8002094 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800203c:	2300      	movs	r3, #0
 800203e:	81fb      	strh	r3, [r7, #14]
 8002040:	e023      	b.n	800208a <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8002042:	2300      	movs	r3, #0
 8002044:	81bb      	strh	r3, [r7, #12]
 8002046:	e015      	b.n	8002074 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8002048:	89fa      	ldrh	r2, [r7, #14]
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	4413      	add	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b298      	uxth	r0, r3
 8002054:	89ba      	ldrh	r2, [r7, #12]
 8002056:	88bb      	ldrh	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	4619      	mov	r1, r3
 8002064:	f7ff fec2 	bl	8001dec <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8002068:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800206c:	b29b      	uxth	r3, r3
 800206e:	3301      	adds	r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	81bb      	strh	r3, [r7, #12]
 8002074:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbe4      	blt.n	8002048 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800207e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002082:	b29b      	uxth	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	81fb      	strh	r3, [r7, #14]
 800208a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800208e:	787b      	ldrb	r3, [r7, #1]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbd6      	blt.n	8002042 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
 800209a:	bf00      	nop
 800209c:	200001b0 	.word	0x200001b0
 80020a0:	080086ec 	.word	0x080086ec

080020a4 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08d      	sub	sp, #52	; 0x34
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	4603      	mov	r3, r0
 80020b8:	80bb      	strh	r3, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80020c2:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <Paint_DrawLine+0x154>)
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d811      	bhi.n	80020f2 <Paint_DrawLine+0x4e>
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <Paint_DrawLine+0x154>)
 80020d0:	88db      	ldrh	r3, [r3, #6]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	88ba      	ldrh	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d80b      	bhi.n	80020f2 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <Paint_DrawLine+0x154>)
 80020dc:	889b      	ldrh	r3, [r3, #4]
 80020de:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d805      	bhi.n	80020f2 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <Paint_DrawLine+0x154>)
 80020e8:	88db      	ldrh	r3, [r3, #6]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	883a      	ldrh	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d903      	bls.n	80020fa <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80020f2:	4842      	ldr	r0, [pc, #264]	; (80021fc <Paint_DrawLine+0x158>)
 80020f4:	f004 f91c 	bl	8006330 <puts>
        return;
 80020f8:	e07b      	b.n	80021f2 <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bfb8      	it	lt
 800210c:	425b      	neglt	r3, r3
 800210e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8002110:	883a      	ldrh	r2, [r7, #0]
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	bfb8      	it	lt
 800211a:	425b      	neglt	r3, r3
 800211c:	425b      	negs	r3, r3
 800211e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	429a      	cmp	r2, r3
 8002126:	d201      	bcs.n	800212c <Paint_DrawLine+0x88>
 8002128:	2301      	movs	r3, #1
 800212a:	e001      	b.n	8002130 <Paint_DrawLine+0x8c>
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8002132:	88ba      	ldrh	r2, [r7, #4]
 8002134:	883b      	ldrh	r3, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d201      	bcs.n	800213e <Paint_DrawLine+0x9a>
 800213a:	2301      	movs	r3, #1
 800213c:	e001      	b.n	8002142 <Paint_DrawLine+0x9e>
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4413      	add	r3, r2
 800214a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8002150:	7ffb      	ldrb	r3, [r7, #31]
 8002152:	3301      	adds	r3, #1
 8002154:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8002156:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800215a:	2b01      	cmp	r3, #1
 800215c:	d118      	bne.n	8002190 <Paint_DrawLine+0xec>
 800215e:	7ffa      	ldrb	r2, [r7, #31]
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <Paint_DrawLine+0x15c>)
 8002162:	fba3 1302 	umull	r1, r3, r3, r2
 8002166:	0859      	lsrs	r1, r3, #1
 8002168:	460b      	mov	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8002176:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800217a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800217c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800217e:	2201      	movs	r2, #1
 8002180:	9200      	str	r2, [sp, #0]
 8002182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002186:	f7ff fef1 	bl	8001f6c <Paint_DrawPoint>
            Dotted_Len = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	77fb      	strb	r3, [r7, #31]
 800218e:	e008      	b.n	80021a2 <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8002190:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002194:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002196:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002198:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800219a:	2401      	movs	r4, #1
 800219c:	9400      	str	r4, [sp, #0]
 800219e:	f7ff fee5 	bl	8001f6c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dc0c      	bgt.n	80021c6 <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 80021ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d01b      	beq.n	80021ec <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4413      	add	r3, r2
 80021ba:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c2:	4413      	add	r3, r2
 80021c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbbf      	blt.n	8002150 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 80021d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021d2:	883b      	ldrh	r3, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d00b      	beq.n	80021f0 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e6:	4413      	add	r3, r2
 80021e8:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80021ea:	e7b1      	b.n	8002150 <Paint_DrawLine+0xac>
                break;
 80021ec:	bf00      	nop
 80021ee:	e000      	b.n	80021f2 <Paint_DrawLine+0x14e>
                break;
 80021f0:	bf00      	nop
        }
    }
}
 80021f2:	372c      	adds	r7, #44	; 0x2c
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	200001b0 	.word	0x200001b0
 80021fc:	0800872c 	.word	0x0800872c
 8002200:	aaaaaaab 	.word	0xaaaaaaab

08002204 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4603      	mov	r3, r0
 800220e:	81fb      	strh	r3, [r7, #14]
 8002210:	460b      	mov	r3, r1
 8002212:	81bb      	strh	r3, [r7, #12]
 8002214:	4613      	mov	r3, r2
 8002216:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8002218:	4b4e      	ldr	r3, [pc, #312]	; (8002354 <Paint_DrawChar+0x150>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	b29b      	uxth	r3, r3
 800221e:	89fa      	ldrh	r2, [r7, #14]
 8002220:	429a      	cmp	r2, r3
 8002222:	d805      	bhi.n	8002230 <Paint_DrawChar+0x2c>
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <Paint_DrawChar+0x150>)
 8002226:	88db      	ldrh	r3, [r3, #6]
 8002228:	b29b      	uxth	r3, r3
 800222a:	89ba      	ldrh	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d903      	bls.n	8002238 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8002230:	4849      	ldr	r0, [pc, #292]	; (8002358 <Paint_DrawChar+0x154>)
 8002232:	f004 f87d 	bl	8006330 <puts>
        return;
 8002236:	e089      	b.n	800234c <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	3b20      	subs	r3, #32
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	88d2      	ldrh	r2, [r2, #6]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	8892      	ldrh	r2, [r2, #4]
 8002248:	08d2      	lsrs	r2, r2, #3
 800224a:	b292      	uxth	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	8892      	ldrh	r2, [r2, #4]
 8002252:	f002 0207 	and.w	r2, r2, #7
 8002256:	b292      	uxth	r2, r2
 8002258:	2a00      	cmp	r2, #0
 800225a:	bf14      	ite	ne
 800225c:	2201      	movne	r2, #1
 800225e:	2200      	moveq	r2, #0
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440a      	add	r2, r1
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4413      	add	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002274:	2300      	movs	r3, #0
 8002276:	83fb      	strh	r3, [r7, #30]
 8002278:	e063      	b.n	8002342 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800227a:	2300      	movs	r3, #0
 800227c:	83bb      	strh	r3, [r7, #28]
 800227e:	e04e      	b.n	800231e <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002280:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	4293      	cmp	r3, r2
 8002288:	d118      	bne.n	80022bc <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	8bbb      	ldrh	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	fa42 f303 	asr.w	r3, r2, r3
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d031      	beq.n	8002306 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80022a2:	89fa      	ldrh	r2, [r7, #14]
 80022a4:	8bbb      	ldrh	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	b298      	uxth	r0, r3
 80022aa:	89ba      	ldrh	r2, [r7, #12]
 80022ac:	8bfb      	ldrh	r3, [r7, #30]
 80022ae:	4413      	add	r3, r2
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80022b4:	4619      	mov	r1, r3
 80022b6:	f7ff fd99 	bl	8001dec <Paint_SetPixel>
 80022ba:	e024      	b.n	8002306 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	8bbb      	ldrh	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	fa42 f303 	asr.w	r3, r2, r3
 80022ce:	400b      	ands	r3, r1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80022d4:	89fa      	ldrh	r2, [r7, #14]
 80022d6:	8bbb      	ldrh	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	b298      	uxth	r0, r3
 80022dc:	89ba      	ldrh	r2, [r7, #12]
 80022de:	8bfb      	ldrh	r3, [r7, #30]
 80022e0:	4413      	add	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff fd80 	bl	8001dec <Paint_SetPixel>
 80022ec:	e00b      	b.n	8002306 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80022ee:	89fa      	ldrh	r2, [r7, #14]
 80022f0:	8bbb      	ldrh	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	b298      	uxth	r0, r3
 80022f6:	89ba      	ldrh	r2, [r7, #12]
 80022f8:	8bfb      	ldrh	r3, [r7, #30]
 80022fa:	4413      	add	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002300:	4619      	mov	r1, r3
 8002302:	f7ff fd73 	bl	8001dec <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8002306:	8bbb      	ldrh	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b07      	cmp	r3, #7
 8002310:	d102      	bne.n	8002318 <Paint_DrawChar+0x114>
                ptr++;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3301      	adds	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8002318:	8bbb      	ldrh	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	83bb      	strh	r3, [r7, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	8bba      	ldrh	r2, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	d3ab      	bcc.n	8002280 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <Paint_DrawChar+0x138>
            ptr++;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3301      	adds	r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	3301      	adds	r3, #1
 8002340:	83fb      	strh	r3, [r7, #30]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	88db      	ldrh	r3, [r3, #6]
 8002346:	8bfa      	ldrh	r2, [r7, #30]
 8002348:	429a      	cmp	r2, r3
 800234a:	d396      	bcc.n	800227a <Paint_DrawChar+0x76>
    }// Write all
}
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200001b0 	.word	0x200001b0
 8002358:	080087e0 	.word	0x080087e0

0800235c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4603      	mov	r3, r0
 8002368:	81fb      	strh	r3, [r7, #14]
 800236a:	460b      	mov	r3, r1
 800236c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8002372:	89bb      	ldrh	r3, [r7, #12]
 8002374:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <Paint_DrawString_EN+0xa8>)
 8002378:	889b      	ldrh	r3, [r3, #4]
 800237a:	b29b      	uxth	r3, r3
 800237c:	89fa      	ldrh	r2, [r7, #14]
 800237e:	429a      	cmp	r2, r3
 8002380:	d805      	bhi.n	800238e <Paint_DrawString_EN+0x32>
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <Paint_DrawString_EN+0xa8>)
 8002384:	88db      	ldrh	r3, [r3, #6]
 8002386:	b29b      	uxth	r3, r3
 8002388:	89ba      	ldrh	r2, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d933      	bls.n	80023f6 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800238e:	481e      	ldr	r0, [pc, #120]	; (8002408 <Paint_DrawString_EN+0xac>)
 8002390:	f003 ffce 	bl	8006330 <puts>
        return;
 8002394:	e033      	b.n	80023fe <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	8892      	ldrh	r2, [r2, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a19      	ldr	r2, [pc, #100]	; (8002404 <Paint_DrawString_EN+0xa8>)
 80023a0:	8892      	ldrh	r2, [r2, #4]
 80023a2:	b292      	uxth	r2, r2
 80023a4:	4293      	cmp	r3, r2
 80023a6:	dd06      	ble.n	80023b6 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	88da      	ldrh	r2, [r3, #6]
 80023b0:	8abb      	ldrh	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80023b6:	8abb      	ldrh	r3, [r7, #20]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	88d2      	ldrh	r2, [r2, #6]
 80023bc:	4413      	add	r3, r2
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <Paint_DrawString_EN+0xa8>)
 80023c0:	88d2      	ldrh	r2, [r2, #6]
 80023c2:	b292      	uxth	r2, r2
 80023c4:	4293      	cmp	r3, r2
 80023c6:	dd03      	ble.n	80023d0 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80023c8:	89fb      	ldrh	r3, [r7, #14]
 80023ca:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	8ab9      	ldrh	r1, [r7, #20]
 80023d6:	8af8      	ldrh	r0, [r7, #22]
 80023d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	8c3b      	ldrh	r3, [r7, #32]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f7ff ff0f 	bl	8002204 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	889a      	ldrh	r2, [r3, #4]
 80023f0:	8afb      	ldrh	r3, [r7, #22]
 80023f2:	4413      	add	r3, r2
 80023f4:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cb      	bne.n	8002396 <Paint_DrawString_EN+0x3a>
    }
}
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200001b0 	.word	0x200001b0
 8002408:	08008820 	.word	0x08008820

0800240c <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <LCD_1IN28_Reset+0x40>)
 8002418:	f000 fe9c 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f000 fbfb 	bl	8002c18 <HAL_Delay>
    LCD_1IN28_RST_0;
 8002422:	2200      	movs	r2, #0
 8002424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <LCD_1IN28_Reset+0x40>)
 800242a:	f000 fe93 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800242e:	2064      	movs	r0, #100	; 0x64
 8002430:	f000 fbf2 	bl	8002c18 <HAL_Delay>
    LCD_1IN28_RST_1;
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <LCD_1IN28_Reset+0x40>)
 800243c:	f000 fe8a 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	f000 fbe9 	bl	8002c18 <HAL_Delay>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020000 	.word	0x40020000

08002450 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <LCD_1IN28_SendCommand+0x30>)
 8002462:	f000 fe77 	bl	8003154 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8002466:	2200      	movs	r2, #0
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <LCD_1IN28_SendCommand+0x34>)
 800246c:	f000 fe72 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc1c 	bl	8001cb0 <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400

08002488 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8002492:	2201      	movs	r2, #1
 8002494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002498:	480a      	ldr	r0, [pc, #40]	; (80024c4 <LCD_1IN28_SendData_8Bit+0x3c>)
 800249a:	f000 fe5b 	bl	8003154 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 800249e:	2200      	movs	r2, #0
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <LCD_1IN28_SendData_8Bit+0x40>)
 80024a4:	f000 fe56 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc00 	bl	8001cb0 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 80024b0:	2201      	movs	r2, #1
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <LCD_1IN28_SendData_8Bit+0x40>)
 80024b6:	f000 fe4d 	bl	8003154 <HAL_GPIO_WritePin>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400

080024cc <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 80024d6:	2201      	movs	r2, #1
 80024d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024dc:	480e      	ldr	r0, [pc, #56]	; (8002518 <LCD_1IN28_SendData_16Bit+0x4c>)
 80024de:	f000 fe39 	bl	8003154 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 80024e2:	2200      	movs	r2, #0
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <LCD_1IN28_SendData_16Bit+0x50>)
 80024e8:	f000 fe34 	bl	8003154 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fbdb 	bl	8001cb0 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fbd6 	bl	8001cb0 <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8002504:	2201      	movs	r2, #1
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <LCD_1IN28_SendData_16Bit+0x50>)
 800250a:	f000 fe23 	bl	8003154 <HAL_GPIO_WritePin>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400

08002520 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8002524:	20ef      	movs	r0, #239	; 0xef
 8002526:	f7ff ff93 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800252a:	20eb      	movs	r0, #235	; 0xeb
 800252c:	f7ff ff90 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8002530:	2014      	movs	r0, #20
 8002532:	f7ff ffa9 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8002536:	20fe      	movs	r0, #254	; 0xfe
 8002538:	f7ff ff8a 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 800253c:	20ef      	movs	r0, #239	; 0xef
 800253e:	f7ff ff87 	bl	8002450 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8002542:	20eb      	movs	r0, #235	; 0xeb
 8002544:	f7ff ff84 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8002548:	2014      	movs	r0, #20
 800254a:	f7ff ff9d 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 800254e:	2084      	movs	r0, #132	; 0x84
 8002550:	f7ff ff7e 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8002554:	2040      	movs	r0, #64	; 0x40
 8002556:	f7ff ff97 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 800255a:	2085      	movs	r0, #133	; 0x85
 800255c:	f7ff ff78 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8002560:	20ff      	movs	r0, #255	; 0xff
 8002562:	f7ff ff91 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8002566:	2086      	movs	r0, #134	; 0x86
 8002568:	f7ff ff72 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800256c:	20ff      	movs	r0, #255	; 0xff
 800256e:	f7ff ff8b 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8002572:	2087      	movs	r0, #135	; 0x87
 8002574:	f7ff ff6c 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8002578:	20ff      	movs	r0, #255	; 0xff
 800257a:	f7ff ff85 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 800257e:	2088      	movs	r0, #136	; 0x88
 8002580:	f7ff ff66 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8002584:	200a      	movs	r0, #10
 8002586:	f7ff ff7f 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 800258a:	2089      	movs	r0, #137	; 0x89
 800258c:	f7ff ff60 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8002590:	2021      	movs	r0, #33	; 0x21
 8002592:	f7ff ff79 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8002596:	208a      	movs	r0, #138	; 0x8a
 8002598:	f7ff ff5a 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff ff73 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 80025a2:	208b      	movs	r0, #139	; 0x8b
 80025a4:	f7ff ff54 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 80025a8:	2080      	movs	r0, #128	; 0x80
 80025aa:	f7ff ff6d 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 80025ae:	208c      	movs	r0, #140	; 0x8c
 80025b0:	f7ff ff4e 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7ff ff67 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 80025ba:	208d      	movs	r0, #141	; 0x8d
 80025bc:	f7ff ff48 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff ff61 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 80025c6:	208e      	movs	r0, #142	; 0x8e
 80025c8:	f7ff ff42 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80025cc:	20ff      	movs	r0, #255	; 0xff
 80025ce:	f7ff ff5b 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 80025d2:	208f      	movs	r0, #143	; 0x8f
 80025d4:	f7ff ff3c 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80025d8:	20ff      	movs	r0, #255	; 0xff
 80025da:	f7ff ff55 	bl	8002488 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80025de:	20b6      	movs	r0, #182	; 0xb6
 80025e0:	f7ff ff36 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff ff4f 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80025ea:	2020      	movs	r0, #32
 80025ec:	f7ff ff4c 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80025f0:	2036      	movs	r0, #54	; 0x36
 80025f2:	f7ff ff2d 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80025f6:	2008      	movs	r0, #8
 80025f8:	f7ff ff46 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 80025fc:	203a      	movs	r0, #58	; 0x3a
 80025fe:	f7ff ff27 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8002602:	2005      	movs	r0, #5
 8002604:	f7ff ff40 	bl	8002488 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8002608:	2090      	movs	r0, #144	; 0x90
 800260a:	f7ff ff21 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 800260e:	2008      	movs	r0, #8
 8002610:	f7ff ff3a 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8002614:	2008      	movs	r0, #8
 8002616:	f7ff ff37 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800261a:	2008      	movs	r0, #8
 800261c:	f7ff ff34 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8002620:	2008      	movs	r0, #8
 8002622:	f7ff ff31 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8002626:	20bd      	movs	r0, #189	; 0xbd
 8002628:	f7ff ff12 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 800262c:	2006      	movs	r0, #6
 800262e:	f7ff ff2b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8002632:	20bc      	movs	r0, #188	; 0xbc
 8002634:	f7ff ff0c 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff25 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 800263e:	20ff      	movs	r0, #255	; 0xff
 8002640:	f7ff ff06 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8002644:	2060      	movs	r0, #96	; 0x60
 8002646:	f7ff ff1f 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff ff1c 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8002650:	2004      	movs	r0, #4
 8002652:	f7ff ff19 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8002656:	20c3      	movs	r0, #195	; 0xc3
 8002658:	f7ff fefa 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800265c:	2013      	movs	r0, #19
 800265e:	f7ff ff13 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8002662:	20c4      	movs	r0, #196	; 0xc4
 8002664:	f7ff fef4 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8002668:	2013      	movs	r0, #19
 800266a:	f7ff ff0d 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 800266e:	20c9      	movs	r0, #201	; 0xc9
 8002670:	f7ff feee 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8002674:	2022      	movs	r0, #34	; 0x22
 8002676:	f7ff ff07 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 800267a:	20be      	movs	r0, #190	; 0xbe
 800267c:	f7ff fee8 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8002680:	2011      	movs	r0, #17
 8002682:	f7ff ff01 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8002686:	20e1      	movs	r0, #225	; 0xe1
 8002688:	f7ff fee2 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 800268c:	2010      	movs	r0, #16
 800268e:	f7ff fefb 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8002692:	200e      	movs	r0, #14
 8002694:	f7ff fef8 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8002698:	20df      	movs	r0, #223	; 0xdf
 800269a:	f7ff fed9 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800269e:	2021      	movs	r0, #33	; 0x21
 80026a0:	f7ff fef2 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 80026a4:	200c      	movs	r0, #12
 80026a6:	f7ff feef 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 80026aa:	2002      	movs	r0, #2
 80026ac:	f7ff feec 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 80026b0:	20f0      	movs	r0, #240	; 0xf0
 80026b2:	f7ff fecd 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 80026b6:	2045      	movs	r0, #69	; 0x45
 80026b8:	f7ff fee6 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80026bc:	2009      	movs	r0, #9
 80026be:	f7ff fee3 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80026c2:	2008      	movs	r0, #8
 80026c4:	f7ff fee0 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80026c8:	2008      	movs	r0, #8
 80026ca:	f7ff fedd 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80026ce:	2026      	movs	r0, #38	; 0x26
 80026d0:	f7ff feda 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80026d4:	202a      	movs	r0, #42	; 0x2a
 80026d6:	f7ff fed7 	bl	8002488 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80026da:	20f1      	movs	r0, #241	; 0xf1
 80026dc:	f7ff feb8 	bl	8002450 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80026e0:	2043      	movs	r0, #67	; 0x43
 80026e2:	f7ff fed1 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80026e6:	2070      	movs	r0, #112	; 0x70
 80026e8:	f7ff fece 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80026ec:	2072      	movs	r0, #114	; 0x72
 80026ee:	f7ff fecb 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80026f2:	2036      	movs	r0, #54	; 0x36
 80026f4:	f7ff fec8 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 80026f8:	2037      	movs	r0, #55	; 0x37
 80026fa:	f7ff fec5 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80026fe:	206f      	movs	r0, #111	; 0x6f
 8002700:	f7ff fec2 	bl	8002488 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8002704:	20f2      	movs	r0, #242	; 0xf2
 8002706:	f7ff fea3 	bl	8002450 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 800270a:	2045      	movs	r0, #69	; 0x45
 800270c:	f7ff febc 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8002710:	2009      	movs	r0, #9
 8002712:	f7ff feb9 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8002716:	2008      	movs	r0, #8
 8002718:	f7ff feb6 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 800271c:	2008      	movs	r0, #8
 800271e:	f7ff feb3 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8002722:	2026      	movs	r0, #38	; 0x26
 8002724:	f7ff feb0 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8002728:	202a      	movs	r0, #42	; 0x2a
 800272a:	f7ff fead 	bl	8002488 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 800272e:	20f3      	movs	r0, #243	; 0xf3
 8002730:	f7ff fe8e 	bl	8002450 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8002734:	2043      	movs	r0, #67	; 0x43
 8002736:	f7ff fea7 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 800273a:	2070      	movs	r0, #112	; 0x70
 800273c:	f7ff fea4 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8002740:	2072      	movs	r0, #114	; 0x72
 8002742:	f7ff fea1 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8002746:	2036      	movs	r0, #54	; 0x36
 8002748:	f7ff fe9e 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 800274c:	2037      	movs	r0, #55	; 0x37
 800274e:	f7ff fe9b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8002752:	206f      	movs	r0, #111	; 0x6f
 8002754:	f7ff fe98 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8002758:	20ed      	movs	r0, #237	; 0xed
 800275a:	f7ff fe79 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 800275e:	201b      	movs	r0, #27
 8002760:	f7ff fe92 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8002764:	200b      	movs	r0, #11
 8002766:	f7ff fe8f 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 800276a:	20ae      	movs	r0, #174	; 0xae
 800276c:	f7ff fe70 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8002770:	2077      	movs	r0, #119	; 0x77
 8002772:	f7ff fe89 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8002776:	20cd      	movs	r0, #205	; 0xcd
 8002778:	f7ff fe6a 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 800277c:	2063      	movs	r0, #99	; 0x63
 800277e:	f7ff fe83 	bl	8002488 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8002782:	2070      	movs	r0, #112	; 0x70
 8002784:	f7ff fe64 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8002788:	2007      	movs	r0, #7
 800278a:	f7ff fe7d 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800278e:	2007      	movs	r0, #7
 8002790:	f7ff fe7a 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8002794:	2004      	movs	r0, #4
 8002796:	f7ff fe77 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 800279a:	200e      	movs	r0, #14
 800279c:	f7ff fe74 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 80027a0:	200f      	movs	r0, #15
 80027a2:	f7ff fe71 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80027a6:	2009      	movs	r0, #9
 80027a8:	f7ff fe6e 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80027ac:	2007      	movs	r0, #7
 80027ae:	f7ff fe6b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80027b2:	2008      	movs	r0, #8
 80027b4:	f7ff fe68 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f7ff fe65 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 80027be:	20e8      	movs	r0, #232	; 0xe8
 80027c0:	f7ff fe46 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80027c4:	2034      	movs	r0, #52	; 0x34
 80027c6:	f7ff fe5f 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 80027ca:	2062      	movs	r0, #98	; 0x62
 80027cc:	f7ff fe40 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80027d0:	2018      	movs	r0, #24
 80027d2:	f7ff fe59 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80027d6:	200d      	movs	r0, #13
 80027d8:	f7ff fe56 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80027dc:	2071      	movs	r0, #113	; 0x71
 80027de:	f7ff fe53 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80027e2:	20ed      	movs	r0, #237	; 0xed
 80027e4:	f7ff fe50 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80027e8:	2070      	movs	r0, #112	; 0x70
 80027ea:	f7ff fe4d 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80027ee:	2070      	movs	r0, #112	; 0x70
 80027f0:	f7ff fe4a 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80027f4:	2018      	movs	r0, #24
 80027f6:	f7ff fe47 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80027fa:	200f      	movs	r0, #15
 80027fc:	f7ff fe44 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8002800:	2071      	movs	r0, #113	; 0x71
 8002802:	f7ff fe41 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8002806:	20ef      	movs	r0, #239	; 0xef
 8002808:	f7ff fe3e 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800280c:	2070      	movs	r0, #112	; 0x70
 800280e:	f7ff fe3b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8002812:	2070      	movs	r0, #112	; 0x70
 8002814:	f7ff fe38 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8002818:	2063      	movs	r0, #99	; 0x63
 800281a:	f7ff fe19 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800281e:	2018      	movs	r0, #24
 8002820:	f7ff fe32 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8002824:	2011      	movs	r0, #17
 8002826:	f7ff fe2f 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800282a:	2071      	movs	r0, #113	; 0x71
 800282c:	f7ff fe2c 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002830:	20f1      	movs	r0, #241	; 0xf1
 8002832:	f7ff fe29 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8002836:	2070      	movs	r0, #112	; 0x70
 8002838:	f7ff fe26 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800283c:	2070      	movs	r0, #112	; 0x70
 800283e:	f7ff fe23 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8002842:	2018      	movs	r0, #24
 8002844:	f7ff fe20 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8002848:	2013      	movs	r0, #19
 800284a:	f7ff fe1d 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800284e:	2071      	movs	r0, #113	; 0x71
 8002850:	f7ff fe1a 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8002854:	20f3      	movs	r0, #243	; 0xf3
 8002856:	f7ff fe17 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800285a:	2070      	movs	r0, #112	; 0x70
 800285c:	f7ff fe14 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8002860:	2070      	movs	r0, #112	; 0x70
 8002862:	f7ff fe11 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8002866:	2064      	movs	r0, #100	; 0x64
 8002868:	f7ff fdf2 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 800286c:	2028      	movs	r0, #40	; 0x28
 800286e:	f7ff fe0b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8002872:	2029      	movs	r0, #41	; 0x29
 8002874:	f7ff fe08 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002878:	20f1      	movs	r0, #241	; 0xf1
 800287a:	f7ff fe05 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800287e:	2001      	movs	r0, #1
 8002880:	f7ff fe02 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002884:	20f1      	movs	r0, #241	; 0xf1
 8002886:	f7ff fdff 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fdfc 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8002890:	2007      	movs	r0, #7
 8002892:	f7ff fdf9 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8002896:	2066      	movs	r0, #102	; 0x66
 8002898:	f7ff fdda 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 800289c:	203c      	movs	r0, #60	; 0x3c
 800289e:	f7ff fdf3 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fdf0 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 80028a8:	20cd      	movs	r0, #205	; 0xcd
 80028aa:	f7ff fded 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 80028ae:	2067      	movs	r0, #103	; 0x67
 80028b0:	f7ff fdea 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80028b4:	2045      	movs	r0, #69	; 0x45
 80028b6:	f7ff fde7 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80028ba:	2045      	movs	r0, #69	; 0x45
 80028bc:	f7ff fde4 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80028c0:	2010      	movs	r0, #16
 80028c2:	f7ff fde1 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fdde 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff fddb 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fdd8 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80028d8:	2067      	movs	r0, #103	; 0x67
 80028da:	f7ff fdb9 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7ff fdd2 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80028e4:	203c      	movs	r0, #60	; 0x3c
 80028e6:	f7ff fdcf 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7ff fdcc 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7ff fdc9 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7ff fdc6 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7ff fdc3 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8002902:	2054      	movs	r0, #84	; 0x54
 8002904:	f7ff fdc0 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8002908:	2010      	movs	r0, #16
 800290a:	f7ff fdbd 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 800290e:	2032      	movs	r0, #50	; 0x32
 8002910:	f7ff fdba 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8002914:	2098      	movs	r0, #152	; 0x98
 8002916:	f7ff fdb7 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 800291a:	2074      	movs	r0, #116	; 0x74
 800291c:	f7ff fd98 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8002920:	2010      	movs	r0, #16
 8002922:	f7ff fdb1 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8002926:	2085      	movs	r0, #133	; 0x85
 8002928:	f7ff fdae 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800292c:	2080      	movs	r0, #128	; 0x80
 800292e:	f7ff fdab 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff fda8 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff fda5 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800293e:	204e      	movs	r0, #78	; 0x4e
 8002940:	f7ff fda2 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8002944:	2000      	movs	r0, #0
 8002946:	f7ff fd9f 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 800294a:	2098      	movs	r0, #152	; 0x98
 800294c:	f7ff fd80 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8002950:	203e      	movs	r0, #62	; 0x3e
 8002952:	f7ff fd99 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8002956:	2007      	movs	r0, #7
 8002958:	f7ff fd96 	bl	8002488 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 800295c:	2035      	movs	r0, #53	; 0x35
 800295e:	f7ff fd77 	bl	8002450 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8002962:	2021      	movs	r0, #33	; 0x21
 8002964:	f7ff fd74 	bl	8002450 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8002968:	2011      	movs	r0, #17
 800296a:	f7ff fd71 	bl	8002450 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 f952 	bl	8002c18 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8002974:	2029      	movs	r0, #41	; 0x29
 8002976:	f7ff fd6b 	bl	8002450 <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 800297a:	2014      	movs	r0, #20
 800297c:	f000 f94c 	bl	8002c18 <HAL_Delay>
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <LCD_1IN28_SetAttributes+0x54>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8002994:	2308      	movs	r3, #8
 8002996:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <LCD_1IN28_SetAttributes+0x54>)
 80029a0:	22f0      	movs	r2, #240	; 0xf0
 80029a2:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <LCD_1IN28_SetAttributes+0x54>)
 80029a6:	22f0      	movs	r2, #240	; 0xf0
 80029a8:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 80029aa:	23c8      	movs	r3, #200	; 0xc8
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e007      	b.n	80029c0 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <LCD_1IN28_SetAttributes+0x54>)
 80029b2:	22f0      	movs	r2, #240	; 0xf0
 80029b4:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <LCD_1IN28_SetAttributes+0x54>)
 80029b8:	22f0      	movs	r2, #240	; 0xf0
 80029ba:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80029bc:	2368      	movs	r3, #104	; 0x68
 80029be:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80029c0:	2036      	movs	r0, #54	; 0x36
 80029c2:	f7ff fd45 	bl	8002450 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd5d 	bl	8002488 <LCD_1IN28_SendData_8Bit>
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200001d0 	.word	0x200001d0

080029dc <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80029e6:	f7ff fd11 	bl	800240c <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ffc9 	bl	8002984 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80029f2:	f7ff fd95 	bl	8002520 <LCD_1IN28_InitReg>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80029fe:	b590      	push	{r4, r7, lr}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4604      	mov	r4, r0
 8002a06:	4608      	mov	r0, r1
 8002a08:	4611      	mov	r1, r2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4623      	mov	r3, r4
 8002a0e:	80fb      	strh	r3, [r7, #6]
 8002a10:	4603      	mov	r3, r0
 8002a12:	80bb      	strh	r3, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8002a1c:	202a      	movs	r0, #42	; 0x2a
 8002a1e:	f7ff fd17 	bl	8002450 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff fd30 	bl	8002488 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fd2b 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7ff fd28 	bl	8002488 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fd23 	bl	8002488 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8002a42:	202b      	movs	r0, #43	; 0x2b
 8002a44:	f7ff fd04 	bl	8002450 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff fd1d 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 8002a4e:	88bb      	ldrh	r3, [r7, #4]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fd18 	bl	8002488 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fd15 	bl	8002488 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8002a5e:	883b      	ldrh	r3, [r7, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fd10 	bl	8002488 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8002a68:	202c      	movs	r0, #44	; 0x2c
 8002a6a:	f7ff fcf1 	bl	8002450 <LCD_1IN28_SendCommand>
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
	...

08002a78 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8002a82:	23ef      	movs	r3, #239	; 0xef
 8002a84:	22ef      	movs	r2, #239	; 0xef
 8002a86:	2100      	movs	r1, #0
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7ff ffb8 	bl	80029fe <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a94:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <LCD_1IN28_Clear+0x68>)
 8002a96:	f000 fb5d 	bl	8003154 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	81fb      	strh	r3, [r7, #14]
 8002a9e:	e017      	b.n	8002ad0 <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	81bb      	strh	r3, [r7, #12]
 8002aa4:	e00e      	b.n	8002ac4 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f8fe 	bl	8001cb0 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff f8f9 	bl	8001cb0 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8002abe:	89bb      	ldrh	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	81bb      	strh	r3, [r7, #12]
 8002ac4:	89bb      	ldrh	r3, [r7, #12]
 8002ac6:	2bef      	cmp	r3, #239	; 0xef
 8002ac8:	d9ed      	bls.n	8002aa6 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8002aca:	89fb      	ldrh	r3, [r7, #14]
 8002acc:	3301      	adds	r3, #1
 8002ace:	81fb      	strh	r3, [r7, #14]
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	2bef      	cmp	r3, #239	; 0xef
 8002ad4:	d9e4      	bls.n	8002aa0 <LCD_1IN28_Clear+0x28>
		}
	 }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
 8002aee:	460b      	mov	r3, r1
 8002af0:	80bb      	strh	r3, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8002af6:	88bb      	ldrh	r3, [r7, #4]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	88b9      	ldrh	r1, [r7, #4]
 8002afc:	88f8      	ldrh	r0, [r7, #6]
 8002afe:	f7ff ff7e 	bl	80029fe <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fce1 	bl	80024cc <LCD_1IN28_SendData_16Bit>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~10000   Duty cycle is value/10000
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <LCD_1IN28_SetBackLight+0x1c>)
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40000400 	.word	0x40000400

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 f931 	bl	8002dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7fe fe48 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f93b 	bl	8002e12 <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 f911 	bl	8002dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000010 	.word	0x20000010
 8002bd4:	2000000c 	.word	0x2000000c

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	200001d8 	.word	0x200001d8

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200001d8 	.word	0x200001d8

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000010 	.word	0x20000010

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d90:	d301      	bcc.n	8002d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00f      	b.n	8002db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <SysTick_Config+0x40>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9e:	210f      	movs	r1, #15
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	f7ff ff8e 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <SysTick_Config+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SysTick_Config+0x40>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	e000e010 	.word	0xe000e010

08002dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff47 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dec:	f7ff ff5c 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff8e 	bl	8002d18 <NVIC_EncodePriority>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5d 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffb0 	bl	8002d80 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e165      	b.n	8003114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8154 	bne.w	800310e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d005      	beq.n	8002e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d130      	bne.n	8002ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d017      	beq.n	8002f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80ae 	beq.w	800310e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_GPIO_Init+0x300>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_GPIO_Init+0x300>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b5a      	ldr	r3, [pc, #360]	; (800312c <HAL_GPIO_Init+0x300>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <HAL_GPIO_Init+0x304>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	; (8003134 <HAL_GPIO_Init+0x308>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4e      	ldr	r2, [pc, #312]	; (8003138 <HAL_GPIO_Init+0x30c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <HAL_GPIO_Init+0x310>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x212>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x314>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x318>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x20a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_GPIO_Init+0x31c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x206>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_GPIO_Init+0x320>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x202>
 800302a:	2306      	movs	r3, #6
 800302c:	e00c      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 800302e:	2307      	movs	r3, #7
 8003030:	e00a      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 8003032:	2305      	movs	r3, #5
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 8003036:	2304      	movs	r3, #4
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x21c>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x304>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b3a      	ldr	r3, [pc, #232]	; (8003150 <HAL_GPIO_Init+0x324>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a31      	ldr	r2, [pc, #196]	; (8003150 <HAL_GPIO_Init+0x324>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <HAL_GPIO_Init+0x324>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_GPIO_Init+0x324>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_GPIO_Init+0x324>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_GPIO_Init+0x324>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_GPIO_Init+0x324>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <HAL_GPIO_Init+0x324>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f ae96 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003170:	e003      	b.n	800317a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003172:	887b      	ldrh	r3, [r7, #2]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cc      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d90c      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d044      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d119      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d003      	beq.n	8003246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	2b03      	cmp	r3, #3
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e067      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7ff fcc2 	bl	8002c00 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7ff fcbe 	bl	8002c00 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e04f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d20c      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330e:	f000 fb7f 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc22 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023c00 	.word	0x40023c00
 8003344:	40023800 	.word	0x40023800
 8003348:	080088b8 	.word	0x080088b8
 800334c:	20000000 	.word	0x20000000
 8003350:	2000000c 	.word	0x2000000c

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	080088c8 	.word	0x080088c8

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	080088c8 	.word	0x080088c8

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	496c      	ldr	r1, [pc, #432]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003412:	2301      	movs	r3, #1
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003422:	4b64      	ldr	r3, [pc, #400]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003428:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	4960      	ldr	r1, [pc, #384]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d017      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003450:	4b58      	ldr	r3, [pc, #352]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4955      	ldr	r1, [pc, #340]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346e:	d101      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003470:	2301      	movs	r3, #1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800347c:	2301      	movs	r3, #1
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d017      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800348c:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800348e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003492:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	4946      	ldr	r1, [pc, #280]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d101      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 808a 	beq.w	80035de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	4a38      	ldr	r2, [pc, #224]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	; 0x40
 80034da:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f2:	f7ff fb85 	bl	8002c00 <HAL_GetTick>
 80034f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7ff fb81 	bl	8002c00 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e278      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003520:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	429a      	cmp	r2, r3
 8003534:	d028      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800354c:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d114      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800355e:	f7ff fb4f 	bl	8002c00 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7ff fb4b 	bl	8002c00 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e240      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003594:	d114      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	4902      	ldr	r1, [pc, #8]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]
 80035b0:	e00c      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000
 80035bc:	42470e40 	.word	0x42470e40
 80035c0:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a49      	ldr	r2, [pc, #292]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	4944      	ldr	r1, [pc, #272]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80035f0:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80035f2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003600:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	4937      	ldr	r1, [pc, #220]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	492e      	ldr	r1, [pc, #184]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d011      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	4926      	ldr	r1, [pc, #152]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003662:	d101      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003664:	2301      	movs	r3, #1
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003674:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	491a      	ldr	r1, [pc, #104]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d011      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	4911      	ldr	r1, [pc, #68]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b4:	d101      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80036b6:	2301      	movs	r3, #1
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d005      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c8:	f040 80ff 	bne.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036d2:	f7ff fa95 	bl	8002c00 <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d8:	e00e      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036da:	f7ff fa91 	bl	8002c00 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d907      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e188      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	424711e0 	.word	0x424711e0
 80036f4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f8:	4b7e      	ldr	r3, [pc, #504]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ea      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003720:	2b00      	cmp	r3, #0
 8003722:	d028      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d124      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800372c:	4b71      	ldr	r3, [pc, #452]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	3301      	adds	r3, #1
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800373e:	4b6d      	ldr	r3, [pc, #436]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	4961      	ldr	r1, [pc, #388]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003794:	2b00      	cmp	r3, #0
 8003796:	d035      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d130      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ba:	0f1b      	lsrs	r3, r3, #28
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	019b      	lsls	r3, r3, #6
 80037cc:	431a      	orrs	r2, r3
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	431a      	orrs	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	071b      	lsls	r3, r3, #28
 80037e4:	4943      	ldr	r1, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037ec:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f2:	f023 021f 	bic.w	r2, r3, #31
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	493d      	ldr	r1, [pc, #244]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d029      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003818:	d124      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	3301      	adds	r3, #1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800382c:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	0f1b      	lsrs	r3, r3, #28
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	019b      	lsls	r3, r3, #6
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	431a      	orrs	r2, r3
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	071b      	lsls	r3, r3, #28
 800385c:	4925      	ldr	r1, [pc, #148]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4917      	ldr	r1, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a4:	f7ff f9ac 	bl	8002c00 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ac:	f7ff f9a8 	bl	8002c00 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e09f      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 8095 	bne.w	80039fc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038d8:	f7ff f992 	bl	8002c00 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038de:	e00f      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038e0:	f7ff f98e 	bl	8002c00 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d908      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e085      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	42470068 	.word	0x42470068
 80038fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d0e8      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d127      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	431a      	orrs	r2, r3
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	3b01      	subs	r3, #1
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	4928      	ldr	r1, [pc, #160]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800396e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003972:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	3b01      	subs	r3, #1
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01d      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d118      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	0e1b      	lsrs	r3, r3, #24
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	019b      	lsls	r3, r3, #6
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	4910      	ldr	r1, [pc, #64]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d4:	f7ff f914 	bl	8002c00 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80039dc:	f7ff f910 	bl	8002c00 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e007      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fa:	d1ef      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3730      	adds	r7, #48	; 0x30
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470070 	.word	0x42470070

08003a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b0ae      	sub	sp, #184	; 0xb8
 8003a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4bcb      	ldr	r3, [pc, #812]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	f200 8206 	bhi.w	8003e50 <HAL_RCC_GetSysClockFreq+0x440>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003e51 	.word	0x08003e51
 8003a54:	08003e51 	.word	0x08003e51
 8003a58:	08003e51 	.word	0x08003e51
 8003a5c:	08003a89 	.word	0x08003a89
 8003a60:	08003e51 	.word	0x08003e51
 8003a64:	08003e51 	.word	0x08003e51
 8003a68:	08003e51 	.word	0x08003e51
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003e51 	.word	0x08003e51
 8003a74:	08003e51 	.word	0x08003e51
 8003a78:	08003e51 	.word	0x08003e51
 8003a7c:	08003c81 	.word	0x08003c81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4bb9      	ldr	r3, [pc, #740]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a86:	e1e7      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	4bb8      	ldr	r3, [pc, #736]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a8e:	e1e3      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	4bb4      	ldr	r3, [pc, #720]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9c:	4bb1      	ldr	r3, [pc, #708]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d071      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa8:	4bae      	ldr	r3, [pc, #696]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ab4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ace:	4622      	mov	r2, r4
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	0159      	lsls	r1, r3, #5
 8003adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae0:	0150      	lsls	r0, r2, #5
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	1a51      	subs	r1, r2, r1
 8003aea:	6439      	str	r1, [r7, #64]	; 0x40
 8003aec:	4629      	mov	r1, r5
 8003aee:	eb63 0301 	sbc.w	r3, r3, r1
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b00:	4649      	mov	r1, r9
 8003b02:	018b      	lsls	r3, r1, #6
 8003b04:	4641      	mov	r1, r8
 8003b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	018a      	lsls	r2, r1, #6
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1a51      	subs	r1, r2, r1
 8003b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b14:	4649      	mov	r1, r9
 8003b16:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b28:	4649      	mov	r1, r9
 8003b2a:	00cb      	lsls	r3, r1, #3
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b32:	4641      	mov	r1, r8
 8003b34:	00ca      	lsls	r2, r1, #3
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	462b      	mov	r3, r5
 8003b44:	460a      	mov	r2, r1
 8003b46:	eb42 0303 	adc.w	r3, r2, r3
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b58:	4629      	mov	r1, r5
 8003b5a:	024b      	lsls	r3, r1, #9
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b62:	4621      	mov	r1, r4
 8003b64:	024a      	lsls	r2, r1, #9
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b7c:	f7fd f886 	bl	8000c8c <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b8a:	e067      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8c:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003baa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	0159      	lsls	r1, r3, #5
 8003bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc0:	0150      	lsls	r0, r2, #5
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	1a51      	subs	r1, r2, r1
 8003bca:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bcc:	4629      	mov	r1, r5
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003be0:	4649      	mov	r1, r9
 8003be2:	018b      	lsls	r3, r1, #6
 8003be4:	4641      	mov	r1, r8
 8003be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bea:	4641      	mov	r1, r8
 8003bec:	018a      	lsls	r2, r1, #6
 8003bee:	4641      	mov	r1, r8
 8003bf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0e:	4692      	mov	sl, r2
 8003c10:	469b      	mov	fp, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	eb1a 0303 	adds.w	r3, sl, r3
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	028b      	lsls	r3, r1, #10
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c38:	4621      	mov	r1, r4
 8003c3a:	028a      	lsls	r2, r1, #10
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c44:	2200      	movs	r2, #0
 8003c46:	673b      	str	r3, [r7, #112]	; 0x70
 8003c48:	677a      	str	r2, [r7, #116]	; 0x74
 8003c4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c4e:	f7fd f81d 	bl	8000c8c <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4613      	mov	r3, r2
 8003c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c7e:	e0eb      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d06b      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cac:	2300      	movs	r3, #0
 8003cae:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	462b      	mov	r3, r5
 8003cb8:	f04f 0000 	mov.w	r0, #0
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	0159      	lsls	r1, r3, #5
 8003cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc6:	0150      	lsls	r0, r2, #5
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4621      	mov	r1, r4
 8003cce:	1a51      	subs	r1, r2, r1
 8003cd0:	61b9      	str	r1, [r7, #24]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	018b      	lsls	r3, r1, #6
 8003cea:	4651      	mov	r1, sl
 8003cec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	018a      	lsls	r2, r1, #6
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	eb63 0901 	sbc.w	r9, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d14:	4690      	mov	r8, r2
 8003d16:	4699      	mov	r9, r3
 8003d18:	4623      	mov	r3, r4
 8003d1a:	eb18 0303 	adds.w	r3, r8, r3
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	462b      	mov	r3, r5
 8003d22:	eb49 0303 	adc.w	r3, r9, r3
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d34:	4629      	mov	r1, r5
 8003d36:	024b      	lsls	r3, r1, #9
 8003d38:	4621      	mov	r1, r4
 8003d3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d3e:	4621      	mov	r1, r4
 8003d40:	024a      	lsls	r2, r1, #9
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d54:	f7fc ff9a 	bl	8000c8c <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d62:	e065      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x420>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d80:	653b      	str	r3, [r7, #80]	; 0x50
 8003d82:	2300      	movs	r3, #0
 8003d84:	657b      	str	r3, [r7, #84]	; 0x54
 8003d86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	f04f 0000 	mov.w	r0, #0
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	0159      	lsls	r1, r3, #5
 8003d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9c:	0150      	lsls	r0, r2, #5
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4641      	mov	r1, r8
 8003da4:	1a51      	subs	r1, r2, r1
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	4649      	mov	r1, r9
 8003daa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	018b      	lsls	r3, r1, #6
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	018a      	lsls	r2, r1, #6
 8003dca:	4651      	mov	r1, sl
 8003dcc:	1a54      	subs	r4, r2, r1
 8003dce:	4659      	mov	r1, fp
 8003dd0:	eb63 0501 	sbc.w	r5, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	00eb      	lsls	r3, r5, #3
 8003dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de2:	00e2      	lsls	r2, r4, #3
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	18e3      	adds	r3, r4, r3
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb45 0303 	adc.w	r3, r5, r3
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e02:	4629      	mov	r1, r5
 8003e04:	028b      	lsls	r3, r1, #10
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	028a      	lsls	r2, r1, #10
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e18:	2200      	movs	r2, #0
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e22:	f7fc ff33 	bl	8000c8c <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0f1b      	lsrs	r3, r3, #28
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	37b8      	adds	r7, #184	; 0xb8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	00f42400 	.word	0x00f42400

08003e70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e28d      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8083 	beq.w	8003f96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e90:	4b94      	ldr	r3, [pc, #592]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d019      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e9c:	4b91      	ldr	r3, [pc, #580]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ea8:	4b8e      	ldr	r3, [pc, #568]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d112      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ece:	d10b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	4b84      	ldr	r3, [pc, #528]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05b      	beq.n	8003f94 <HAL_RCC_OscConfig+0x124>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d157      	bne.n	8003f94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e25a      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x90>
 8003ef2:	4b7c      	ldr	r3, [pc, #496]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7b      	ldr	r2, [pc, #492]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e01d      	b.n	8003f3c <HAL_RCC_OscConfig+0xcc>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0xb4>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a72      	ldr	r2, [pc, #456]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0xcc>
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b6c      	ldr	r3, [pc, #432]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a6b      	ldr	r2, [pc, #428]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe fe5c 	bl	8002c00 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe fe58 	bl	8002c00 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e21f      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xdc>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fe48 	bl	8002c00 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fe fe44 	bl	8002c00 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e20b      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x104>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d06f      	beq.n	8004082 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fa2:	4b50      	ldr	r3, [pc, #320]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d017      	beq.n	8003fde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fae:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fba:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b44      	ldr	r3, [pc, #272]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x186>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1d3      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4937      	ldr	r1, [pc, #220]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e03a      	b.n	8004082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCC_OscConfig+0x278>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe fdf1 	bl	8002c00 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004022:	f7fe fded 	bl	8002c00 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1b4      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4925      	ldr	r1, [pc, #148]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_OscConfig+0x278>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe fdd0 	bl	8002c00 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004064:	f7fe fdcc 	bl	8002c00 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e193      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe fdb0 	bl	8002c00 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a4:	f7fe fdac 	bl	8002c00 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e173      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_OscConfig+0x274>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x234>
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x27c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ca:	f7fe fd99 	bl	8002c00 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	e00e      	b.n	80040f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fe fd95 	bl	8002c00 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e15c      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	42470000 	.word	0x42470000
 80040ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ea      	bne.n	80040d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b83      	ldr	r3, [pc, #524]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	4a7e      	ldr	r2, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004128:	6413      	str	r3, [r2, #64]	; 0x40
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b79      	ldr	r3, [pc, #484]	; (8004320 <HAL_RCC_OscConfig+0x4b0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCC_OscConfig+0x4b0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x4b0>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fe fd55 	bl	8002c00 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fe fd51 	bl	8002c00 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e118      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <HAL_RCC_OscConfig+0x4b0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x31e>
 8004180:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x358>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x340>
 8004196:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a60      	ldr	r2, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a5d      	ldr	r2, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x358>
 80041b0:	4b5a      	ldr	r3, [pc, #360]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a59      	ldr	r2, [pc, #356]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	4b57      	ldr	r3, [pc, #348]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a56      	ldr	r2, [pc, #344]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe fd16 	bl	8002c00 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fe fd12 	bl	8002c00 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0d7      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x368>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fe fd00 	bl	8002c00 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fe fcfc 	bl	8002c00 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0c1      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	4a3a      	ldr	r2, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80ad 	beq.w	800439c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d060      	beq.n	8004310 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d145      	bne.n	80042e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_RCC_OscConfig+0x4b4>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fcd0 	bl	8002c00 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe fccc 	bl	8002c00 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e093      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	491b      	ldr	r1, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4b4>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fe fca1 	bl	8002c00 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe fc9d 	bl	8002c00 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e064      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x452>
 80042e0:	e05c      	b.n	800439c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_RCC_OscConfig+0x4b4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe fc8a 	bl	8002c00 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fc86 	bl	8002c00 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e04d      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x4ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x480>
 800430e:	e045      	b.n	800439c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e040      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
 800431c:	40023800 	.word	0x40023800
 8004320:	40007000 	.word	0x40007000
 8004324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <HAL_RCC_OscConfig+0x538>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d030      	beq.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d129      	bne.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d122      	bne.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800435e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	4293      	cmp	r3, r2
 8004362:	d119      	bne.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	3b01      	subs	r3, #1
 8004372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d10f      	bne.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800

080043ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e066      	b.n	8004490 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7f5b      	ldrb	r3, [r3, #29]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f96a 	bl	80016ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	22ca      	movs	r2, #202	; 0xca
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2253      	movs	r2, #83	; 0x53
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa45 	bl	800487e <RTC_EnterInitMode>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d12c      	bne.n	8004458 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800440c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004410:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68d2      	ldr	r2, [r2, #12]
 8004438:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6919      	ldr	r1, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	041a      	lsls	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa4c 	bl	80048ec <RTC_ExitInitMode>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d113      	bne.n	8004486 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	22ff      	movs	r2, #255	; 0xff
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	7f1b      	ldrb	r3, [r3, #28]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_RTC_SetTime+0x1c>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e087      	b.n	80045c4 <HAL_RTC_SetTime+0x12c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2202      	movs	r2, #2
 80044be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d126      	bne.n	8004514 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2200      	movs	r2, #0
 80044d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fa29 	bl	8004936 <RTC_ByteToBcd2>
 80044e4:	4603      	mov	r3, r0
 80044e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fa22 	bl	8004936 <RTC_ByteToBcd2>
 80044f2:	4603      	mov	r3, r0
 80044f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	789b      	ldrb	r3, [r3, #2]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa1a 	bl	8004936 <RTC_ByteToBcd2>
 8004502:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004504:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	78db      	ldrb	r3, [r3, #3]
 800450c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e018      	b.n	8004546 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004534:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800453a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	78db      	ldrb	r3, [r3, #3]
 8004540:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	22ca      	movs	r2, #202	; 0xca
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2253      	movs	r2, #83	; 0x53
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f991 	bl	800487e <RTC_EnterInitMode>
 800455c:	4603      	mov	r3, r0
 800455e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d120      	bne.n	80045a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004570:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004574:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004584:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f9a4 	bl	80048ec <RTC_ExitInitMode>
 80045a4:	4603      	mov	r3, r0
 80045a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]

  return status;
 80045c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}

080045cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	0d9b      	lsrs	r3, r3, #22
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11a      	bne.n	800467e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f98f 	bl	8004970 <RTC_Bcd2ToByte>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f986 	bl	8004970 <RTC_Bcd2ToByte>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	789b      	ldrb	r3, [r3, #2]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f97d 	bl	8004970 <RTC_Bcd2ToByte>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	7f1b      	ldrb	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_RTC_SetDate+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e071      	b.n	8004788 <HAL_RTC_SetDate+0x100>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10e      	bne.n	80046d4 <HAL_RTC_SetDate+0x4c>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	330a      	adds	r3, #10
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11c      	bne.n	8004714 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	78db      	ldrb	r3, [r3, #3]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f929 	bl	8004936 <RTC_ByteToBcd2>
 80046e4:	4603      	mov	r3, r0
 80046e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f922 	bl	8004936 <RTC_ByteToBcd2>
 80046f2:	4603      	mov	r3, r0
 80046f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	789b      	ldrb	r3, [r3, #2]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f91a 	bl	8004936 <RTC_ByteToBcd2>
 8004702:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004704:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e00e      	b.n	8004732 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004720:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004726:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	22ca      	movs	r2, #202	; 0xca
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2253      	movs	r2, #83	; 0x53
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f89b 	bl	800487e <RTC_EnterInitMode>
 8004748:	4603      	mov	r3, r0
 800474a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800475c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004760:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f8c2 	bl	80048ec <RTC_ExitInitMode>
 8004768:	4603      	mov	r3, r0
 800476a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	771a      	strb	r2, [r3, #28]

  return status;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}

08004790 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11a      	bne.n	8004824 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f8bc 	bl	8004970 <RTC_Bcd2ToByte>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f8b3 	bl	8004970 <RTC_Bcd2ToByte>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	789b      	ldrb	r3, [r3, #2]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f8aa 	bl	8004970 <RTC_Bcd2ToByte>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004848:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800484a:	f7fe f9d9 	bl	8002c00 <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004850:	e009      	b.n	8004866 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004852:	f7fe f9d5 	bl	8002c00 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004860:	d901      	bls.n	8004866 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e007      	b.n	8004876 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d122      	bne.n	80048e2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048ac:	f7fe f9a8 	bl	8002c00 <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048b2:	e00c      	b.n	80048ce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048b4:	f7fe f9a4 	bl	8002c00 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c2:	d904      	bls.n	80048ce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <RTC_EnterInitMode+0x64>
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d1e8      	bne.n	80048b4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004906:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff89 	bl	800482e <HAL_RTC_WaitForSynchro>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004944:	e005      	b.n	8004952 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	3301      	adds	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	3b0a      	subs	r3, #10
 8004950:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	2b09      	cmp	r3, #9
 8004956:	d8f6      	bhi.n	8004946 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	b2da      	uxtb	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	4313      	orrs	r3, r2
 8004962:	b2db      	uxtb	r3, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	4413      	add	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	b2da      	uxtb	r2, r3
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	4413      	add	r3, r2
 800499a:	b2db      	uxtb	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07b      	b.n	8004ab2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	e005      	b.n	80049e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc feb6 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0104 	and.w	r1, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0210 	and.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b088      	sub	sp, #32
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_SPI_Transmit+0x22>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e126      	b.n	8004d2a <HAL_SPI_Transmit+0x270>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae4:	f7fe f88c 	bl	8002c00 <HAL_GetTick>
 8004ae8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afe:	e10b      	b.n	8004d18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Transmit+0x52>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b10:	e102      	b.n	8004d18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2203      	movs	r2, #3
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	d10f      	bne.n	8004b7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d14b      	bne.n	8004c3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Transmit+0xf6>
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d13e      	bne.n	8004c2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bd4:	e02b      	b.n	8004c2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d112      	bne.n	8004c0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c08:	e011      	b.n	8004c2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0a:	f7fd fff9 	bl	8002c00 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d803      	bhi.n	8004c22 <HAL_SPI_Transmit+0x168>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d102      	bne.n	8004c28 <HAL_SPI_Transmit+0x16e>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c2c:	e074      	b.n	8004d18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ce      	bne.n	8004bd6 <HAL_SPI_Transmit+0x11c>
 8004c38:	e04c      	b.n	8004cd4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_Transmit+0x18e>
 8004c42:	8afb      	ldrh	r3, [r7, #22]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d140      	bne.n	8004cca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c6e:	e02c      	b.n	8004cca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d113      	bne.n	8004ca6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ca4:	e011      	b.n	8004cca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca6:	f7fd ffab 	bl	8002c00 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d803      	bhi.n	8004cbe <HAL_SPI_Transmit+0x204>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_Transmit+0x20a>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cc8:	e026      	b.n	8004d18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1cd      	bne.n	8004c70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f8b3 	bl	8004e44 <SPI_EndRxTxTransaction>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e000      	b.n	8004d18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d44:	f7fd ff5c 	bl	8002c00 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d54:	f7fd ff54 	bl	8002c00 <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	015b      	lsls	r3, r3, #5
 8004d60:	0d1b      	lsrs	r3, r3, #20
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6a:	e054      	b.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d050      	beq.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d74:	f7fd ff44 	bl	8002c00 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d902      	bls.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d13d      	bne.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da2:	d111      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	d004      	beq.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db6:	d107      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd0:	d10f      	bne.n	8004df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e017      	b.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d19b      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000000 	.word	0x20000000

08004e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <SPI_EndRxTxTransaction+0x7c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <SPI_EndRxTxTransaction+0x80>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	0d5b      	lsrs	r3, r3, #21
 8004e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d112      	bne.n	8004e96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	2180      	movs	r1, #128	; 0x80
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff5a 	bl	8004d34 <SPI_WaitFlagStateUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d016      	beq.n	8004eb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e00f      	b.n	8004eb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d0f2      	beq.n	8004e96 <SPI_EndRxTxTransaction+0x52>
 8004eb0:	e000      	b.n	8004eb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004eb2:	bf00      	nop
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	165e9f81 	.word	0x165e9f81

08004ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fde6 	bl	8001ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 f9b8 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x24>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e022      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d109      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x3e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e015      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x58>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e008      	b.n	8004fd2 <HAL_TIM_PWM_Start+0x6a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e07c      	b.n	80050d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start+0x82>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe8:	e013      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x92>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	e00b      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_PWM_Start+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005008:	e003      	b.n	8005012 <HAL_TIM_PWM_Start+0xaa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fb7e 	bl	800571c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2d      	ldr	r2, [pc, #180]	; (80050dc <HAL_TIM_PWM_Start+0x174>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_PWM_Start+0xcc>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <HAL_TIM_PWM_Start+0x178>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_TIM_PWM_Start+0xd0>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_TIM_PWM_Start+0xd2>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a22      	ldr	r2, [pc, #136]	; (80050dc <HAL_TIM_PWM_Start+0x174>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d01d      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_TIM_PWM_Start+0x17c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_TIM_PWM_Start+0x180>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_TIM_PWM_Start+0x184>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <HAL_TIM_PWM_Start+0x178>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_TIM_PWM_Start+0x188>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIM_PWM_Start+0x136>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a16      	ldr	r2, [pc, #88]	; (80050f4 <HAL_TIM_PWM_Start+0x18c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d010      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e007      	b.n	80050d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40001800 	.word	0x40001800

080050f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ae      	b.n	8005274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	f200 809f 	bhi.w	8005264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005161 	.word	0x08005161
 8005130:	08005265 	.word	0x08005265
 8005134:	08005265 	.word	0x08005265
 8005138:	08005265 	.word	0x08005265
 800513c:	080051a1 	.word	0x080051a1
 8005140:	08005265 	.word	0x08005265
 8005144:	08005265 	.word	0x08005265
 8005148:	08005265 	.word	0x08005265
 800514c:	080051e3 	.word	0x080051e3
 8005150:	08005265 	.word	0x08005265
 8005154:	08005265 	.word	0x08005265
 8005158:	08005265 	.word	0x08005265
 800515c:	08005223 	.word	0x08005223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f928 	bl	80053bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
      break;
 800519e:	e064      	b.n	800526a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f978 	bl	800549c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
      break;
 80051e0:	e043      	b.n	800526a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f9cd 	bl	8005588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0208 	orr.w	r2, r2, #8
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0204 	bic.w	r2, r2, #4
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	61da      	str	r2, [r3, #28]
      break;
 8005220:	e023      	b.n	800526a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fa21 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	61da      	str	r2, [r3, #28]
      break;
 8005262:	e002      	b.n	800526a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	75fb      	strb	r3, [r7, #23]
      break;
 8005268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <TIM_Base_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_Base_SetConfig+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001800 	.word	0x40001800
 80053b4:	40001c00 	.word	0x40001c00
 80053b8:	40002000 	.word	0x40002000

080053bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0302 	bic.w	r3, r3, #2
 8005404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a20      	ldr	r2, [pc, #128]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC1_SetConfig+0x64>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10c      	bne.n	800543a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0308 	bic.w	r3, r3, #8
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC1_SetConfig+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a14      	ldr	r2, [pc, #80]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d111      	bne.n	800546e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000
 8005498:	40010400 	.word	0x40010400

0800549c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0210 	bic.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0320 	bic.w	r3, r3, #32
 80054e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x68>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10d      	bne.n	8005520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC2_SetConfig+0x94>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d113      	bne.n	8005558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x66>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC3_SetConfig+0x92>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <TIM_OC4_SetConfig+0xa4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC4_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a11      	ldr	r2, [pc, #68]	; (8005718 <TIM_OC4_SetConfig+0xa8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d109      	bne.n	80056ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2201      	movs	r2, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e05a      	b.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d01d      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1a      	ldr	r2, [pc, #104]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10c      	bne.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40001800 	.word	0x40001800

08005860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e03f      	b.n	80058f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc f9a0 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f929 	bl	8005afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08a      	sub	sp, #40	; 0x28
 80058fe:	af02      	add	r7, sp, #8
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	d17c      	bne.n	8005a14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Transmit+0x2c>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e075      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x3e>
 8005934:	2302      	movs	r3, #2
 8005936:	e06e      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2221      	movs	r2, #33	; 0x21
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7fd f957 	bl	8002c00 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005968:	d108      	bne.n	800597c <HAL_UART_Transmit+0x82>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e003      	b.n	8005984 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800598c:	e02a      	b.n	80059e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f840 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e036      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3302      	adds	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1cf      	bne.n	800598e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2140      	movs	r1, #64	; 0x40
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f810 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b090      	sub	sp, #64	; 0x40
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	e050      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d04c      	beq.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3e:	f7fd f8df 	bl	8002c00 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d241      	bcs.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	613b      	str	r3, [r7, #16]
   return(result);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa2:	623a      	str	r2, [r7, #32]
 8005aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	69f9      	ldr	r1, [r7, #28]
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1e5      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e00f      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d09f      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3740      	adds	r7, #64	; 0x40
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b0c0      	sub	sp, #256	; 0x100
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	68d9      	ldr	r1, [r3, #12]
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	ea40 0301 	orr.w	r3, r0, r1
 8005b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b54:	f021 010c 	bic.w	r1, r1, #12
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b62:	430b      	orrs	r3, r1
 8005b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b76:	6999      	ldr	r1, [r3, #24]
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	ea40 0301 	orr.w	r3, r0, r1
 8005b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b8f      	ldr	r3, [pc, #572]	; (8005dc8 <UART_SetConfig+0x2cc>)
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d005      	beq.n	8005b9c <UART_SetConfig+0xa0>
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b8d      	ldr	r3, [pc, #564]	; (8005dcc <UART_SetConfig+0x2d0>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d104      	bne.n	8005ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fbfa 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ba4:	e003      	b.n	8005bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ba6:	f7fd fbe1 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8005baa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb8:	f040 810c 	bne.w	8005dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bce:	4622      	mov	r2, r4
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	1891      	adds	r1, r2, r2
 8005bd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bd6:	415b      	adcs	r3, r3
 8005bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bde:	4621      	mov	r1, r4
 8005be0:	eb12 0801 	adds.w	r8, r2, r1
 8005be4:	4629      	mov	r1, r5
 8005be6:	eb43 0901 	adc.w	r9, r3, r1
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bfe:	4690      	mov	r8, r2
 8005c00:	4699      	mov	r9, r3
 8005c02:	4623      	mov	r3, r4
 8005c04:	eb18 0303 	adds.w	r3, r8, r3
 8005c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	eb49 0303 	adc.w	r3, r9, r3
 8005c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	18db      	adds	r3, r3, r3
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c30:	4613      	mov	r3, r2
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
 8005c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c40:	f7fb f824 	bl	8000c8c <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4b61      	ldr	r3, [pc, #388]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	011c      	lsls	r4, r3, #4
 8005c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c74:	4641      	mov	r1, r8
 8005c76:	eb12 0a01 	adds.w	sl, r2, r1
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c94:	4692      	mov	sl, r2
 8005c96:	469b      	mov	fp, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	18db      	adds	r3, r3, r3
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	eb42 0303 	adc.w	r3, r2, r3
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cd6:	f7fa ffd9 	bl	8000c8c <__aeabi_uldivmod>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2264      	movs	r2, #100	; 0x64
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	1acb      	subs	r3, r1, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cf6:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d04:	441c      	add	r4, r3
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d20:	415b      	adcs	r3, r3
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	460a      	mov	r2, r1
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	18db      	adds	r3, r3, r3
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d82:	4613      	mov	r3, r2
 8005d84:	eb42 0303 	adc.w	r3, r2, r3
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d92:	f7fa ff7b 	bl	8000c8c <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	2164      	movs	r1, #100	; 0x64
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	3332      	adds	r3, #50	; 0x32
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <UART_SetConfig+0x2d4>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f003 0207 	and.w	r2, r3, #7
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4422      	add	r2, r4
 8005dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dc4:	e105      	b.n	8005fd2 <UART_SetConfig+0x4d6>
 8005dc6:	bf00      	nop
 8005dc8:	40011000 	.word	0x40011000
 8005dcc:	40011400 	.word	0x40011400
 8005dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	6239      	str	r1, [r7, #32]
 8005dee:	415b      	adcs	r3, r3
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005df6:	4641      	mov	r1, r8
 8005df8:	1854      	adds	r4, r2, r1
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	eb43 0501 	adc.w	r5, r3, r1
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	00eb      	lsls	r3, r5, #3
 8005e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e0e:	00e2      	lsls	r2, r4, #3
 8005e10:	4614      	mov	r4, r2
 8005e12:	461d      	mov	r5, r3
 8005e14:	4643      	mov	r3, r8
 8005e16:	18e3      	adds	r3, r4, r3
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	eb45 0303 	adc.w	r3, r5, r3
 8005e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e42:	4629      	mov	r1, r5
 8005e44:	008b      	lsls	r3, r1, #2
 8005e46:	4621      	mov	r1, r4
 8005e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	008a      	lsls	r2, r1, #2
 8005e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e54:	f7fa ff1a 	bl	8000c8c <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011c      	lsls	r4, r3, #4
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	61b9      	str	r1, [r7, #24]
 8005e80:	415b      	adcs	r3, r3
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e88:	4641      	mov	r1, r8
 8005e8a:	1851      	adds	r1, r2, r1
 8005e8c:	6139      	str	r1, [r7, #16]
 8005e8e:	4649      	mov	r1, r9
 8005e90:	414b      	adcs	r3, r1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	00cb      	lsls	r3, r1, #3
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eaa:	4651      	mov	r1, sl
 8005eac:	00ca      	lsls	r2, r1, #3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ed2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	008b      	lsls	r3, r1, #2
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eea:	4641      	mov	r1, r8
 8005eec:	008a      	lsls	r2, r1, #2
 8005eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ef2:	f7fa fecb 	bl	8000c8c <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f1a:	441c      	add	r4, r3
 8005f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f20:	2200      	movs	r2, #0
 8005f22:	673b      	str	r3, [r7, #112]	; 0x70
 8005f24:	677a      	str	r2, [r7, #116]	; 0x74
 8005f26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	415b      	adcs	r3, r3
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	1851      	adds	r1, r2, r1
 8005f3e:	6039      	str	r1, [r7, #0]
 8005f40:	4649      	mov	r1, r9
 8005f42:	414b      	adcs	r3, r1
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f52:	4659      	mov	r1, fp
 8005f54:	00cb      	lsls	r3, r1, #3
 8005f56:	4651      	mov	r1, sl
 8005f58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	00ca      	lsls	r2, r1, #3
 8005f60:	4610      	mov	r0, r2
 8005f62:	4619      	mov	r1, r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	4642      	mov	r2, r8
 8005f68:	189b      	adds	r3, r3, r2
 8005f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	460a      	mov	r2, r1
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f80:	667a      	str	r2, [r7, #100]	; 0x64
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f8e:	4649      	mov	r1, r9
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	4641      	mov	r1, r8
 8005f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f98:	4641      	mov	r1, r8
 8005f9a:	008a      	lsls	r2, r1, #2
 8005f9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fa0:	f7fa fe74 	bl	8000c8c <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005faa:	fba3 1302 	umull	r1, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2164      	movs	r1, #100	; 0x64
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	3332      	adds	r3, #50	; 0x32
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <UART_SetConfig+0x4e4>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	f003 020f 	and.w	r2, r3, #15
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4422      	add	r2, r4
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fde:	bf00      	nop
 8005fe0:	51eb851f 	.word	0x51eb851f

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000014 	.word	0x20000014

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	; (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	; (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	; (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	; (8006034 <__libc_init_array+0x44>)
 8006004:	f002 fa9e 	bl	8008544 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	0800a600 	.word	0x0800a600
 800602c:	0800a600 	.word	0x0800a600
 8006030:	0800a600 	.word	0x0800a600
 8006034:	0800a604 	.word	0x0800a604

08006038 <memcpy>:
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006040:	d100      	bne.n	8006044 <memcpy+0xc>
 8006042:	4770      	bx	lr
 8006044:	b510      	push	{r4, lr}
 8006046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604e:	4291      	cmp	r1, r2
 8006050:	d1f9      	bne.n	8006046 <memcpy+0xe>
 8006052:	bd10      	pop	{r4, pc}

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <_free_r>:
 8006064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006066:	2900      	cmp	r1, #0
 8006068:	d044      	beq.n	80060f4 <_free_r+0x90>
 800606a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800606e:	9001      	str	r0, [sp, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f1a1 0404 	sub.w	r4, r1, #4
 8006076:	bfb8      	it	lt
 8006078:	18e4      	addlt	r4, r4, r3
 800607a:	f000 fc71 	bl	8006960 <__malloc_lock>
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <_free_r+0x94>)
 8006080:	9801      	ldr	r0, [sp, #4]
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	b933      	cbnz	r3, 8006094 <_free_r+0x30>
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	6014      	str	r4, [r2, #0]
 800608a:	b003      	add	sp, #12
 800608c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006090:	f000 bc6c 	b.w	800696c <__malloc_unlock>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d908      	bls.n	80060aa <_free_r+0x46>
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	1961      	adds	r1, r4, r5
 800609c:	428b      	cmp	r3, r1
 800609e:	bf01      	itttt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	1949      	addeq	r1, r1, r5
 80060a6:	6021      	streq	r1, [r4, #0]
 80060a8:	e7ed      	b.n	8006086 <_free_r+0x22>
 80060aa:	461a      	mov	r2, r3
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b10b      	cbz	r3, 80060b4 <_free_r+0x50>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d9fa      	bls.n	80060aa <_free_r+0x46>
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	1855      	adds	r5, r2, r1
 80060b8:	42a5      	cmp	r5, r4
 80060ba:	d10b      	bne.n	80060d4 <_free_r+0x70>
 80060bc:	6824      	ldr	r4, [r4, #0]
 80060be:	4421      	add	r1, r4
 80060c0:	1854      	adds	r4, r2, r1
 80060c2:	42a3      	cmp	r3, r4
 80060c4:	6011      	str	r1, [r2, #0]
 80060c6:	d1e0      	bne.n	800608a <_free_r+0x26>
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	6053      	str	r3, [r2, #4]
 80060ce:	4421      	add	r1, r4
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	e7da      	b.n	800608a <_free_r+0x26>
 80060d4:	d902      	bls.n	80060dc <_free_r+0x78>
 80060d6:	230c      	movs	r3, #12
 80060d8:	6003      	str	r3, [r0, #0]
 80060da:	e7d6      	b.n	800608a <_free_r+0x26>
 80060dc:	6825      	ldr	r5, [r4, #0]
 80060de:	1961      	adds	r1, r4, r5
 80060e0:	428b      	cmp	r3, r1
 80060e2:	bf04      	itt	eq
 80060e4:	6819      	ldreq	r1, [r3, #0]
 80060e6:	685b      	ldreq	r3, [r3, #4]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	bf04      	itt	eq
 80060ec:	1949      	addeq	r1, r1, r5
 80060ee:	6021      	streq	r1, [r4, #0]
 80060f0:	6054      	str	r4, [r2, #4]
 80060f2:	e7ca      	b.n	800608a <_free_r+0x26>
 80060f4:	b003      	add	sp, #12
 80060f6:	bd30      	pop	{r4, r5, pc}
 80060f8:	200001dc 	.word	0x200001dc

080060fc <sbrk_aligned>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4e0e      	ldr	r6, [pc, #56]	; (8006138 <sbrk_aligned+0x3c>)
 8006100:	460c      	mov	r4, r1
 8006102:	6831      	ldr	r1, [r6, #0]
 8006104:	4605      	mov	r5, r0
 8006106:	b911      	cbnz	r1, 800610e <sbrk_aligned+0x12>
 8006108:	f000 f91a 	bl	8006340 <_sbrk_r>
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f915 	bl	8006340 <_sbrk_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d00a      	beq.n	8006130 <sbrk_aligned+0x34>
 800611a:	1cc4      	adds	r4, r0, #3
 800611c:	f024 0403 	bic.w	r4, r4, #3
 8006120:	42a0      	cmp	r0, r4
 8006122:	d007      	beq.n	8006134 <sbrk_aligned+0x38>
 8006124:	1a21      	subs	r1, r4, r0
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f90a 	bl	8006340 <_sbrk_r>
 800612c:	3001      	adds	r0, #1
 800612e:	d101      	bne.n	8006134 <sbrk_aligned+0x38>
 8006130:	f04f 34ff 	mov.w	r4, #4294967295
 8006134:	4620      	mov	r0, r4
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	200001e0 	.word	0x200001e0

0800613c <_malloc_r>:
 800613c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006140:	1ccd      	adds	r5, r1, #3
 8006142:	f025 0503 	bic.w	r5, r5, #3
 8006146:	3508      	adds	r5, #8
 8006148:	2d0c      	cmp	r5, #12
 800614a:	bf38      	it	cc
 800614c:	250c      	movcc	r5, #12
 800614e:	2d00      	cmp	r5, #0
 8006150:	4607      	mov	r7, r0
 8006152:	db01      	blt.n	8006158 <_malloc_r+0x1c>
 8006154:	42a9      	cmp	r1, r5
 8006156:	d905      	bls.n	8006164 <_malloc_r+0x28>
 8006158:	230c      	movs	r3, #12
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	2600      	movs	r6, #0
 800615e:	4630      	mov	r0, r6
 8006160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006164:	4e2e      	ldr	r6, [pc, #184]	; (8006220 <_malloc_r+0xe4>)
 8006166:	f000 fbfb 	bl	8006960 <__malloc_lock>
 800616a:	6833      	ldr	r3, [r6, #0]
 800616c:	461c      	mov	r4, r3
 800616e:	bb34      	cbnz	r4, 80061be <_malloc_r+0x82>
 8006170:	4629      	mov	r1, r5
 8006172:	4638      	mov	r0, r7
 8006174:	f7ff ffc2 	bl	80060fc <sbrk_aligned>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	4604      	mov	r4, r0
 800617c:	d14d      	bne.n	800621a <_malloc_r+0xde>
 800617e:	6834      	ldr	r4, [r6, #0]
 8006180:	4626      	mov	r6, r4
 8006182:	2e00      	cmp	r6, #0
 8006184:	d140      	bne.n	8006208 <_malloc_r+0xcc>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4631      	mov	r1, r6
 800618a:	4638      	mov	r0, r7
 800618c:	eb04 0803 	add.w	r8, r4, r3
 8006190:	f000 f8d6 	bl	8006340 <_sbrk_r>
 8006194:	4580      	cmp	r8, r0
 8006196:	d13a      	bne.n	800620e <_malloc_r+0xd2>
 8006198:	6821      	ldr	r1, [r4, #0]
 800619a:	3503      	adds	r5, #3
 800619c:	1a6d      	subs	r5, r5, r1
 800619e:	f025 0503 	bic.w	r5, r5, #3
 80061a2:	3508      	adds	r5, #8
 80061a4:	2d0c      	cmp	r5, #12
 80061a6:	bf38      	it	cc
 80061a8:	250c      	movcc	r5, #12
 80061aa:	4629      	mov	r1, r5
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff ffa5 	bl	80060fc <sbrk_aligned>
 80061b2:	3001      	adds	r0, #1
 80061b4:	d02b      	beq.n	800620e <_malloc_r+0xd2>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	442b      	add	r3, r5
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	e00e      	b.n	80061dc <_malloc_r+0xa0>
 80061be:	6822      	ldr	r2, [r4, #0]
 80061c0:	1b52      	subs	r2, r2, r5
 80061c2:	d41e      	bmi.n	8006202 <_malloc_r+0xc6>
 80061c4:	2a0b      	cmp	r2, #11
 80061c6:	d916      	bls.n	80061f6 <_malloc_r+0xba>
 80061c8:	1961      	adds	r1, r4, r5
 80061ca:	42a3      	cmp	r3, r4
 80061cc:	6025      	str	r5, [r4, #0]
 80061ce:	bf18      	it	ne
 80061d0:	6059      	strne	r1, [r3, #4]
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	bf08      	it	eq
 80061d6:	6031      	streq	r1, [r6, #0]
 80061d8:	5162      	str	r2, [r4, r5]
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	4638      	mov	r0, r7
 80061de:	f104 060b 	add.w	r6, r4, #11
 80061e2:	f000 fbc3 	bl	800696c <__malloc_unlock>
 80061e6:	f026 0607 	bic.w	r6, r6, #7
 80061ea:	1d23      	adds	r3, r4, #4
 80061ec:	1af2      	subs	r2, r6, r3
 80061ee:	d0b6      	beq.n	800615e <_malloc_r+0x22>
 80061f0:	1b9b      	subs	r3, r3, r6
 80061f2:	50a3      	str	r3, [r4, r2]
 80061f4:	e7b3      	b.n	800615e <_malloc_r+0x22>
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf0c      	ite	eq
 80061fc:	6032      	streq	r2, [r6, #0]
 80061fe:	605a      	strne	r2, [r3, #4]
 8006200:	e7ec      	b.n	80061dc <_malloc_r+0xa0>
 8006202:	4623      	mov	r3, r4
 8006204:	6864      	ldr	r4, [r4, #4]
 8006206:	e7b2      	b.n	800616e <_malloc_r+0x32>
 8006208:	4634      	mov	r4, r6
 800620a:	6876      	ldr	r6, [r6, #4]
 800620c:	e7b9      	b.n	8006182 <_malloc_r+0x46>
 800620e:	230c      	movs	r3, #12
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4638      	mov	r0, r7
 8006214:	f000 fbaa 	bl	800696c <__malloc_unlock>
 8006218:	e7a1      	b.n	800615e <_malloc_r+0x22>
 800621a:	6025      	str	r5, [r4, #0]
 800621c:	e7de      	b.n	80061dc <_malloc_r+0xa0>
 800621e:	bf00      	nop
 8006220:	200001dc 	.word	0x200001dc

08006224 <iprintf>:
 8006224:	b40f      	push	{r0, r1, r2, r3}
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <iprintf+0x2c>)
 8006228:	b513      	push	{r0, r1, r4, lr}
 800622a:	681c      	ldr	r4, [r3, #0]
 800622c:	b124      	cbz	r4, 8006238 <iprintf+0x14>
 800622e:	69a3      	ldr	r3, [r4, #24]
 8006230:	b913      	cbnz	r3, 8006238 <iprintf+0x14>
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fa8e 	bl	8006754 <__sinit>
 8006238:	ab05      	add	r3, sp, #20
 800623a:	9a04      	ldr	r2, [sp, #16]
 800623c:	68a1      	ldr	r1, [r4, #8]
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	4620      	mov	r0, r4
 8006242:	f000 fd1f 	bl	8006c84 <_vfiprintf_r>
 8006246:	b002      	add	sp, #8
 8006248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800624c:	b004      	add	sp, #16
 800624e:	4770      	bx	lr
 8006250:	20000014 	.word	0x20000014

08006254 <_puts_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	460e      	mov	r6, r1
 8006258:	4605      	mov	r5, r0
 800625a:	b118      	cbz	r0, 8006264 <_puts_r+0x10>
 800625c:	6983      	ldr	r3, [r0, #24]
 800625e:	b90b      	cbnz	r3, 8006264 <_puts_r+0x10>
 8006260:	f000 fa78 	bl	8006754 <__sinit>
 8006264:	69ab      	ldr	r3, [r5, #24]
 8006266:	68ac      	ldr	r4, [r5, #8]
 8006268:	b913      	cbnz	r3, 8006270 <_puts_r+0x1c>
 800626a:	4628      	mov	r0, r5
 800626c:	f000 fa72 	bl	8006754 <__sinit>
 8006270:	4b2c      	ldr	r3, [pc, #176]	; (8006324 <_puts_r+0xd0>)
 8006272:	429c      	cmp	r4, r3
 8006274:	d120      	bne.n	80062b8 <_puts_r+0x64>
 8006276:	686c      	ldr	r4, [r5, #4]
 8006278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d405      	bmi.n	800628a <_puts_r+0x36>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	0598      	lsls	r0, r3, #22
 8006282:	d402      	bmi.n	800628a <_puts_r+0x36>
 8006284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006286:	f000 fb03 	bl	8006890 <__retarget_lock_acquire_recursive>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	0719      	lsls	r1, r3, #28
 800628e:	d51d      	bpl.n	80062cc <_puts_r+0x78>
 8006290:	6923      	ldr	r3, [r4, #16]
 8006292:	b1db      	cbz	r3, 80062cc <_puts_r+0x78>
 8006294:	3e01      	subs	r6, #1
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800629c:	3b01      	subs	r3, #1
 800629e:	60a3      	str	r3, [r4, #8]
 80062a0:	bb39      	cbnz	r1, 80062f2 <_puts_r+0x9e>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da38      	bge.n	8006318 <_puts_r+0xc4>
 80062a6:	4622      	mov	r2, r4
 80062a8:	210a      	movs	r1, #10
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 f878 	bl	80063a0 <__swbuf_r>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d011      	beq.n	80062d8 <_puts_r+0x84>
 80062b4:	250a      	movs	r5, #10
 80062b6:	e011      	b.n	80062dc <_puts_r+0x88>
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <_puts_r+0xd4>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d101      	bne.n	80062c2 <_puts_r+0x6e>
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	e7da      	b.n	8006278 <_puts_r+0x24>
 80062c2:	4b1a      	ldr	r3, [pc, #104]	; (800632c <_puts_r+0xd8>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	bf08      	it	eq
 80062c8:	68ec      	ldreq	r4, [r5, #12]
 80062ca:	e7d5      	b.n	8006278 <_puts_r+0x24>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f8b8 	bl	8006444 <__swsetup_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d0dd      	beq.n	8006294 <_puts_r+0x40>
 80062d8:	f04f 35ff 	mov.w	r5, #4294967295
 80062dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062de:	07da      	lsls	r2, r3, #31
 80062e0:	d405      	bmi.n	80062ee <_puts_r+0x9a>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	059b      	lsls	r3, r3, #22
 80062e6:	d402      	bmi.n	80062ee <_puts_r+0x9a>
 80062e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ea:	f000 fad2 	bl	8006892 <__retarget_lock_release_recursive>
 80062ee:	4628      	mov	r0, r5
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da04      	bge.n	8006300 <_puts_r+0xac>
 80062f6:	69a2      	ldr	r2, [r4, #24]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	dc06      	bgt.n	800630a <_puts_r+0xb6>
 80062fc:	290a      	cmp	r1, #10
 80062fe:	d004      	beq.n	800630a <_puts_r+0xb6>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	6022      	str	r2, [r4, #0]
 8006306:	7019      	strb	r1, [r3, #0]
 8006308:	e7c5      	b.n	8006296 <_puts_r+0x42>
 800630a:	4622      	mov	r2, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 f847 	bl	80063a0 <__swbuf_r>
 8006312:	3001      	adds	r0, #1
 8006314:	d1bf      	bne.n	8006296 <_puts_r+0x42>
 8006316:	e7df      	b.n	80062d8 <_puts_r+0x84>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	250a      	movs	r5, #10
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	6022      	str	r2, [r4, #0]
 8006320:	701d      	strb	r5, [r3, #0]
 8006322:	e7db      	b.n	80062dc <_puts_r+0x88>
 8006324:	0800a3ac 	.word	0x0800a3ac
 8006328:	0800a3cc 	.word	0x0800a3cc
 800632c:	0800a38c 	.word	0x0800a38c

08006330 <puts>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <puts+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f7ff bf8d 	b.w	8006254 <_puts_r>
 800633a:	bf00      	nop
 800633c:	20000014 	.word	0x20000014

08006340 <_sbrk_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	; (800635c <_sbrk_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fb fb16 	bl	800197c <_sbrk>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_sbrk_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_sbrk_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	200001e8 	.word	0x200001e8

08006360 <siprintf>:
 8006360:	b40e      	push	{r1, r2, r3}
 8006362:	b500      	push	{lr}
 8006364:	b09c      	sub	sp, #112	; 0x70
 8006366:	ab1d      	add	r3, sp, #116	; 0x74
 8006368:	9002      	str	r0, [sp, #8]
 800636a:	9006      	str	r0, [sp, #24]
 800636c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006370:	4809      	ldr	r0, [pc, #36]	; (8006398 <siprintf+0x38>)
 8006372:	9107      	str	r1, [sp, #28]
 8006374:	9104      	str	r1, [sp, #16]
 8006376:	4909      	ldr	r1, [pc, #36]	; (800639c <siprintf+0x3c>)
 8006378:	f853 2b04 	ldr.w	r2, [r3], #4
 800637c:	9105      	str	r1, [sp, #20]
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	a902      	add	r1, sp, #8
 8006384:	f000 fb54 	bl	8006a30 <_svfiprintf_r>
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	b01c      	add	sp, #112	; 0x70
 8006390:	f85d eb04 	ldr.w	lr, [sp], #4
 8006394:	b003      	add	sp, #12
 8006396:	4770      	bx	lr
 8006398:	20000014 	.word	0x20000014
 800639c:	ffff0208 	.word	0xffff0208

080063a0 <__swbuf_r>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	460e      	mov	r6, r1
 80063a4:	4614      	mov	r4, r2
 80063a6:	4605      	mov	r5, r0
 80063a8:	b118      	cbz	r0, 80063b2 <__swbuf_r+0x12>
 80063aa:	6983      	ldr	r3, [r0, #24]
 80063ac:	b90b      	cbnz	r3, 80063b2 <__swbuf_r+0x12>
 80063ae:	f000 f9d1 	bl	8006754 <__sinit>
 80063b2:	4b21      	ldr	r3, [pc, #132]	; (8006438 <__swbuf_r+0x98>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d12b      	bne.n	8006410 <__swbuf_r+0x70>
 80063b8:	686c      	ldr	r4, [r5, #4]
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	60a3      	str	r3, [r4, #8]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	071a      	lsls	r2, r3, #28
 80063c2:	d52f      	bpl.n	8006424 <__swbuf_r+0x84>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	b36b      	cbz	r3, 8006424 <__swbuf_r+0x84>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	b2f6      	uxtb	r6, r6
 80063d2:	4283      	cmp	r3, r0
 80063d4:	4637      	mov	r7, r6
 80063d6:	dc04      	bgt.n	80063e2 <__swbuf_r+0x42>
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f926 	bl	800662c <_fflush_r>
 80063e0:	bb30      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	701e      	strb	r6, [r3, #0]
 80063f0:	6963      	ldr	r3, [r4, #20]
 80063f2:	3001      	adds	r0, #1
 80063f4:	4283      	cmp	r3, r0
 80063f6:	d004      	beq.n	8006402 <__swbuf_r+0x62>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d506      	bpl.n	800640c <__swbuf_r+0x6c>
 80063fe:	2e0a      	cmp	r6, #10
 8006400:	d104      	bne.n	800640c <__swbuf_r+0x6c>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f911 	bl	800662c <_fflush_r>
 800640a:	b988      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 800640c:	4638      	mov	r0, r7
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <__swbuf_r+0x9c>)
 8006412:	429c      	cmp	r4, r3
 8006414:	d101      	bne.n	800641a <__swbuf_r+0x7a>
 8006416:	68ac      	ldr	r4, [r5, #8]
 8006418:	e7cf      	b.n	80063ba <__swbuf_r+0x1a>
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <__swbuf_r+0xa0>)
 800641c:	429c      	cmp	r4, r3
 800641e:	bf08      	it	eq
 8006420:	68ec      	ldreq	r4, [r5, #12]
 8006422:	e7ca      	b.n	80063ba <__swbuf_r+0x1a>
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f80c 	bl	8006444 <__swsetup_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0cb      	beq.n	80063c8 <__swbuf_r+0x28>
 8006430:	f04f 37ff 	mov.w	r7, #4294967295
 8006434:	e7ea      	b.n	800640c <__swbuf_r+0x6c>
 8006436:	bf00      	nop
 8006438:	0800a3ac 	.word	0x0800a3ac
 800643c:	0800a3cc 	.word	0x0800a3cc
 8006440:	0800a38c 	.word	0x0800a38c

08006444 <__swsetup_r>:
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <__swsetup_r+0xcc>)
 8006446:	b570      	push	{r4, r5, r6, lr}
 8006448:	681d      	ldr	r5, [r3, #0]
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	b125      	cbz	r5, 800645a <__swsetup_r+0x16>
 8006450:	69ab      	ldr	r3, [r5, #24]
 8006452:	b913      	cbnz	r3, 800645a <__swsetup_r+0x16>
 8006454:	4628      	mov	r0, r5
 8006456:	f000 f97d 	bl	8006754 <__sinit>
 800645a:	4b2e      	ldr	r3, [pc, #184]	; (8006514 <__swsetup_r+0xd0>)
 800645c:	429c      	cmp	r4, r3
 800645e:	d10f      	bne.n	8006480 <__swsetup_r+0x3c>
 8006460:	686c      	ldr	r4, [r5, #4]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006468:	0719      	lsls	r1, r3, #28
 800646a:	d42c      	bmi.n	80064c6 <__swsetup_r+0x82>
 800646c:	06dd      	lsls	r5, r3, #27
 800646e:	d411      	bmi.n	8006494 <__swsetup_r+0x50>
 8006470:	2309      	movs	r3, #9
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	e03e      	b.n	80064fe <__swsetup_r+0xba>
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <__swsetup_r+0xd4>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d101      	bne.n	800648a <__swsetup_r+0x46>
 8006486:	68ac      	ldr	r4, [r5, #8]
 8006488:	e7eb      	b.n	8006462 <__swsetup_r+0x1e>
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <__swsetup_r+0xd8>)
 800648c:	429c      	cmp	r4, r3
 800648e:	bf08      	it	eq
 8006490:	68ec      	ldreq	r4, [r5, #12]
 8006492:	e7e6      	b.n	8006462 <__swsetup_r+0x1e>
 8006494:	0758      	lsls	r0, r3, #29
 8006496:	d512      	bpl.n	80064be <__swsetup_r+0x7a>
 8006498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649a:	b141      	cbz	r1, 80064ae <__swsetup_r+0x6a>
 800649c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <__swsetup_r+0x66>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff fddd 	bl	8006064 <_free_r>
 80064aa:	2300      	movs	r3, #0
 80064ac:	6363      	str	r3, [r4, #52]	; 0x34
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	b94b      	cbnz	r3, 80064de <__swsetup_r+0x9a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d4:	d003      	beq.n	80064de <__swsetup_r+0x9a>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4630      	mov	r0, r6
 80064da:	f000 fa01 	bl	80068e0 <__smakebuf_r>
 80064de:	89a0      	ldrh	r0, [r4, #12]
 80064e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e4:	f010 0301 	ands.w	r3, r0, #1
 80064e8:	d00a      	beq.n	8006500 <__swsetup_r+0xbc>
 80064ea:	2300      	movs	r3, #0
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6963      	ldr	r3, [r4, #20]
 80064f0:	425b      	negs	r3, r3
 80064f2:	61a3      	str	r3, [r4, #24]
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b943      	cbnz	r3, 800650a <__swsetup_r+0xc6>
 80064f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064fc:	d1ba      	bne.n	8006474 <__swsetup_r+0x30>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	0781      	lsls	r1, r0, #30
 8006502:	bf58      	it	pl
 8006504:	6963      	ldrpl	r3, [r4, #20]
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	e7f4      	b.n	80064f4 <__swsetup_r+0xb0>
 800650a:	2000      	movs	r0, #0
 800650c:	e7f7      	b.n	80064fe <__swsetup_r+0xba>
 800650e:	bf00      	nop
 8006510:	20000014 	.word	0x20000014
 8006514:	0800a3ac 	.word	0x0800a3ac
 8006518:	0800a3cc 	.word	0x0800a3cc
 800651c:	0800a38c 	.word	0x0800a38c

08006520 <__sflush_r>:
 8006520:	898a      	ldrh	r2, [r1, #12]
 8006522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006526:	4605      	mov	r5, r0
 8006528:	0710      	lsls	r0, r2, #28
 800652a:	460c      	mov	r4, r1
 800652c:	d458      	bmi.n	80065e0 <__sflush_r+0xc0>
 800652e:	684b      	ldr	r3, [r1, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc05      	bgt.n	8006540 <__sflush_r+0x20>
 8006534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	dc02      	bgt.n	8006540 <__sflush_r+0x20>
 800653a:	2000      	movs	r0, #0
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006542:	2e00      	cmp	r6, #0
 8006544:	d0f9      	beq.n	800653a <__sflush_r+0x1a>
 8006546:	2300      	movs	r3, #0
 8006548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800654c:	682f      	ldr	r7, [r5, #0]
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	d032      	beq.n	80065b8 <__sflush_r+0x98>
 8006552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	075a      	lsls	r2, r3, #29
 8006558:	d505      	bpl.n	8006566 <__sflush_r+0x46>
 800655a:	6863      	ldr	r3, [r4, #4]
 800655c:	1ac0      	subs	r0, r0, r3
 800655e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006560:	b10b      	cbz	r3, 8006566 <__sflush_r+0x46>
 8006562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006564:	1ac0      	subs	r0, r0, r3
 8006566:	2300      	movs	r3, #0
 8006568:	4602      	mov	r2, r0
 800656a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800656c:	6a21      	ldr	r1, [r4, #32]
 800656e:	4628      	mov	r0, r5
 8006570:	47b0      	blx	r6
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	d106      	bne.n	8006586 <__sflush_r+0x66>
 8006578:	6829      	ldr	r1, [r5, #0]
 800657a:	291d      	cmp	r1, #29
 800657c:	d82c      	bhi.n	80065d8 <__sflush_r+0xb8>
 800657e:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <__sflush_r+0x108>)
 8006580:	40ca      	lsrs	r2, r1
 8006582:	07d6      	lsls	r6, r2, #31
 8006584:	d528      	bpl.n	80065d8 <__sflush_r+0xb8>
 8006586:	2200      	movs	r2, #0
 8006588:	6062      	str	r2, [r4, #4]
 800658a:	04d9      	lsls	r1, r3, #19
 800658c:	6922      	ldr	r2, [r4, #16]
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	d504      	bpl.n	800659c <__sflush_r+0x7c>
 8006592:	1c42      	adds	r2, r0, #1
 8006594:	d101      	bne.n	800659a <__sflush_r+0x7a>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	b903      	cbnz	r3, 800659c <__sflush_r+0x7c>
 800659a:	6560      	str	r0, [r4, #84]	; 0x54
 800659c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800659e:	602f      	str	r7, [r5, #0]
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d0ca      	beq.n	800653a <__sflush_r+0x1a>
 80065a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065a8:	4299      	cmp	r1, r3
 80065aa:	d002      	beq.n	80065b2 <__sflush_r+0x92>
 80065ac:	4628      	mov	r0, r5
 80065ae:	f7ff fd59 	bl	8006064 <_free_r>
 80065b2:	2000      	movs	r0, #0
 80065b4:	6360      	str	r0, [r4, #52]	; 0x34
 80065b6:	e7c1      	b.n	800653c <__sflush_r+0x1c>
 80065b8:	6a21      	ldr	r1, [r4, #32]
 80065ba:	2301      	movs	r3, #1
 80065bc:	4628      	mov	r0, r5
 80065be:	47b0      	blx	r6
 80065c0:	1c41      	adds	r1, r0, #1
 80065c2:	d1c7      	bne.n	8006554 <__sflush_r+0x34>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0c4      	beq.n	8006554 <__sflush_r+0x34>
 80065ca:	2b1d      	cmp	r3, #29
 80065cc:	d001      	beq.n	80065d2 <__sflush_r+0xb2>
 80065ce:	2b16      	cmp	r3, #22
 80065d0:	d101      	bne.n	80065d6 <__sflush_r+0xb6>
 80065d2:	602f      	str	r7, [r5, #0]
 80065d4:	e7b1      	b.n	800653a <__sflush_r+0x1a>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	e7ad      	b.n	800653c <__sflush_r+0x1c>
 80065e0:	690f      	ldr	r7, [r1, #16]
 80065e2:	2f00      	cmp	r7, #0
 80065e4:	d0a9      	beq.n	800653a <__sflush_r+0x1a>
 80065e6:	0793      	lsls	r3, r2, #30
 80065e8:	680e      	ldr	r6, [r1, #0]
 80065ea:	bf08      	it	eq
 80065ec:	694b      	ldreq	r3, [r1, #20]
 80065ee:	600f      	str	r7, [r1, #0]
 80065f0:	bf18      	it	ne
 80065f2:	2300      	movne	r3, #0
 80065f4:	eba6 0807 	sub.w	r8, r6, r7
 80065f8:	608b      	str	r3, [r1, #8]
 80065fa:	f1b8 0f00 	cmp.w	r8, #0
 80065fe:	dd9c      	ble.n	800653a <__sflush_r+0x1a>
 8006600:	6a21      	ldr	r1, [r4, #32]
 8006602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006604:	4643      	mov	r3, r8
 8006606:	463a      	mov	r2, r7
 8006608:	4628      	mov	r0, r5
 800660a:	47b0      	blx	r6
 800660c:	2800      	cmp	r0, #0
 800660e:	dc06      	bgt.n	800661e <__sflush_r+0xfe>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	e78e      	b.n	800653c <__sflush_r+0x1c>
 800661e:	4407      	add	r7, r0
 8006620:	eba8 0800 	sub.w	r8, r8, r0
 8006624:	e7e9      	b.n	80065fa <__sflush_r+0xda>
 8006626:	bf00      	nop
 8006628:	20400001 	.word	0x20400001

0800662c <_fflush_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	690b      	ldr	r3, [r1, #16]
 8006630:	4605      	mov	r5, r0
 8006632:	460c      	mov	r4, r1
 8006634:	b913      	cbnz	r3, 800663c <_fflush_r+0x10>
 8006636:	2500      	movs	r5, #0
 8006638:	4628      	mov	r0, r5
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	b118      	cbz	r0, 8006646 <_fflush_r+0x1a>
 800663e:	6983      	ldr	r3, [r0, #24]
 8006640:	b90b      	cbnz	r3, 8006646 <_fflush_r+0x1a>
 8006642:	f000 f887 	bl	8006754 <__sinit>
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <_fflush_r+0x6c>)
 8006648:	429c      	cmp	r4, r3
 800664a:	d11b      	bne.n	8006684 <_fflush_r+0x58>
 800664c:	686c      	ldr	r4, [r5, #4]
 800664e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0ef      	beq.n	8006636 <_fflush_r+0xa>
 8006656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006658:	07d0      	lsls	r0, r2, #31
 800665a:	d404      	bmi.n	8006666 <_fflush_r+0x3a>
 800665c:	0599      	lsls	r1, r3, #22
 800665e:	d402      	bmi.n	8006666 <_fflush_r+0x3a>
 8006660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006662:	f000 f915 	bl	8006890 <__retarget_lock_acquire_recursive>
 8006666:	4628      	mov	r0, r5
 8006668:	4621      	mov	r1, r4
 800666a:	f7ff ff59 	bl	8006520 <__sflush_r>
 800666e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006670:	07da      	lsls	r2, r3, #31
 8006672:	4605      	mov	r5, r0
 8006674:	d4e0      	bmi.n	8006638 <_fflush_r+0xc>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	059b      	lsls	r3, r3, #22
 800667a:	d4dd      	bmi.n	8006638 <_fflush_r+0xc>
 800667c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800667e:	f000 f908 	bl	8006892 <__retarget_lock_release_recursive>
 8006682:	e7d9      	b.n	8006638 <_fflush_r+0xc>
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_fflush_r+0x70>)
 8006686:	429c      	cmp	r4, r3
 8006688:	d101      	bne.n	800668e <_fflush_r+0x62>
 800668a:	68ac      	ldr	r4, [r5, #8]
 800668c:	e7df      	b.n	800664e <_fflush_r+0x22>
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <_fflush_r+0x74>)
 8006690:	429c      	cmp	r4, r3
 8006692:	bf08      	it	eq
 8006694:	68ec      	ldreq	r4, [r5, #12]
 8006696:	e7da      	b.n	800664e <_fflush_r+0x22>
 8006698:	0800a3ac 	.word	0x0800a3ac
 800669c:	0800a3cc 	.word	0x0800a3cc
 80066a0:	0800a38c 	.word	0x0800a38c

080066a4 <std>:
 80066a4:	2300      	movs	r3, #0
 80066a6:	b510      	push	{r4, lr}
 80066a8:	4604      	mov	r4, r0
 80066aa:	e9c0 3300 	strd	r3, r3, [r0]
 80066ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b2:	6083      	str	r3, [r0, #8]
 80066b4:	8181      	strh	r1, [r0, #12]
 80066b6:	6643      	str	r3, [r0, #100]	; 0x64
 80066b8:	81c2      	strh	r2, [r0, #14]
 80066ba:	6183      	str	r3, [r0, #24]
 80066bc:	4619      	mov	r1, r3
 80066be:	2208      	movs	r2, #8
 80066c0:	305c      	adds	r0, #92	; 0x5c
 80066c2:	f7ff fcc7 	bl	8006054 <memset>
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <std+0x38>)
 80066c8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <std+0x3c>)
 80066cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <std+0x40>)
 80066d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <std+0x44>)
 80066d4:	6224      	str	r4, [r4, #32]
 80066d6:	6323      	str	r3, [r4, #48]	; 0x30
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	0800720d 	.word	0x0800720d
 80066e0:	0800722f 	.word	0x0800722f
 80066e4:	08007267 	.word	0x08007267
 80066e8:	0800728b 	.word	0x0800728b

080066ec <_cleanup_r>:
 80066ec:	4901      	ldr	r1, [pc, #4]	; (80066f4 <_cleanup_r+0x8>)
 80066ee:	f000 b8af 	b.w	8006850 <_fwalk_reent>
 80066f2:	bf00      	nop
 80066f4:	0800662d 	.word	0x0800662d

080066f8 <__sfmoreglue>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	2268      	movs	r2, #104	; 0x68
 80066fc:	1e4d      	subs	r5, r1, #1
 80066fe:	4355      	muls	r5, r2
 8006700:	460e      	mov	r6, r1
 8006702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006706:	f7ff fd19 	bl	800613c <_malloc_r>
 800670a:	4604      	mov	r4, r0
 800670c:	b140      	cbz	r0, 8006720 <__sfmoreglue+0x28>
 800670e:	2100      	movs	r1, #0
 8006710:	e9c0 1600 	strd	r1, r6, [r0]
 8006714:	300c      	adds	r0, #12
 8006716:	60a0      	str	r0, [r4, #8]
 8006718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800671c:	f7ff fc9a 	bl	8006054 <memset>
 8006720:	4620      	mov	r0, r4
 8006722:	bd70      	pop	{r4, r5, r6, pc}

08006724 <__sfp_lock_acquire>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__sfp_lock_acquire+0x8>)
 8006726:	f000 b8b3 	b.w	8006890 <__retarget_lock_acquire_recursive>
 800672a:	bf00      	nop
 800672c:	200001e5 	.word	0x200001e5

08006730 <__sfp_lock_release>:
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <__sfp_lock_release+0x8>)
 8006732:	f000 b8ae 	b.w	8006892 <__retarget_lock_release_recursive>
 8006736:	bf00      	nop
 8006738:	200001e5 	.word	0x200001e5

0800673c <__sinit_lock_acquire>:
 800673c:	4801      	ldr	r0, [pc, #4]	; (8006744 <__sinit_lock_acquire+0x8>)
 800673e:	f000 b8a7 	b.w	8006890 <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	200001e6 	.word	0x200001e6

08006748 <__sinit_lock_release>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__sinit_lock_release+0x8>)
 800674a:	f000 b8a2 	b.w	8006892 <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	200001e6 	.word	0x200001e6

08006754 <__sinit>:
 8006754:	b510      	push	{r4, lr}
 8006756:	4604      	mov	r4, r0
 8006758:	f7ff fff0 	bl	800673c <__sinit_lock_acquire>
 800675c:	69a3      	ldr	r3, [r4, #24]
 800675e:	b11b      	cbz	r3, 8006768 <__sinit+0x14>
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f7ff bff0 	b.w	8006748 <__sinit_lock_release>
 8006768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800676c:	6523      	str	r3, [r4, #80]	; 0x50
 800676e:	4b13      	ldr	r3, [pc, #76]	; (80067bc <__sinit+0x68>)
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <__sinit+0x6c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	62a2      	str	r2, [r4, #40]	; 0x28
 8006776:	42a3      	cmp	r3, r4
 8006778:	bf04      	itt	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	61a3      	streq	r3, [r4, #24]
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f820 	bl	80067c4 <__sfp>
 8006784:	6060      	str	r0, [r4, #4]
 8006786:	4620      	mov	r0, r4
 8006788:	f000 f81c 	bl	80067c4 <__sfp>
 800678c:	60a0      	str	r0, [r4, #8]
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f818 	bl	80067c4 <__sfp>
 8006794:	2200      	movs	r2, #0
 8006796:	60e0      	str	r0, [r4, #12]
 8006798:	2104      	movs	r1, #4
 800679a:	6860      	ldr	r0, [r4, #4]
 800679c:	f7ff ff82 	bl	80066a4 <std>
 80067a0:	68a0      	ldr	r0, [r4, #8]
 80067a2:	2201      	movs	r2, #1
 80067a4:	2109      	movs	r1, #9
 80067a6:	f7ff ff7d 	bl	80066a4 <std>
 80067aa:	68e0      	ldr	r0, [r4, #12]
 80067ac:	2202      	movs	r2, #2
 80067ae:	2112      	movs	r1, #18
 80067b0:	f7ff ff78 	bl	80066a4 <std>
 80067b4:	2301      	movs	r3, #1
 80067b6:	61a3      	str	r3, [r4, #24]
 80067b8:	e7d2      	b.n	8006760 <__sinit+0xc>
 80067ba:	bf00      	nop
 80067bc:	0800a388 	.word	0x0800a388
 80067c0:	080066ed 	.word	0x080066ed

080067c4 <__sfp>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	4607      	mov	r7, r0
 80067c8:	f7ff ffac 	bl	8006724 <__sfp_lock_acquire>
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <__sfp+0x84>)
 80067ce:	681e      	ldr	r6, [r3, #0]
 80067d0:	69b3      	ldr	r3, [r6, #24]
 80067d2:	b913      	cbnz	r3, 80067da <__sfp+0x16>
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ffbd 	bl	8006754 <__sinit>
 80067da:	3648      	adds	r6, #72	; 0x48
 80067dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	d503      	bpl.n	80067ec <__sfp+0x28>
 80067e4:	6833      	ldr	r3, [r6, #0]
 80067e6:	b30b      	cbz	r3, 800682c <__sfp+0x68>
 80067e8:	6836      	ldr	r6, [r6, #0]
 80067ea:	e7f7      	b.n	80067dc <__sfp+0x18>
 80067ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067f0:	b9d5      	cbnz	r5, 8006828 <__sfp+0x64>
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <__sfp+0x88>)
 80067f4:	60e3      	str	r3, [r4, #12]
 80067f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067fa:	6665      	str	r5, [r4, #100]	; 0x64
 80067fc:	f000 f847 	bl	800688e <__retarget_lock_init_recursive>
 8006800:	f7ff ff96 	bl	8006730 <__sfp_lock_release>
 8006804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800680c:	6025      	str	r5, [r4, #0]
 800680e:	61a5      	str	r5, [r4, #24]
 8006810:	2208      	movs	r2, #8
 8006812:	4629      	mov	r1, r5
 8006814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006818:	f7ff fc1c 	bl	8006054 <memset>
 800681c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006824:	4620      	mov	r0, r4
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006828:	3468      	adds	r4, #104	; 0x68
 800682a:	e7d9      	b.n	80067e0 <__sfp+0x1c>
 800682c:	2104      	movs	r1, #4
 800682e:	4638      	mov	r0, r7
 8006830:	f7ff ff62 	bl	80066f8 <__sfmoreglue>
 8006834:	4604      	mov	r4, r0
 8006836:	6030      	str	r0, [r6, #0]
 8006838:	2800      	cmp	r0, #0
 800683a:	d1d5      	bne.n	80067e8 <__sfp+0x24>
 800683c:	f7ff ff78 	bl	8006730 <__sfp_lock_release>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	e7ee      	b.n	8006824 <__sfp+0x60>
 8006846:	bf00      	nop
 8006848:	0800a388 	.word	0x0800a388
 800684c:	ffff0001 	.word	0xffff0001

08006850 <_fwalk_reent>:
 8006850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006854:	4606      	mov	r6, r0
 8006856:	4688      	mov	r8, r1
 8006858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800685c:	2700      	movs	r7, #0
 800685e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006862:	f1b9 0901 	subs.w	r9, r9, #1
 8006866:	d505      	bpl.n	8006874 <_fwalk_reent+0x24>
 8006868:	6824      	ldr	r4, [r4, #0]
 800686a:	2c00      	cmp	r4, #0
 800686c:	d1f7      	bne.n	800685e <_fwalk_reent+0xe>
 800686e:	4638      	mov	r0, r7
 8006870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006874:	89ab      	ldrh	r3, [r5, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d907      	bls.n	800688a <_fwalk_reent+0x3a>
 800687a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800687e:	3301      	adds	r3, #1
 8006880:	d003      	beq.n	800688a <_fwalk_reent+0x3a>
 8006882:	4629      	mov	r1, r5
 8006884:	4630      	mov	r0, r6
 8006886:	47c0      	blx	r8
 8006888:	4307      	orrs	r7, r0
 800688a:	3568      	adds	r5, #104	; 0x68
 800688c:	e7e9      	b.n	8006862 <_fwalk_reent+0x12>

0800688e <__retarget_lock_init_recursive>:
 800688e:	4770      	bx	lr

08006890 <__retarget_lock_acquire_recursive>:
 8006890:	4770      	bx	lr

08006892 <__retarget_lock_release_recursive>:
 8006892:	4770      	bx	lr

08006894 <__swhatbuf_r>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	460e      	mov	r6, r1
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	2900      	cmp	r1, #0
 800689e:	b096      	sub	sp, #88	; 0x58
 80068a0:	4614      	mov	r4, r2
 80068a2:	461d      	mov	r5, r3
 80068a4:	da08      	bge.n	80068b8 <__swhatbuf_r+0x24>
 80068a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	602a      	str	r2, [r5, #0]
 80068ae:	061a      	lsls	r2, r3, #24
 80068b0:	d410      	bmi.n	80068d4 <__swhatbuf_r+0x40>
 80068b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b6:	e00e      	b.n	80068d6 <__swhatbuf_r+0x42>
 80068b8:	466a      	mov	r2, sp
 80068ba:	f000 fd0d 	bl	80072d8 <_fstat_r>
 80068be:	2800      	cmp	r0, #0
 80068c0:	dbf1      	blt.n	80068a6 <__swhatbuf_r+0x12>
 80068c2:	9a01      	ldr	r2, [sp, #4]
 80068c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068cc:	425a      	negs	r2, r3
 80068ce:	415a      	adcs	r2, r3
 80068d0:	602a      	str	r2, [r5, #0]
 80068d2:	e7ee      	b.n	80068b2 <__swhatbuf_r+0x1e>
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	2000      	movs	r0, #0
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	b016      	add	sp, #88	; 0x58
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080068e0 <__smakebuf_r>:
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068e4:	079d      	lsls	r5, r3, #30
 80068e6:	4606      	mov	r6, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	d507      	bpl.n	80068fc <__smakebuf_r+0x1c>
 80068ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	2301      	movs	r3, #1
 80068f6:	6163      	str	r3, [r4, #20]
 80068f8:	b002      	add	sp, #8
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	ab01      	add	r3, sp, #4
 80068fe:	466a      	mov	r2, sp
 8006900:	f7ff ffc8 	bl	8006894 <__swhatbuf_r>
 8006904:	9900      	ldr	r1, [sp, #0]
 8006906:	4605      	mov	r5, r0
 8006908:	4630      	mov	r0, r6
 800690a:	f7ff fc17 	bl	800613c <_malloc_r>
 800690e:	b948      	cbnz	r0, 8006924 <__smakebuf_r+0x44>
 8006910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006914:	059a      	lsls	r2, r3, #22
 8006916:	d4ef      	bmi.n	80068f8 <__smakebuf_r+0x18>
 8006918:	f023 0303 	bic.w	r3, r3, #3
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	e7e3      	b.n	80068ec <__smakebuf_r+0xc>
 8006924:	4b0d      	ldr	r3, [pc, #52]	; (800695c <__smakebuf_r+0x7c>)
 8006926:	62b3      	str	r3, [r6, #40]	; 0x28
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	6020      	str	r0, [r4, #0]
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	6163      	str	r3, [r4, #20]
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	6120      	str	r0, [r4, #16]
 800693a:	b15b      	cbz	r3, 8006954 <__smakebuf_r+0x74>
 800693c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006940:	4630      	mov	r0, r6
 8006942:	f000 fcdb 	bl	80072fc <_isatty_r>
 8006946:	b128      	cbz	r0, 8006954 <__smakebuf_r+0x74>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	89a0      	ldrh	r0, [r4, #12]
 8006956:	4305      	orrs	r5, r0
 8006958:	81a5      	strh	r5, [r4, #12]
 800695a:	e7cd      	b.n	80068f8 <__smakebuf_r+0x18>
 800695c:	080066ed 	.word	0x080066ed

08006960 <__malloc_lock>:
 8006960:	4801      	ldr	r0, [pc, #4]	; (8006968 <__malloc_lock+0x8>)
 8006962:	f7ff bf95 	b.w	8006890 <__retarget_lock_acquire_recursive>
 8006966:	bf00      	nop
 8006968:	200001e4 	.word	0x200001e4

0800696c <__malloc_unlock>:
 800696c:	4801      	ldr	r0, [pc, #4]	; (8006974 <__malloc_unlock+0x8>)
 800696e:	f7ff bf90 	b.w	8006892 <__retarget_lock_release_recursive>
 8006972:	bf00      	nop
 8006974:	200001e4 	.word	0x200001e4

08006978 <__ssputs_r>:
 8006978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697c:	688e      	ldr	r6, [r1, #8]
 800697e:	429e      	cmp	r6, r3
 8006980:	4682      	mov	sl, r0
 8006982:	460c      	mov	r4, r1
 8006984:	4690      	mov	r8, r2
 8006986:	461f      	mov	r7, r3
 8006988:	d838      	bhi.n	80069fc <__ssputs_r+0x84>
 800698a:	898a      	ldrh	r2, [r1, #12]
 800698c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006990:	d032      	beq.n	80069f8 <__ssputs_r+0x80>
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	6909      	ldr	r1, [r1, #16]
 8006996:	eba5 0901 	sub.w	r9, r5, r1
 800699a:	6965      	ldr	r5, [r4, #20]
 800699c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a4:	3301      	adds	r3, #1
 80069a6:	444b      	add	r3, r9
 80069a8:	106d      	asrs	r5, r5, #1
 80069aa:	429d      	cmp	r5, r3
 80069ac:	bf38      	it	cc
 80069ae:	461d      	movcc	r5, r3
 80069b0:	0553      	lsls	r3, r2, #21
 80069b2:	d531      	bpl.n	8006a18 <__ssputs_r+0xa0>
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7ff fbc1 	bl	800613c <_malloc_r>
 80069ba:	4606      	mov	r6, r0
 80069bc:	b950      	cbnz	r0, 80069d4 <__ssputs_r+0x5c>
 80069be:	230c      	movs	r3, #12
 80069c0:	f8ca 3000 	str.w	r3, [sl]
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d4:	6921      	ldr	r1, [r4, #16]
 80069d6:	464a      	mov	r2, r9
 80069d8:	f7ff fb2e 	bl	8006038 <memcpy>
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	6126      	str	r6, [r4, #16]
 80069ea:	6165      	str	r5, [r4, #20]
 80069ec:	444e      	add	r6, r9
 80069ee:	eba5 0509 	sub.w	r5, r5, r9
 80069f2:	6026      	str	r6, [r4, #0]
 80069f4:	60a5      	str	r5, [r4, #8]
 80069f6:	463e      	mov	r6, r7
 80069f8:	42be      	cmp	r6, r7
 80069fa:	d900      	bls.n	80069fe <__ssputs_r+0x86>
 80069fc:	463e      	mov	r6, r7
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	4632      	mov	r2, r6
 8006a02:	4641      	mov	r1, r8
 8006a04:	f000 fc9c 	bl	8007340 <memmove>
 8006a08:	68a3      	ldr	r3, [r4, #8]
 8006a0a:	1b9b      	subs	r3, r3, r6
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	4433      	add	r3, r6
 8006a12:	6023      	str	r3, [r4, #0]
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7db      	b.n	80069d0 <__ssputs_r+0x58>
 8006a18:	462a      	mov	r2, r5
 8006a1a:	f000 fcab 	bl	8007374 <_realloc_r>
 8006a1e:	4606      	mov	r6, r0
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1e1      	bne.n	80069e8 <__ssputs_r+0x70>
 8006a24:	6921      	ldr	r1, [r4, #16]
 8006a26:	4650      	mov	r0, sl
 8006a28:	f7ff fb1c 	bl	8006064 <_free_r>
 8006a2c:	e7c7      	b.n	80069be <__ssputs_r+0x46>
	...

08006a30 <_svfiprintf_r>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	4698      	mov	r8, r3
 8006a36:	898b      	ldrh	r3, [r1, #12]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	b09d      	sub	sp, #116	; 0x74
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	d50e      	bpl.n	8006a62 <_svfiprintf_r+0x32>
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	b963      	cbnz	r3, 8006a62 <_svfiprintf_r+0x32>
 8006a48:	2140      	movs	r1, #64	; 0x40
 8006a4a:	f7ff fb77 	bl	800613c <_malloc_r>
 8006a4e:	6028      	str	r0, [r5, #0]
 8006a50:	6128      	str	r0, [r5, #16]
 8006a52:	b920      	cbnz	r0, 8006a5e <_svfiprintf_r+0x2e>
 8006a54:	230c      	movs	r3, #12
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	e0d1      	b.n	8006c02 <_svfiprintf_r+0x1d2>
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	616b      	str	r3, [r5, #20]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9309      	str	r3, [sp, #36]	; 0x24
 8006a66:	2320      	movs	r3, #32
 8006a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a70:	2330      	movs	r3, #48	; 0x30
 8006a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c1c <_svfiprintf_r+0x1ec>
 8006a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7a:	f04f 0901 	mov.w	r9, #1
 8006a7e:	4623      	mov	r3, r4
 8006a80:	469a      	mov	sl, r3
 8006a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a86:	b10a      	cbz	r2, 8006a8c <_svfiprintf_r+0x5c>
 8006a88:	2a25      	cmp	r2, #37	; 0x25
 8006a8a:	d1f9      	bne.n	8006a80 <_svfiprintf_r+0x50>
 8006a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a90:	d00b      	beq.n	8006aaa <_svfiprintf_r+0x7a>
 8006a92:	465b      	mov	r3, fp
 8006a94:	4622      	mov	r2, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7ff ff6d 	bl	8006978 <__ssputs_r>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f000 80aa 	beq.w	8006bf8 <_svfiprintf_r+0x1c8>
 8006aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa6:	445a      	add	r2, fp
 8006aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a2 	beq.w	8006bf8 <_svfiprintf_r+0x1c8>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006abe:	f10a 0a01 	add.w	sl, sl, #1
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	9307      	str	r3, [sp, #28]
 8006ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aca:	931a      	str	r3, [sp, #104]	; 0x68
 8006acc:	4654      	mov	r4, sl
 8006ace:	2205      	movs	r2, #5
 8006ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad4:	4851      	ldr	r0, [pc, #324]	; (8006c1c <_svfiprintf_r+0x1ec>)
 8006ad6:	f7f9 fb9b 	bl	8000210 <memchr>
 8006ada:	9a04      	ldr	r2, [sp, #16]
 8006adc:	b9d8      	cbnz	r0, 8006b16 <_svfiprintf_r+0xe6>
 8006ade:	06d0      	lsls	r0, r2, #27
 8006ae0:	bf44      	itt	mi
 8006ae2:	2320      	movmi	r3, #32
 8006ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae8:	0711      	lsls	r1, r2, #28
 8006aea:	bf44      	itt	mi
 8006aec:	232b      	movmi	r3, #43	; 0x2b
 8006aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af2:	f89a 3000 	ldrb.w	r3, [sl]
 8006af6:	2b2a      	cmp	r3, #42	; 0x2a
 8006af8:	d015      	beq.n	8006b26 <_svfiprintf_r+0xf6>
 8006afa:	9a07      	ldr	r2, [sp, #28]
 8006afc:	4654      	mov	r4, sl
 8006afe:	2000      	movs	r0, #0
 8006b00:	f04f 0c0a 	mov.w	ip, #10
 8006b04:	4621      	mov	r1, r4
 8006b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0a:	3b30      	subs	r3, #48	; 0x30
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d94e      	bls.n	8006bae <_svfiprintf_r+0x17e>
 8006b10:	b1b0      	cbz	r0, 8006b40 <_svfiprintf_r+0x110>
 8006b12:	9207      	str	r2, [sp, #28]
 8006b14:	e014      	b.n	8006b40 <_svfiprintf_r+0x110>
 8006b16:	eba0 0308 	sub.w	r3, r0, r8
 8006b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	46a2      	mov	sl, r4
 8006b24:	e7d2      	b.n	8006acc <_svfiprintf_r+0x9c>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	1d19      	adds	r1, r3, #4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	9103      	str	r1, [sp, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfbb      	ittet	lt
 8006b32:	425b      	neglt	r3, r3
 8006b34:	f042 0202 	orrlt.w	r2, r2, #2
 8006b38:	9307      	strge	r3, [sp, #28]
 8006b3a:	9307      	strlt	r3, [sp, #28]
 8006b3c:	bfb8      	it	lt
 8006b3e:	9204      	strlt	r2, [sp, #16]
 8006b40:	7823      	ldrb	r3, [r4, #0]
 8006b42:	2b2e      	cmp	r3, #46	; 0x2e
 8006b44:	d10c      	bne.n	8006b60 <_svfiprintf_r+0x130>
 8006b46:	7863      	ldrb	r3, [r4, #1]
 8006b48:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4a:	d135      	bne.n	8006bb8 <_svfiprintf_r+0x188>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfb8      	it	lt
 8006b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b5c:	3402      	adds	r4, #2
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c2c <_svfiprintf_r+0x1fc>
 8006b64:	7821      	ldrb	r1, [r4, #0]
 8006b66:	2203      	movs	r2, #3
 8006b68:	4650      	mov	r0, sl
 8006b6a:	f7f9 fb51 	bl	8000210 <memchr>
 8006b6e:	b140      	cbz	r0, 8006b82 <_svfiprintf_r+0x152>
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	eba0 000a 	sub.w	r0, r0, sl
 8006b76:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	4303      	orrs	r3, r0
 8006b7e:	3401      	adds	r4, #1
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b86:	4826      	ldr	r0, [pc, #152]	; (8006c20 <_svfiprintf_r+0x1f0>)
 8006b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b8c:	2206      	movs	r2, #6
 8006b8e:	f7f9 fb3f 	bl	8000210 <memchr>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d038      	beq.n	8006c08 <_svfiprintf_r+0x1d8>
 8006b96:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <_svfiprintf_r+0x1f4>)
 8006b98:	bb1b      	cbnz	r3, 8006be2 <_svfiprintf_r+0x1b2>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	f023 0307 	bic.w	r3, r3, #7
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	9303      	str	r3, [sp, #12]
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	4433      	add	r3, r6
 8006baa:	9309      	str	r3, [sp, #36]	; 0x24
 8006bac:	e767      	b.n	8006a7e <_svfiprintf_r+0x4e>
 8006bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	e7a5      	b.n	8006b04 <_svfiprintf_r+0xd4>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	3401      	adds	r4, #1
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f04f 0c0a 	mov.w	ip, #10
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bca:	3a30      	subs	r2, #48	; 0x30
 8006bcc:	2a09      	cmp	r2, #9
 8006bce:	d903      	bls.n	8006bd8 <_svfiprintf_r+0x1a8>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0c5      	beq.n	8006b60 <_svfiprintf_r+0x130>
 8006bd4:	9105      	str	r1, [sp, #20]
 8006bd6:	e7c3      	b.n	8006b60 <_svfiprintf_r+0x130>
 8006bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bdc:	4604      	mov	r4, r0
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7f0      	b.n	8006bc4 <_svfiprintf_r+0x194>
 8006be2:	ab03      	add	r3, sp, #12
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	462a      	mov	r2, r5
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <_svfiprintf_r+0x1f8>)
 8006bea:	a904      	add	r1, sp, #16
 8006bec:	4638      	mov	r0, r7
 8006bee:	f3af 8000 	nop.w
 8006bf2:	1c42      	adds	r2, r0, #1
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	d1d6      	bne.n	8006ba6 <_svfiprintf_r+0x176>
 8006bf8:	89ab      	ldrh	r3, [r5, #12]
 8006bfa:	065b      	lsls	r3, r3, #25
 8006bfc:	f53f af2c 	bmi.w	8006a58 <_svfiprintf_r+0x28>
 8006c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c02:	b01d      	add	sp, #116	; 0x74
 8006c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c08:	ab03      	add	r3, sp, #12
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <_svfiprintf_r+0x1f8>)
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	4638      	mov	r0, r7
 8006c14:	f000 f9d4 	bl	8006fc0 <_printf_i>
 8006c18:	e7eb      	b.n	8006bf2 <_svfiprintf_r+0x1c2>
 8006c1a:	bf00      	nop
 8006c1c:	0800a3ec 	.word	0x0800a3ec
 8006c20:	0800a3f6 	.word	0x0800a3f6
 8006c24:	00000000 	.word	0x00000000
 8006c28:	08006979 	.word	0x08006979
 8006c2c:	0800a3f2 	.word	0x0800a3f2

08006c30 <__sfputc_r>:
 8006c30:	6893      	ldr	r3, [r2, #8]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	b410      	push	{r4}
 8006c38:	6093      	str	r3, [r2, #8]
 8006c3a:	da08      	bge.n	8006c4e <__sfputc_r+0x1e>
 8006c3c:	6994      	ldr	r4, [r2, #24]
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	db01      	blt.n	8006c46 <__sfputc_r+0x16>
 8006c42:	290a      	cmp	r1, #10
 8006c44:	d103      	bne.n	8006c4e <__sfputc_r+0x1e>
 8006c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c4a:	f7ff bba9 	b.w	80063a0 <__swbuf_r>
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	1c58      	adds	r0, r3, #1
 8006c52:	6010      	str	r0, [r2, #0]
 8006c54:	7019      	strb	r1, [r3, #0]
 8006c56:	4608      	mov	r0, r1
 8006c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <__sfputs_r>:
 8006c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c60:	4606      	mov	r6, r0
 8006c62:	460f      	mov	r7, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	18d5      	adds	r5, r2, r3
 8006c68:	42ac      	cmp	r4, r5
 8006c6a:	d101      	bne.n	8006c70 <__sfputs_r+0x12>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e007      	b.n	8006c80 <__sfputs_r+0x22>
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	463a      	mov	r2, r7
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffda 	bl	8006c30 <__sfputc_r>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d1f3      	bne.n	8006c68 <__sfputs_r+0xa>
 8006c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c84 <_vfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	460d      	mov	r5, r1
 8006c8a:	b09d      	sub	sp, #116	; 0x74
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	4698      	mov	r8, r3
 8006c90:	4606      	mov	r6, r0
 8006c92:	b118      	cbz	r0, 8006c9c <_vfiprintf_r+0x18>
 8006c94:	6983      	ldr	r3, [r0, #24]
 8006c96:	b90b      	cbnz	r3, 8006c9c <_vfiprintf_r+0x18>
 8006c98:	f7ff fd5c 	bl	8006754 <__sinit>
 8006c9c:	4b89      	ldr	r3, [pc, #548]	; (8006ec4 <_vfiprintf_r+0x240>)
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	d11b      	bne.n	8006cda <_vfiprintf_r+0x56>
 8006ca2:	6875      	ldr	r5, [r6, #4]
 8006ca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ca6:	07d9      	lsls	r1, r3, #31
 8006ca8:	d405      	bmi.n	8006cb6 <_vfiprintf_r+0x32>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	059a      	lsls	r2, r3, #22
 8006cae:	d402      	bmi.n	8006cb6 <_vfiprintf_r+0x32>
 8006cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cb2:	f7ff fded 	bl	8006890 <__retarget_lock_acquire_recursive>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	071b      	lsls	r3, r3, #28
 8006cba:	d501      	bpl.n	8006cc0 <_vfiprintf_r+0x3c>
 8006cbc:	692b      	ldr	r3, [r5, #16]
 8006cbe:	b9eb      	cbnz	r3, 8006cfc <_vfiprintf_r+0x78>
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff fbbe 	bl	8006444 <__swsetup_r>
 8006cc8:	b1c0      	cbz	r0, 8006cfc <_vfiprintf_r+0x78>
 8006cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ccc:	07dc      	lsls	r4, r3, #31
 8006cce:	d50e      	bpl.n	8006cee <_vfiprintf_r+0x6a>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	b01d      	add	sp, #116	; 0x74
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	4b7b      	ldr	r3, [pc, #492]	; (8006ec8 <_vfiprintf_r+0x244>)
 8006cdc:	429d      	cmp	r5, r3
 8006cde:	d101      	bne.n	8006ce4 <_vfiprintf_r+0x60>
 8006ce0:	68b5      	ldr	r5, [r6, #8]
 8006ce2:	e7df      	b.n	8006ca4 <_vfiprintf_r+0x20>
 8006ce4:	4b79      	ldr	r3, [pc, #484]	; (8006ecc <_vfiprintf_r+0x248>)
 8006ce6:	429d      	cmp	r5, r3
 8006ce8:	bf08      	it	eq
 8006cea:	68f5      	ldreq	r5, [r6, #12]
 8006cec:	e7da      	b.n	8006ca4 <_vfiprintf_r+0x20>
 8006cee:	89ab      	ldrh	r3, [r5, #12]
 8006cf0:	0598      	lsls	r0, r3, #22
 8006cf2:	d4ed      	bmi.n	8006cd0 <_vfiprintf_r+0x4c>
 8006cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf6:	f7ff fdcc 	bl	8006892 <__retarget_lock_release_recursive>
 8006cfa:	e7e9      	b.n	8006cd0 <_vfiprintf_r+0x4c>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006d00:	2320      	movs	r3, #32
 8006d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d0a:	2330      	movs	r3, #48	; 0x30
 8006d0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ed0 <_vfiprintf_r+0x24c>
 8006d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d14:	f04f 0901 	mov.w	r9, #1
 8006d18:	4623      	mov	r3, r4
 8006d1a:	469a      	mov	sl, r3
 8006d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d20:	b10a      	cbz	r2, 8006d26 <_vfiprintf_r+0xa2>
 8006d22:	2a25      	cmp	r2, #37	; 0x25
 8006d24:	d1f9      	bne.n	8006d1a <_vfiprintf_r+0x96>
 8006d26:	ebba 0b04 	subs.w	fp, sl, r4
 8006d2a:	d00b      	beq.n	8006d44 <_vfiprintf_r+0xc0>
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	4622      	mov	r2, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff ff93 	bl	8006c5e <__sfputs_r>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f000 80aa 	beq.w	8006e92 <_vfiprintf_r+0x20e>
 8006d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d40:	445a      	add	r2, fp
 8006d42:	9209      	str	r2, [sp, #36]	; 0x24
 8006d44:	f89a 3000 	ldrb.w	r3, [sl]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80a2 	beq.w	8006e92 <_vfiprintf_r+0x20e>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d58:	f10a 0a01 	add.w	sl, sl, #1
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d64:	931a      	str	r3, [sp, #104]	; 0x68
 8006d66:	4654      	mov	r4, sl
 8006d68:	2205      	movs	r2, #5
 8006d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d6e:	4858      	ldr	r0, [pc, #352]	; (8006ed0 <_vfiprintf_r+0x24c>)
 8006d70:	f7f9 fa4e 	bl	8000210 <memchr>
 8006d74:	9a04      	ldr	r2, [sp, #16]
 8006d76:	b9d8      	cbnz	r0, 8006db0 <_vfiprintf_r+0x12c>
 8006d78:	06d1      	lsls	r1, r2, #27
 8006d7a:	bf44      	itt	mi
 8006d7c:	2320      	movmi	r3, #32
 8006d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d82:	0713      	lsls	r3, r2, #28
 8006d84:	bf44      	itt	mi
 8006d86:	232b      	movmi	r3, #43	; 0x2b
 8006d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d90:	2b2a      	cmp	r3, #42	; 0x2a
 8006d92:	d015      	beq.n	8006dc0 <_vfiprintf_r+0x13c>
 8006d94:	9a07      	ldr	r2, [sp, #28]
 8006d96:	4654      	mov	r4, sl
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4621      	mov	r1, r4
 8006da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da4:	3b30      	subs	r3, #48	; 0x30
 8006da6:	2b09      	cmp	r3, #9
 8006da8:	d94e      	bls.n	8006e48 <_vfiprintf_r+0x1c4>
 8006daa:	b1b0      	cbz	r0, 8006dda <_vfiprintf_r+0x156>
 8006dac:	9207      	str	r2, [sp, #28]
 8006dae:	e014      	b.n	8006dda <_vfiprintf_r+0x156>
 8006db0:	eba0 0308 	sub.w	r3, r0, r8
 8006db4:	fa09 f303 	lsl.w	r3, r9, r3
 8006db8:	4313      	orrs	r3, r2
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	46a2      	mov	sl, r4
 8006dbe:	e7d2      	b.n	8006d66 <_vfiprintf_r+0xe2>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	1d19      	adds	r1, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	9103      	str	r1, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfbb      	ittet	lt
 8006dcc:	425b      	neglt	r3, r3
 8006dce:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd2:	9307      	strge	r3, [sp, #28]
 8006dd4:	9307      	strlt	r3, [sp, #28]
 8006dd6:	bfb8      	it	lt
 8006dd8:	9204      	strlt	r2, [sp, #16]
 8006dda:	7823      	ldrb	r3, [r4, #0]
 8006ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dde:	d10c      	bne.n	8006dfa <_vfiprintf_r+0x176>
 8006de0:	7863      	ldrb	r3, [r4, #1]
 8006de2:	2b2a      	cmp	r3, #42	; 0x2a
 8006de4:	d135      	bne.n	8006e52 <_vfiprintf_r+0x1ce>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	1d1a      	adds	r2, r3, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	9203      	str	r2, [sp, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfb8      	it	lt
 8006df2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df6:	3402      	adds	r4, #2
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ee0 <_vfiprintf_r+0x25c>
 8006dfe:	7821      	ldrb	r1, [r4, #0]
 8006e00:	2203      	movs	r2, #3
 8006e02:	4650      	mov	r0, sl
 8006e04:	f7f9 fa04 	bl	8000210 <memchr>
 8006e08:	b140      	cbz	r0, 8006e1c <_vfiprintf_r+0x198>
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	eba0 000a 	sub.w	r0, r0, sl
 8006e10:	fa03 f000 	lsl.w	r0, r3, r0
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	4303      	orrs	r3, r0
 8006e18:	3401      	adds	r4, #1
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e20:	482c      	ldr	r0, [pc, #176]	; (8006ed4 <_vfiprintf_r+0x250>)
 8006e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e26:	2206      	movs	r2, #6
 8006e28:	f7f9 f9f2 	bl	8000210 <memchr>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d03f      	beq.n	8006eb0 <_vfiprintf_r+0x22c>
 8006e30:	4b29      	ldr	r3, [pc, #164]	; (8006ed8 <_vfiprintf_r+0x254>)
 8006e32:	bb1b      	cbnz	r3, 8006e7c <_vfiprintf_r+0x1f8>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	3307      	adds	r3, #7
 8006e38:	f023 0307 	bic.w	r3, r3, #7
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	9303      	str	r3, [sp, #12]
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	443b      	add	r3, r7
 8006e44:	9309      	str	r3, [sp, #36]	; 0x24
 8006e46:	e767      	b.n	8006d18 <_vfiprintf_r+0x94>
 8006e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7a5      	b.n	8006d9e <_vfiprintf_r+0x11a>
 8006e52:	2300      	movs	r3, #0
 8006e54:	3401      	adds	r4, #1
 8006e56:	9305      	str	r3, [sp, #20]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f04f 0c0a 	mov.w	ip, #10
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e64:	3a30      	subs	r2, #48	; 0x30
 8006e66:	2a09      	cmp	r2, #9
 8006e68:	d903      	bls.n	8006e72 <_vfiprintf_r+0x1ee>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0c5      	beq.n	8006dfa <_vfiprintf_r+0x176>
 8006e6e:	9105      	str	r1, [sp, #20]
 8006e70:	e7c3      	b.n	8006dfa <_vfiprintf_r+0x176>
 8006e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e76:	4604      	mov	r4, r0
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e7f0      	b.n	8006e5e <_vfiprintf_r+0x1da>
 8006e7c:	ab03      	add	r3, sp, #12
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	462a      	mov	r2, r5
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <_vfiprintf_r+0x258>)
 8006e84:	a904      	add	r1, sp, #16
 8006e86:	4630      	mov	r0, r6
 8006e88:	f3af 8000 	nop.w
 8006e8c:	4607      	mov	r7, r0
 8006e8e:	1c78      	adds	r0, r7, #1
 8006e90:	d1d6      	bne.n	8006e40 <_vfiprintf_r+0x1bc>
 8006e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e94:	07d9      	lsls	r1, r3, #31
 8006e96:	d405      	bmi.n	8006ea4 <_vfiprintf_r+0x220>
 8006e98:	89ab      	ldrh	r3, [r5, #12]
 8006e9a:	059a      	lsls	r2, r3, #22
 8006e9c:	d402      	bmi.n	8006ea4 <_vfiprintf_r+0x220>
 8006e9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea0:	f7ff fcf7 	bl	8006892 <__retarget_lock_release_recursive>
 8006ea4:	89ab      	ldrh	r3, [r5, #12]
 8006ea6:	065b      	lsls	r3, r3, #25
 8006ea8:	f53f af12 	bmi.w	8006cd0 <_vfiprintf_r+0x4c>
 8006eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eae:	e711      	b.n	8006cd4 <_vfiprintf_r+0x50>
 8006eb0:	ab03      	add	r3, sp, #12
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <_vfiprintf_r+0x258>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f000 f880 	bl	8006fc0 <_printf_i>
 8006ec0:	e7e4      	b.n	8006e8c <_vfiprintf_r+0x208>
 8006ec2:	bf00      	nop
 8006ec4:	0800a3ac 	.word	0x0800a3ac
 8006ec8:	0800a3cc 	.word	0x0800a3cc
 8006ecc:	0800a38c 	.word	0x0800a38c
 8006ed0:	0800a3ec 	.word	0x0800a3ec
 8006ed4:	0800a3f6 	.word	0x0800a3f6
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	08006c5f 	.word	0x08006c5f
 8006ee0:	0800a3f2 	.word	0x0800a3f2

08006ee4 <_printf_common>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	4616      	mov	r6, r2
 8006eea:	4699      	mov	r9, r3
 8006eec:	688a      	ldr	r2, [r1, #8]
 8006eee:	690b      	ldr	r3, [r1, #16]
 8006ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	bfb8      	it	lt
 8006ef8:	4613      	movlt	r3, r2
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f00:	4607      	mov	r7, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b10a      	cbz	r2, 8006f0a <_printf_common+0x26>
 8006f06:	3301      	adds	r3, #1
 8006f08:	6033      	str	r3, [r6, #0]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	0699      	lsls	r1, r3, #26
 8006f0e:	bf42      	ittt	mi
 8006f10:	6833      	ldrmi	r3, [r6, #0]
 8006f12:	3302      	addmi	r3, #2
 8006f14:	6033      	strmi	r3, [r6, #0]
 8006f16:	6825      	ldr	r5, [r4, #0]
 8006f18:	f015 0506 	ands.w	r5, r5, #6
 8006f1c:	d106      	bne.n	8006f2c <_printf_common+0x48>
 8006f1e:	f104 0a19 	add.w	sl, r4, #25
 8006f22:	68e3      	ldr	r3, [r4, #12]
 8006f24:	6832      	ldr	r2, [r6, #0]
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	dc26      	bgt.n	8006f7a <_printf_common+0x96>
 8006f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f30:	1e13      	subs	r3, r2, #0
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	bf18      	it	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	0692      	lsls	r2, r2, #26
 8006f3a:	d42b      	bmi.n	8006f94 <_printf_common+0xb0>
 8006f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f40:	4649      	mov	r1, r9
 8006f42:	4638      	mov	r0, r7
 8006f44:	47c0      	blx	r8
 8006f46:	3001      	adds	r0, #1
 8006f48:	d01e      	beq.n	8006f88 <_printf_common+0xa4>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	68e5      	ldr	r5, [r4, #12]
 8006f4e:	6832      	ldr	r2, [r6, #0]
 8006f50:	f003 0306 	and.w	r3, r3, #6
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	bf08      	it	eq
 8006f58:	1aad      	subeq	r5, r5, r2
 8006f5a:	68a3      	ldr	r3, [r4, #8]
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	bf0c      	ite	eq
 8006f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f64:	2500      	movne	r5, #0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	bfc4      	itt	gt
 8006f6a:	1a9b      	subgt	r3, r3, r2
 8006f6c:	18ed      	addgt	r5, r5, r3
 8006f6e:	2600      	movs	r6, #0
 8006f70:	341a      	adds	r4, #26
 8006f72:	42b5      	cmp	r5, r6
 8006f74:	d11a      	bne.n	8006fac <_printf_common+0xc8>
 8006f76:	2000      	movs	r0, #0
 8006f78:	e008      	b.n	8006f8c <_printf_common+0xa8>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	4649      	mov	r1, r9
 8006f80:	4638      	mov	r0, r7
 8006f82:	47c0      	blx	r8
 8006f84:	3001      	adds	r0, #1
 8006f86:	d103      	bne.n	8006f90 <_printf_common+0xac>
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f90:	3501      	adds	r5, #1
 8006f92:	e7c6      	b.n	8006f22 <_printf_common+0x3e>
 8006f94:	18e1      	adds	r1, r4, r3
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	2030      	movs	r0, #48	; 0x30
 8006f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f9e:	4422      	add	r2, r4
 8006fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fa8:	3302      	adds	r3, #2
 8006faa:	e7c7      	b.n	8006f3c <_printf_common+0x58>
 8006fac:	2301      	movs	r3, #1
 8006fae:	4622      	mov	r2, r4
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c0      	blx	r8
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d0e6      	beq.n	8006f88 <_printf_common+0xa4>
 8006fba:	3601      	adds	r6, #1
 8006fbc:	e7d9      	b.n	8006f72 <_printf_common+0x8e>
	...

08006fc0 <_printf_i>:
 8006fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	7e0f      	ldrb	r7, [r1, #24]
 8006fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fc8:	2f78      	cmp	r7, #120	; 0x78
 8006fca:	4691      	mov	r9, r2
 8006fcc:	4680      	mov	r8, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	469a      	mov	sl, r3
 8006fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fd6:	d807      	bhi.n	8006fe8 <_printf_i+0x28>
 8006fd8:	2f62      	cmp	r7, #98	; 0x62
 8006fda:	d80a      	bhi.n	8006ff2 <_printf_i+0x32>
 8006fdc:	2f00      	cmp	r7, #0
 8006fde:	f000 80d8 	beq.w	8007192 <_printf_i+0x1d2>
 8006fe2:	2f58      	cmp	r7, #88	; 0x58
 8006fe4:	f000 80a3 	beq.w	800712e <_printf_i+0x16e>
 8006fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ff0:	e03a      	b.n	8007068 <_printf_i+0xa8>
 8006ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ff6:	2b15      	cmp	r3, #21
 8006ff8:	d8f6      	bhi.n	8006fe8 <_printf_i+0x28>
 8006ffa:	a101      	add	r1, pc, #4	; (adr r1, 8007000 <_printf_i+0x40>)
 8006ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007000:	08007059 	.word	0x08007059
 8007004:	0800706d 	.word	0x0800706d
 8007008:	08006fe9 	.word	0x08006fe9
 800700c:	08006fe9 	.word	0x08006fe9
 8007010:	08006fe9 	.word	0x08006fe9
 8007014:	08006fe9 	.word	0x08006fe9
 8007018:	0800706d 	.word	0x0800706d
 800701c:	08006fe9 	.word	0x08006fe9
 8007020:	08006fe9 	.word	0x08006fe9
 8007024:	08006fe9 	.word	0x08006fe9
 8007028:	08006fe9 	.word	0x08006fe9
 800702c:	08007179 	.word	0x08007179
 8007030:	0800709d 	.word	0x0800709d
 8007034:	0800715b 	.word	0x0800715b
 8007038:	08006fe9 	.word	0x08006fe9
 800703c:	08006fe9 	.word	0x08006fe9
 8007040:	0800719b 	.word	0x0800719b
 8007044:	08006fe9 	.word	0x08006fe9
 8007048:	0800709d 	.word	0x0800709d
 800704c:	08006fe9 	.word	0x08006fe9
 8007050:	08006fe9 	.word	0x08006fe9
 8007054:	08007163 	.word	0x08007163
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	602a      	str	r2, [r5, #0]
 8007060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007068:	2301      	movs	r3, #1
 800706a:	e0a3      	b.n	80071b4 <_printf_i+0x1f4>
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	6829      	ldr	r1, [r5, #0]
 8007070:	0606      	lsls	r6, r0, #24
 8007072:	f101 0304 	add.w	r3, r1, #4
 8007076:	d50a      	bpl.n	800708e <_printf_i+0xce>
 8007078:	680e      	ldr	r6, [r1, #0]
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	2e00      	cmp	r6, #0
 800707e:	da03      	bge.n	8007088 <_printf_i+0xc8>
 8007080:	232d      	movs	r3, #45	; 0x2d
 8007082:	4276      	negs	r6, r6
 8007084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007088:	485e      	ldr	r0, [pc, #376]	; (8007204 <_printf_i+0x244>)
 800708a:	230a      	movs	r3, #10
 800708c:	e019      	b.n	80070c2 <_printf_i+0x102>
 800708e:	680e      	ldr	r6, [r1, #0]
 8007090:	602b      	str	r3, [r5, #0]
 8007092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007096:	bf18      	it	ne
 8007098:	b236      	sxthne	r6, r6
 800709a:	e7ef      	b.n	800707c <_printf_i+0xbc>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	6820      	ldr	r0, [r4, #0]
 80070a0:	1d19      	adds	r1, r3, #4
 80070a2:	6029      	str	r1, [r5, #0]
 80070a4:	0601      	lsls	r1, r0, #24
 80070a6:	d501      	bpl.n	80070ac <_printf_i+0xec>
 80070a8:	681e      	ldr	r6, [r3, #0]
 80070aa:	e002      	b.n	80070b2 <_printf_i+0xf2>
 80070ac:	0646      	lsls	r6, r0, #25
 80070ae:	d5fb      	bpl.n	80070a8 <_printf_i+0xe8>
 80070b0:	881e      	ldrh	r6, [r3, #0]
 80070b2:	4854      	ldr	r0, [pc, #336]	; (8007204 <_printf_i+0x244>)
 80070b4:	2f6f      	cmp	r7, #111	; 0x6f
 80070b6:	bf0c      	ite	eq
 80070b8:	2308      	moveq	r3, #8
 80070ba:	230a      	movne	r3, #10
 80070bc:	2100      	movs	r1, #0
 80070be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070c2:	6865      	ldr	r5, [r4, #4]
 80070c4:	60a5      	str	r5, [r4, #8]
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	bfa2      	ittt	ge
 80070ca:	6821      	ldrge	r1, [r4, #0]
 80070cc:	f021 0104 	bicge.w	r1, r1, #4
 80070d0:	6021      	strge	r1, [r4, #0]
 80070d2:	b90e      	cbnz	r6, 80070d8 <_printf_i+0x118>
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	d04d      	beq.n	8007174 <_printf_i+0x1b4>
 80070d8:	4615      	mov	r5, r2
 80070da:	fbb6 f1f3 	udiv	r1, r6, r3
 80070de:	fb03 6711 	mls	r7, r3, r1, r6
 80070e2:	5dc7      	ldrb	r7, [r0, r7]
 80070e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070e8:	4637      	mov	r7, r6
 80070ea:	42bb      	cmp	r3, r7
 80070ec:	460e      	mov	r6, r1
 80070ee:	d9f4      	bls.n	80070da <_printf_i+0x11a>
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d10b      	bne.n	800710c <_printf_i+0x14c>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	07de      	lsls	r6, r3, #31
 80070f8:	d508      	bpl.n	800710c <_printf_i+0x14c>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	4299      	cmp	r1, r3
 8007100:	bfde      	ittt	le
 8007102:	2330      	movle	r3, #48	; 0x30
 8007104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800710c:	1b52      	subs	r2, r2, r5
 800710e:	6122      	str	r2, [r4, #16]
 8007110:	f8cd a000 	str.w	sl, [sp]
 8007114:	464b      	mov	r3, r9
 8007116:	aa03      	add	r2, sp, #12
 8007118:	4621      	mov	r1, r4
 800711a:	4640      	mov	r0, r8
 800711c:	f7ff fee2 	bl	8006ee4 <_printf_common>
 8007120:	3001      	adds	r0, #1
 8007122:	d14c      	bne.n	80071be <_printf_i+0x1fe>
 8007124:	f04f 30ff 	mov.w	r0, #4294967295
 8007128:	b004      	add	sp, #16
 800712a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800712e:	4835      	ldr	r0, [pc, #212]	; (8007204 <_printf_i+0x244>)
 8007130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007134:	6829      	ldr	r1, [r5, #0]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f851 6b04 	ldr.w	r6, [r1], #4
 800713c:	6029      	str	r1, [r5, #0]
 800713e:	061d      	lsls	r5, r3, #24
 8007140:	d514      	bpl.n	800716c <_printf_i+0x1ac>
 8007142:	07df      	lsls	r7, r3, #31
 8007144:	bf44      	itt	mi
 8007146:	f043 0320 	orrmi.w	r3, r3, #32
 800714a:	6023      	strmi	r3, [r4, #0]
 800714c:	b91e      	cbnz	r6, 8007156 <_printf_i+0x196>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	f023 0320 	bic.w	r3, r3, #32
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	2310      	movs	r3, #16
 8007158:	e7b0      	b.n	80070bc <_printf_i+0xfc>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	f043 0320 	orr.w	r3, r3, #32
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	2378      	movs	r3, #120	; 0x78
 8007164:	4828      	ldr	r0, [pc, #160]	; (8007208 <_printf_i+0x248>)
 8007166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800716a:	e7e3      	b.n	8007134 <_printf_i+0x174>
 800716c:	0659      	lsls	r1, r3, #25
 800716e:	bf48      	it	mi
 8007170:	b2b6      	uxthmi	r6, r6
 8007172:	e7e6      	b.n	8007142 <_printf_i+0x182>
 8007174:	4615      	mov	r5, r2
 8007176:	e7bb      	b.n	80070f0 <_printf_i+0x130>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	6826      	ldr	r6, [r4, #0]
 800717c:	6961      	ldr	r1, [r4, #20]
 800717e:	1d18      	adds	r0, r3, #4
 8007180:	6028      	str	r0, [r5, #0]
 8007182:	0635      	lsls	r5, r6, #24
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	d501      	bpl.n	800718c <_printf_i+0x1cc>
 8007188:	6019      	str	r1, [r3, #0]
 800718a:	e002      	b.n	8007192 <_printf_i+0x1d2>
 800718c:	0670      	lsls	r0, r6, #25
 800718e:	d5fb      	bpl.n	8007188 <_printf_i+0x1c8>
 8007190:	8019      	strh	r1, [r3, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	6123      	str	r3, [r4, #16]
 8007196:	4615      	mov	r5, r2
 8007198:	e7ba      	b.n	8007110 <_printf_i+0x150>
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	1d1a      	adds	r2, r3, #4
 800719e:	602a      	str	r2, [r5, #0]
 80071a0:	681d      	ldr	r5, [r3, #0]
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	2100      	movs	r1, #0
 80071a6:	4628      	mov	r0, r5
 80071a8:	f7f9 f832 	bl	8000210 <memchr>
 80071ac:	b108      	cbz	r0, 80071b2 <_printf_i+0x1f2>
 80071ae:	1b40      	subs	r0, r0, r5
 80071b0:	6060      	str	r0, [r4, #4]
 80071b2:	6863      	ldr	r3, [r4, #4]
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	2300      	movs	r3, #0
 80071b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071bc:	e7a8      	b.n	8007110 <_printf_i+0x150>
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4649      	mov	r1, r9
 80071c4:	4640      	mov	r0, r8
 80071c6:	47d0      	blx	sl
 80071c8:	3001      	adds	r0, #1
 80071ca:	d0ab      	beq.n	8007124 <_printf_i+0x164>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	079b      	lsls	r3, r3, #30
 80071d0:	d413      	bmi.n	80071fa <_printf_i+0x23a>
 80071d2:	68e0      	ldr	r0, [r4, #12]
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	4298      	cmp	r0, r3
 80071d8:	bfb8      	it	lt
 80071da:	4618      	movlt	r0, r3
 80071dc:	e7a4      	b.n	8007128 <_printf_i+0x168>
 80071de:	2301      	movs	r3, #1
 80071e0:	4632      	mov	r2, r6
 80071e2:	4649      	mov	r1, r9
 80071e4:	4640      	mov	r0, r8
 80071e6:	47d0      	blx	sl
 80071e8:	3001      	adds	r0, #1
 80071ea:	d09b      	beq.n	8007124 <_printf_i+0x164>
 80071ec:	3501      	adds	r5, #1
 80071ee:	68e3      	ldr	r3, [r4, #12]
 80071f0:	9903      	ldr	r1, [sp, #12]
 80071f2:	1a5b      	subs	r3, r3, r1
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	dcf2      	bgt.n	80071de <_printf_i+0x21e>
 80071f8:	e7eb      	b.n	80071d2 <_printf_i+0x212>
 80071fa:	2500      	movs	r5, #0
 80071fc:	f104 0619 	add.w	r6, r4, #25
 8007200:	e7f5      	b.n	80071ee <_printf_i+0x22e>
 8007202:	bf00      	nop
 8007204:	0800a3fd 	.word	0x0800a3fd
 8007208:	0800a40e 	.word	0x0800a40e

0800720c <__sread>:
 800720c:	b510      	push	{r4, lr}
 800720e:	460c      	mov	r4, r1
 8007210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007214:	f000 f8de 	bl	80073d4 <_read_r>
 8007218:	2800      	cmp	r0, #0
 800721a:	bfab      	itete	ge
 800721c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800721e:	89a3      	ldrhlt	r3, [r4, #12]
 8007220:	181b      	addge	r3, r3, r0
 8007222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007226:	bfac      	ite	ge
 8007228:	6563      	strge	r3, [r4, #84]	; 0x54
 800722a:	81a3      	strhlt	r3, [r4, #12]
 800722c:	bd10      	pop	{r4, pc}

0800722e <__swrite>:
 800722e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	461f      	mov	r7, r3
 8007234:	898b      	ldrh	r3, [r1, #12]
 8007236:	05db      	lsls	r3, r3, #23
 8007238:	4605      	mov	r5, r0
 800723a:	460c      	mov	r4, r1
 800723c:	4616      	mov	r6, r2
 800723e:	d505      	bpl.n	800724c <__swrite+0x1e>
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	2302      	movs	r3, #2
 8007246:	2200      	movs	r2, #0
 8007248:	f000 f868 	bl	800731c <_lseek_r>
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	4628      	mov	r0, r5
 800725e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	f000 b817 	b.w	8007294 <_write_r>

08007266 <__sseek>:
 8007266:	b510      	push	{r4, lr}
 8007268:	460c      	mov	r4, r1
 800726a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726e:	f000 f855 	bl	800731c <_lseek_r>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	bf15      	itete	ne
 8007278:	6560      	strne	r0, [r4, #84]	; 0x54
 800727a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800727e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007282:	81a3      	strheq	r3, [r4, #12]
 8007284:	bf18      	it	ne
 8007286:	81a3      	strhne	r3, [r4, #12]
 8007288:	bd10      	pop	{r4, pc}

0800728a <__sclose>:
 800728a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728e:	f000 b813 	b.w	80072b8 <_close_r>
	...

08007294 <_write_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_write_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7fa fb19 	bl	80018da <_write>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_write_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_write_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	200001e8 	.word	0x200001e8

080072b8 <_close_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_close_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fa fb25 	bl	8001912 <_close>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_close_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_close_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	200001e8 	.word	0x200001e8

080072d8 <_fstat_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_fstat_r+0x20>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	f7fa fb20 	bl	800192a <_fstat>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d102      	bne.n	80072f4 <_fstat_r+0x1c>
 80072ee:	682b      	ldr	r3, [r5, #0]
 80072f0:	b103      	cbz	r3, 80072f4 <_fstat_r+0x1c>
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	bd38      	pop	{r3, r4, r5, pc}
 80072f6:	bf00      	nop
 80072f8:	200001e8 	.word	0x200001e8

080072fc <_isatty_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d06      	ldr	r5, [pc, #24]	; (8007318 <_isatty_r+0x1c>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa fb1f 	bl	800194a <_isatty>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_isatty_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_isatty_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200001e8 	.word	0x200001e8

0800731c <_lseek_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_lseek_r+0x20>)
 8007320:	4604      	mov	r4, r0
 8007322:	4608      	mov	r0, r1
 8007324:	4611      	mov	r1, r2
 8007326:	2200      	movs	r2, #0
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7fa fb18 	bl	8001960 <_lseek>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_lseek_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_lseek_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	200001e8 	.word	0x200001e8

08007340 <memmove>:
 8007340:	4288      	cmp	r0, r1
 8007342:	b510      	push	{r4, lr}
 8007344:	eb01 0402 	add.w	r4, r1, r2
 8007348:	d902      	bls.n	8007350 <memmove+0x10>
 800734a:	4284      	cmp	r4, r0
 800734c:	4623      	mov	r3, r4
 800734e:	d807      	bhi.n	8007360 <memmove+0x20>
 8007350:	1e43      	subs	r3, r0, #1
 8007352:	42a1      	cmp	r1, r4
 8007354:	d008      	beq.n	8007368 <memmove+0x28>
 8007356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800735a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800735e:	e7f8      	b.n	8007352 <memmove+0x12>
 8007360:	4402      	add	r2, r0
 8007362:	4601      	mov	r1, r0
 8007364:	428a      	cmp	r2, r1
 8007366:	d100      	bne.n	800736a <memmove+0x2a>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800736e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007372:	e7f7      	b.n	8007364 <memmove+0x24>

08007374 <_realloc_r>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	4680      	mov	r8, r0
 800737a:	4614      	mov	r4, r2
 800737c:	460e      	mov	r6, r1
 800737e:	b921      	cbnz	r1, 800738a <_realloc_r+0x16>
 8007380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	4611      	mov	r1, r2
 8007386:	f7fe bed9 	b.w	800613c <_malloc_r>
 800738a:	b92a      	cbnz	r2, 8007398 <_realloc_r+0x24>
 800738c:	f7fe fe6a 	bl	8006064 <_free_r>
 8007390:	4625      	mov	r5, r4
 8007392:	4628      	mov	r0, r5
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	f000 f82e 	bl	80073f8 <_malloc_usable_size_r>
 800739c:	4284      	cmp	r4, r0
 800739e:	4607      	mov	r7, r0
 80073a0:	d802      	bhi.n	80073a8 <_realloc_r+0x34>
 80073a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073a6:	d812      	bhi.n	80073ce <_realloc_r+0x5a>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4640      	mov	r0, r8
 80073ac:	f7fe fec6 	bl	800613c <_malloc_r>
 80073b0:	4605      	mov	r5, r0
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d0ed      	beq.n	8007392 <_realloc_r+0x1e>
 80073b6:	42bc      	cmp	r4, r7
 80073b8:	4622      	mov	r2, r4
 80073ba:	4631      	mov	r1, r6
 80073bc:	bf28      	it	cs
 80073be:	463a      	movcs	r2, r7
 80073c0:	f7fe fe3a 	bl	8006038 <memcpy>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7fe fe4c 	bl	8006064 <_free_r>
 80073cc:	e7e1      	b.n	8007392 <_realloc_r+0x1e>
 80073ce:	4635      	mov	r5, r6
 80073d0:	e7df      	b.n	8007392 <_realloc_r+0x1e>
	...

080073d4 <_read_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	; (80073f4 <_read_r+0x20>)
 80073d8:	4604      	mov	r4, r0
 80073da:	4608      	mov	r0, r1
 80073dc:	4611      	mov	r1, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	602a      	str	r2, [r5, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f7fa fa5c 	bl	80018a0 <_read>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_read_r+0x1e>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_read_r+0x1e>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	200001e8 	.word	0x200001e8

080073f8 <_malloc_usable_size_r>:
 80073f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fc:	1f18      	subs	r0, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfbc      	itt	lt
 8007402:	580b      	ldrlt	r3, [r1, r0]
 8007404:	18c0      	addlt	r0, r0, r3
 8007406:	4770      	bx	lr

08007408 <cos>:
 8007408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800740a:	ec53 2b10 	vmov	r2, r3, d0
 800740e:	4826      	ldr	r0, [pc, #152]	; (80074a8 <cos+0xa0>)
 8007410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007414:	4281      	cmp	r1, r0
 8007416:	dc06      	bgt.n	8007426 <cos+0x1e>
 8007418:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80074a0 <cos+0x98>
 800741c:	b005      	add	sp, #20
 800741e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007422:	f000 baa9 	b.w	8007978 <__kernel_cos>
 8007426:	4821      	ldr	r0, [pc, #132]	; (80074ac <cos+0xa4>)
 8007428:	4281      	cmp	r1, r0
 800742a:	dd09      	ble.n	8007440 <cos+0x38>
 800742c:	ee10 0a10 	vmov	r0, s0
 8007430:	4619      	mov	r1, r3
 8007432:	f7f8 ff41 	bl	80002b8 <__aeabi_dsub>
 8007436:	ec41 0b10 	vmov	d0, r0, r1
 800743a:	b005      	add	sp, #20
 800743c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007440:	4668      	mov	r0, sp
 8007442:	f000 f88d 	bl	8007560 <__ieee754_rem_pio2>
 8007446:	f000 0003 	and.w	r0, r0, #3
 800744a:	2801      	cmp	r0, #1
 800744c:	d00b      	beq.n	8007466 <cos+0x5e>
 800744e:	2802      	cmp	r0, #2
 8007450:	d016      	beq.n	8007480 <cos+0x78>
 8007452:	b9e0      	cbnz	r0, 800748e <cos+0x86>
 8007454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007458:	ed9d 0b00 	vldr	d0, [sp]
 800745c:	f000 fa8c 	bl	8007978 <__kernel_cos>
 8007460:	ec51 0b10 	vmov	r0, r1, d0
 8007464:	e7e7      	b.n	8007436 <cos+0x2e>
 8007466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800746a:	ed9d 0b00 	vldr	d0, [sp]
 800746e:	f000 fe9b 	bl	80081a8 <__kernel_sin>
 8007472:	ec53 2b10 	vmov	r2, r3, d0
 8007476:	ee10 0a10 	vmov	r0, s0
 800747a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800747e:	e7da      	b.n	8007436 <cos+0x2e>
 8007480:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007484:	ed9d 0b00 	vldr	d0, [sp]
 8007488:	f000 fa76 	bl	8007978 <__kernel_cos>
 800748c:	e7f1      	b.n	8007472 <cos+0x6a>
 800748e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007492:	ed9d 0b00 	vldr	d0, [sp]
 8007496:	2001      	movs	r0, #1
 8007498:	f000 fe86 	bl	80081a8 <__kernel_sin>
 800749c:	e7e0      	b.n	8007460 <cos+0x58>
 800749e:	bf00      	nop
	...
 80074a8:	3fe921fb 	.word	0x3fe921fb
 80074ac:	7fefffff 	.word	0x7fefffff

080074b0 <sin>:
 80074b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074b2:	ec53 2b10 	vmov	r2, r3, d0
 80074b6:	4828      	ldr	r0, [pc, #160]	; (8007558 <sin+0xa8>)
 80074b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074bc:	4281      	cmp	r1, r0
 80074be:	dc07      	bgt.n	80074d0 <sin+0x20>
 80074c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007550 <sin+0xa0>
 80074c4:	2000      	movs	r0, #0
 80074c6:	b005      	add	sp, #20
 80074c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074cc:	f000 be6c 	b.w	80081a8 <__kernel_sin>
 80074d0:	4822      	ldr	r0, [pc, #136]	; (800755c <sin+0xac>)
 80074d2:	4281      	cmp	r1, r0
 80074d4:	dd09      	ble.n	80074ea <sin+0x3a>
 80074d6:	ee10 0a10 	vmov	r0, s0
 80074da:	4619      	mov	r1, r3
 80074dc:	f7f8 feec 	bl	80002b8 <__aeabi_dsub>
 80074e0:	ec41 0b10 	vmov	d0, r0, r1
 80074e4:	b005      	add	sp, #20
 80074e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ea:	4668      	mov	r0, sp
 80074ec:	f000 f838 	bl	8007560 <__ieee754_rem_pio2>
 80074f0:	f000 0003 	and.w	r0, r0, #3
 80074f4:	2801      	cmp	r0, #1
 80074f6:	d00c      	beq.n	8007512 <sin+0x62>
 80074f8:	2802      	cmp	r0, #2
 80074fa:	d011      	beq.n	8007520 <sin+0x70>
 80074fc:	b9f0      	cbnz	r0, 800753c <sin+0x8c>
 80074fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007502:	ed9d 0b00 	vldr	d0, [sp]
 8007506:	2001      	movs	r0, #1
 8007508:	f000 fe4e 	bl	80081a8 <__kernel_sin>
 800750c:	ec51 0b10 	vmov	r0, r1, d0
 8007510:	e7e6      	b.n	80074e0 <sin+0x30>
 8007512:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007516:	ed9d 0b00 	vldr	d0, [sp]
 800751a:	f000 fa2d 	bl	8007978 <__kernel_cos>
 800751e:	e7f5      	b.n	800750c <sin+0x5c>
 8007520:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007524:	ed9d 0b00 	vldr	d0, [sp]
 8007528:	2001      	movs	r0, #1
 800752a:	f000 fe3d 	bl	80081a8 <__kernel_sin>
 800752e:	ec53 2b10 	vmov	r2, r3, d0
 8007532:	ee10 0a10 	vmov	r0, s0
 8007536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800753a:	e7d1      	b.n	80074e0 <sin+0x30>
 800753c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007540:	ed9d 0b00 	vldr	d0, [sp]
 8007544:	f000 fa18 	bl	8007978 <__kernel_cos>
 8007548:	e7f1      	b.n	800752e <sin+0x7e>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
	...
 8007558:	3fe921fb 	.word	0x3fe921fb
 800755c:	7fefffff 	.word	0x7fefffff

08007560 <__ieee754_rem_pio2>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	ed2d 8b02 	vpush	{d8}
 8007568:	ec55 4b10 	vmov	r4, r5, d0
 800756c:	4bca      	ldr	r3, [pc, #808]	; (8007898 <__ieee754_rem_pio2+0x338>)
 800756e:	b08b      	sub	sp, #44	; 0x2c
 8007570:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007574:	4598      	cmp	r8, r3
 8007576:	4682      	mov	sl, r0
 8007578:	9502      	str	r5, [sp, #8]
 800757a:	dc08      	bgt.n	800758e <__ieee754_rem_pio2+0x2e>
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	ed80 0b00 	vstr	d0, [r0]
 8007584:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007588:	f04f 0b00 	mov.w	fp, #0
 800758c:	e028      	b.n	80075e0 <__ieee754_rem_pio2+0x80>
 800758e:	4bc3      	ldr	r3, [pc, #780]	; (800789c <__ieee754_rem_pio2+0x33c>)
 8007590:	4598      	cmp	r8, r3
 8007592:	dc78      	bgt.n	8007686 <__ieee754_rem_pio2+0x126>
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	4ec2      	ldr	r6, [pc, #776]	; (80078a0 <__ieee754_rem_pio2+0x340>)
 8007598:	2b00      	cmp	r3, #0
 800759a:	ee10 0a10 	vmov	r0, s0
 800759e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007860 <__ieee754_rem_pio2+0x300>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	4629      	mov	r1, r5
 80075a6:	dd39      	ble.n	800761c <__ieee754_rem_pio2+0xbc>
 80075a8:	f7f8 fe86 	bl	80002b8 <__aeabi_dsub>
 80075ac:	45b0      	cmp	r8, r6
 80075ae:	4604      	mov	r4, r0
 80075b0:	460d      	mov	r5, r1
 80075b2:	d01b      	beq.n	80075ec <__ieee754_rem_pio2+0x8c>
 80075b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007868 <__ieee754_rem_pio2+0x308>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe7d 	bl	80002b8 <__aeabi_dsub>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	e9ca 2300 	strd	r2, r3, [sl]
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f8 fe75 	bl	80002b8 <__aeabi_dsub>
 80075ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8007868 <__ieee754_rem_pio2+0x308>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 fe70 	bl	80002b8 <__aeabi_dsub>
 80075d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075dc:	f04f 0b01 	mov.w	fp, #1
 80075e0:	4658      	mov	r0, fp
 80075e2:	b00b      	add	sp, #44	; 0x2c
 80075e4:	ecbd 8b02 	vpop	{d8}
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8007870 <__ieee754_rem_pio2+0x310>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe61 	bl	80002b8 <__aeabi_dsub>
 80075f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007878 <__ieee754_rem_pio2+0x318>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	f7f8 fe5a 	bl	80002b8 <__aeabi_dsub>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	e9ca 2300 	strd	r2, r3, [sl]
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f8 fe52 	bl	80002b8 <__aeabi_dsub>
 8007614:	a398      	add	r3, pc, #608	; (adr r3, 8007878 <__ieee754_rem_pio2+0x318>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	e7db      	b.n	80075d4 <__ieee754_rem_pio2+0x74>
 800761c:	f7f8 fe4e 	bl	80002bc <__adddf3>
 8007620:	45b0      	cmp	r8, r6
 8007622:	4604      	mov	r4, r0
 8007624:	460d      	mov	r5, r1
 8007626:	d016      	beq.n	8007656 <__ieee754_rem_pio2+0xf6>
 8007628:	a38f      	add	r3, pc, #572	; (adr r3, 8007868 <__ieee754_rem_pio2+0x308>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fe45 	bl	80002bc <__adddf3>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e9ca 2300 	strd	r2, r3, [sl]
 800763a:	4620      	mov	r0, r4
 800763c:	4629      	mov	r1, r5
 800763e:	f7f8 fe3b 	bl	80002b8 <__aeabi_dsub>
 8007642:	a389      	add	r3, pc, #548	; (adr r3, 8007868 <__ieee754_rem_pio2+0x308>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 fe38 	bl	80002bc <__adddf3>
 800764c:	f04f 3bff 	mov.w	fp, #4294967295
 8007650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007654:	e7c4      	b.n	80075e0 <__ieee754_rem_pio2+0x80>
 8007656:	a386      	add	r3, pc, #536	; (adr r3, 8007870 <__ieee754_rem_pio2+0x310>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 fe2e 	bl	80002bc <__adddf3>
 8007660:	a385      	add	r3, pc, #532	; (adr r3, 8007878 <__ieee754_rem_pio2+0x318>)
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	4604      	mov	r4, r0
 8007668:	460d      	mov	r5, r1
 800766a:	f7f8 fe27 	bl	80002bc <__adddf3>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	e9ca 2300 	strd	r2, r3, [sl]
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f8 fe1d 	bl	80002b8 <__aeabi_dsub>
 800767e:	a37e      	add	r3, pc, #504	; (adr r3, 8007878 <__ieee754_rem_pio2+0x318>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	e7e0      	b.n	8007648 <__ieee754_rem_pio2+0xe8>
 8007686:	4b87      	ldr	r3, [pc, #540]	; (80078a4 <__ieee754_rem_pio2+0x344>)
 8007688:	4598      	cmp	r8, r3
 800768a:	f300 80d9 	bgt.w	8007840 <__ieee754_rem_pio2+0x2e0>
 800768e:	f000 fe49 	bl	8008324 <fabs>
 8007692:	ec55 4b10 	vmov	r4, r5, d0
 8007696:	ee10 0a10 	vmov	r0, s0
 800769a:	a379      	add	r3, pc, #484	; (adr r3, 8007880 <__ieee754_rem_pio2+0x320>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f8 ffc1 	bl	8000628 <__aeabi_dmul>
 80076a6:	4b80      	ldr	r3, [pc, #512]	; (80078a8 <__ieee754_rem_pio2+0x348>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	f7f8 fe07 	bl	80002bc <__adddf3>
 80076ae:	f7f9 fa55 	bl	8000b5c <__aeabi_d2iz>
 80076b2:	4683      	mov	fp, r0
 80076b4:	f7f8 ff4e 	bl	8000554 <__aeabi_i2d>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	ec43 2b18 	vmov	d8, r2, r3
 80076c0:	a367      	add	r3, pc, #412	; (adr r3, 8007860 <__ieee754_rem_pio2+0x300>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 ffaf 	bl	8000628 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f8 fdf1 	bl	80002b8 <__aeabi_dsub>
 80076d6:	a364      	add	r3, pc, #400	; (adr r3, 8007868 <__ieee754_rem_pio2+0x308>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	4606      	mov	r6, r0
 80076de:	460f      	mov	r7, r1
 80076e0:	ec51 0b18 	vmov	r0, r1, d8
 80076e4:	f7f8 ffa0 	bl	8000628 <__aeabi_dmul>
 80076e8:	f1bb 0f1f 	cmp.w	fp, #31
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	dc0d      	bgt.n	800770e <__ieee754_rem_pio2+0x1ae>
 80076f2:	4b6e      	ldr	r3, [pc, #440]	; (80078ac <__ieee754_rem_pio2+0x34c>)
 80076f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	4543      	cmp	r3, r8
 80076fe:	d006      	beq.n	800770e <__ieee754_rem_pio2+0x1ae>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f8 fdd6 	bl	80002b8 <__aeabi_dsub>
 800770c:	e00f      	b.n	800772e <__ieee754_rem_pio2+0x1ce>
 800770e:	462b      	mov	r3, r5
 8007710:	4622      	mov	r2, r4
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 fdcf 	bl	80002b8 <__aeabi_dsub>
 800771a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007724:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007728:	f1b8 0f10 	cmp.w	r8, #16
 800772c:	dc02      	bgt.n	8007734 <__ieee754_rem_pio2+0x1d4>
 800772e:	e9ca 0100 	strd	r0, r1, [sl]
 8007732:	e039      	b.n	80077a8 <__ieee754_rem_pio2+0x248>
 8007734:	a34e      	add	r3, pc, #312	; (adr r3, 8007870 <__ieee754_rem_pio2+0x310>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	ec51 0b18 	vmov	r0, r1, d8
 800773e:	f7f8 ff73 	bl	8000628 <__aeabi_dmul>
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 fdb3 	bl	80002b8 <__aeabi_dsub>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f8 fdab 	bl	80002b8 <__aeabi_dsub>
 8007762:	4622      	mov	r2, r4
 8007764:	462b      	mov	r3, r5
 8007766:	f7f8 fda7 	bl	80002b8 <__aeabi_dsub>
 800776a:	a343      	add	r3, pc, #268	; (adr r3, 8007878 <__ieee754_rem_pio2+0x318>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	ec51 0b18 	vmov	r0, r1, d8
 8007778:	f7f8 ff56 	bl	8000628 <__aeabi_dmul>
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	f7f8 fd9a 	bl	80002b8 <__aeabi_dsub>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f8 fd92 	bl	80002b8 <__aeabi_dsub>
 8007794:	9a03      	ldr	r2, [sp, #12]
 8007796:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b31      	cmp	r3, #49	; 0x31
 800779e:	dc24      	bgt.n	80077ea <__ieee754_rem_pio2+0x28a>
 80077a0:	e9ca 0100 	strd	r0, r1, [sl]
 80077a4:	4646      	mov	r6, r8
 80077a6:	464f      	mov	r7, r9
 80077a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80077ac:	4630      	mov	r0, r6
 80077ae:	4642      	mov	r2, r8
 80077b0:	464b      	mov	r3, r9
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f8 fd80 	bl	80002b8 <__aeabi_dsub>
 80077b8:	462b      	mov	r3, r5
 80077ba:	4622      	mov	r2, r4
 80077bc:	f7f8 fd7c 	bl	80002b8 <__aeabi_dsub>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077c8:	f6bf af0a 	bge.w	80075e0 <__ieee754_rem_pio2+0x80>
 80077cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80077d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d8:	f8ca 8000 	str.w	r8, [sl]
 80077dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80077e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80077e4:	f1cb 0b00 	rsb	fp, fp, #0
 80077e8:	e6fa      	b.n	80075e0 <__ieee754_rem_pio2+0x80>
 80077ea:	a327      	add	r3, pc, #156	; (adr r3, 8007888 <__ieee754_rem_pio2+0x328>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	ec51 0b18 	vmov	r0, r1, d8
 80077f4:	f7f8 ff18 	bl	8000628 <__aeabi_dmul>
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4640      	mov	r0, r8
 8007802:	4649      	mov	r1, r9
 8007804:	f7f8 fd58 	bl	80002b8 <__aeabi_dsub>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4606      	mov	r6, r0
 800780e:	460f      	mov	r7, r1
 8007810:	4640      	mov	r0, r8
 8007812:	4649      	mov	r1, r9
 8007814:	f7f8 fd50 	bl	80002b8 <__aeabi_dsub>
 8007818:	4622      	mov	r2, r4
 800781a:	462b      	mov	r3, r5
 800781c:	f7f8 fd4c 	bl	80002b8 <__aeabi_dsub>
 8007820:	a31b      	add	r3, pc, #108	; (adr r3, 8007890 <__ieee754_rem_pio2+0x330>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	4604      	mov	r4, r0
 8007828:	460d      	mov	r5, r1
 800782a:	ec51 0b18 	vmov	r0, r1, d8
 800782e:	f7f8 fefb 	bl	8000628 <__aeabi_dmul>
 8007832:	4622      	mov	r2, r4
 8007834:	462b      	mov	r3, r5
 8007836:	f7f8 fd3f 	bl	80002b8 <__aeabi_dsub>
 800783a:	4604      	mov	r4, r0
 800783c:	460d      	mov	r5, r1
 800783e:	e75f      	b.n	8007700 <__ieee754_rem_pio2+0x1a0>
 8007840:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <__ieee754_rem_pio2+0x350>)
 8007842:	4598      	cmp	r8, r3
 8007844:	dd36      	ble.n	80078b4 <__ieee754_rem_pio2+0x354>
 8007846:	ee10 2a10 	vmov	r2, s0
 800784a:	462b      	mov	r3, r5
 800784c:	4620      	mov	r0, r4
 800784e:	4629      	mov	r1, r5
 8007850:	f7f8 fd32 	bl	80002b8 <__aeabi_dsub>
 8007854:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007858:	e9ca 0100 	strd	r0, r1, [sl]
 800785c:	e694      	b.n	8007588 <__ieee754_rem_pio2+0x28>
 800785e:	bf00      	nop
 8007860:	54400000 	.word	0x54400000
 8007864:	3ff921fb 	.word	0x3ff921fb
 8007868:	1a626331 	.word	0x1a626331
 800786c:	3dd0b461 	.word	0x3dd0b461
 8007870:	1a600000 	.word	0x1a600000
 8007874:	3dd0b461 	.word	0x3dd0b461
 8007878:	2e037073 	.word	0x2e037073
 800787c:	3ba3198a 	.word	0x3ba3198a
 8007880:	6dc9c883 	.word	0x6dc9c883
 8007884:	3fe45f30 	.word	0x3fe45f30
 8007888:	2e000000 	.word	0x2e000000
 800788c:	3ba3198a 	.word	0x3ba3198a
 8007890:	252049c1 	.word	0x252049c1
 8007894:	397b839a 	.word	0x397b839a
 8007898:	3fe921fb 	.word	0x3fe921fb
 800789c:	4002d97b 	.word	0x4002d97b
 80078a0:	3ff921fb 	.word	0x3ff921fb
 80078a4:	413921fb 	.word	0x413921fb
 80078a8:	3fe00000 	.word	0x3fe00000
 80078ac:	0800a420 	.word	0x0800a420
 80078b0:	7fefffff 	.word	0x7fefffff
 80078b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80078b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80078bc:	ee10 0a10 	vmov	r0, s0
 80078c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80078c4:	ee10 6a10 	vmov	r6, s0
 80078c8:	460f      	mov	r7, r1
 80078ca:	f7f9 f947 	bl	8000b5c <__aeabi_d2iz>
 80078ce:	f7f8 fe41 	bl	8000554 <__aeabi_i2d>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078de:	f7f8 fceb 	bl	80002b8 <__aeabi_dsub>
 80078e2:	4b23      	ldr	r3, [pc, #140]	; (8007970 <__ieee754_rem_pio2+0x410>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	f7f8 fe9f 	bl	8000628 <__aeabi_dmul>
 80078ea:	460f      	mov	r7, r1
 80078ec:	4606      	mov	r6, r0
 80078ee:	f7f9 f935 	bl	8000b5c <__aeabi_d2iz>
 80078f2:	f7f8 fe2f 	bl	8000554 <__aeabi_i2d>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007902:	f7f8 fcd9 	bl	80002b8 <__aeabi_dsub>
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <__ieee754_rem_pio2+0x410>)
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe8d 	bl	8000628 <__aeabi_dmul>
 800790e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007912:	ad04      	add	r5, sp, #16
 8007914:	f04f 0803 	mov.w	r8, #3
 8007918:	46a9      	mov	r9, r5
 800791a:	2600      	movs	r6, #0
 800791c:	2700      	movs	r7, #0
 800791e:	4632      	mov	r2, r6
 8007920:	463b      	mov	r3, r7
 8007922:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007926:	46c3      	mov	fp, r8
 8007928:	3d08      	subs	r5, #8
 800792a:	f108 38ff 	add.w	r8, r8, #4294967295
 800792e:	f7f9 f8e3 	bl	8000af8 <__aeabi_dcmpeq>
 8007932:	2800      	cmp	r0, #0
 8007934:	d1f3      	bne.n	800791e <__ieee754_rem_pio2+0x3be>
 8007936:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <__ieee754_rem_pio2+0x414>)
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	2302      	movs	r3, #2
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4622      	mov	r2, r4
 8007940:	465b      	mov	r3, fp
 8007942:	4651      	mov	r1, sl
 8007944:	4648      	mov	r0, r9
 8007946:	f000 f8df 	bl	8007b08 <__kernel_rem_pio2>
 800794a:	9b02      	ldr	r3, [sp, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	4683      	mov	fp, r0
 8007950:	f6bf ae46 	bge.w	80075e0 <__ieee754_rem_pio2+0x80>
 8007954:	e9da 2100 	ldrd	r2, r1, [sl]
 8007958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800795c:	e9ca 2300 	strd	r2, r3, [sl]
 8007960:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007964:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007968:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800796c:	e73a      	b.n	80077e4 <__ieee754_rem_pio2+0x284>
 800796e:	bf00      	nop
 8007970:	41700000 	.word	0x41700000
 8007974:	0800a4a0 	.word	0x0800a4a0

08007978 <__kernel_cos>:
 8007978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	ec57 6b10 	vmov	r6, r7, d0
 8007980:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007984:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007988:	ed8d 1b00 	vstr	d1, [sp]
 800798c:	da07      	bge.n	800799e <__kernel_cos+0x26>
 800798e:	ee10 0a10 	vmov	r0, s0
 8007992:	4639      	mov	r1, r7
 8007994:	f7f9 f8e2 	bl	8000b5c <__aeabi_d2iz>
 8007998:	2800      	cmp	r0, #0
 800799a:	f000 8088 	beq.w	8007aae <__kernel_cos+0x136>
 800799e:	4632      	mov	r2, r6
 80079a0:	463b      	mov	r3, r7
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fe3f 	bl	8000628 <__aeabi_dmul>
 80079aa:	4b51      	ldr	r3, [pc, #324]	; (8007af0 <__kernel_cos+0x178>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f7f8 fe39 	bl	8000628 <__aeabi_dmul>
 80079b6:	a340      	add	r3, pc, #256	; (adr r3, 8007ab8 <__kernel_cos+0x140>)
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	4682      	mov	sl, r0
 80079be:	468b      	mov	fp, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f8 fe30 	bl	8000628 <__aeabi_dmul>
 80079c8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ac0 <__kernel_cos+0x148>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fc75 	bl	80002bc <__adddf3>
 80079d2:	4622      	mov	r2, r4
 80079d4:	462b      	mov	r3, r5
 80079d6:	f7f8 fe27 	bl	8000628 <__aeabi_dmul>
 80079da:	a33b      	add	r3, pc, #236	; (adr r3, 8007ac8 <__kernel_cos+0x150>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fc6a 	bl	80002b8 <__aeabi_dsub>
 80079e4:	4622      	mov	r2, r4
 80079e6:	462b      	mov	r3, r5
 80079e8:	f7f8 fe1e 	bl	8000628 <__aeabi_dmul>
 80079ec:	a338      	add	r3, pc, #224	; (adr r3, 8007ad0 <__kernel_cos+0x158>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fc63 	bl	80002bc <__adddf3>
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	f7f8 fe15 	bl	8000628 <__aeabi_dmul>
 80079fe:	a336      	add	r3, pc, #216	; (adr r3, 8007ad8 <__kernel_cos+0x160>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fc58 	bl	80002b8 <__aeabi_dsub>
 8007a08:	4622      	mov	r2, r4
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	f7f8 fe0c 	bl	8000628 <__aeabi_dmul>
 8007a10:	a333      	add	r3, pc, #204	; (adr r3, 8007ae0 <__kernel_cos+0x168>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fc51 	bl	80002bc <__adddf3>
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f7f8 fe03 	bl	8000628 <__aeabi_dmul>
 8007a22:	4622      	mov	r2, r4
 8007a24:	462b      	mov	r3, r5
 8007a26:	f7f8 fdff 	bl	8000628 <__aeabi_dmul>
 8007a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 fdf7 	bl	8000628 <__aeabi_dmul>
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7f8 fc39 	bl	80002b8 <__aeabi_dsub>
 8007a46:	4b2b      	ldr	r3, [pc, #172]	; (8007af4 <__kernel_cos+0x17c>)
 8007a48:	4598      	cmp	r8, r3
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	dc10      	bgt.n	8007a72 <__kernel_cos+0xfa>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4650      	mov	r0, sl
 8007a56:	4659      	mov	r1, fp
 8007a58:	f7f8 fc2e 	bl	80002b8 <__aeabi_dsub>
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4926      	ldr	r1, [pc, #152]	; (8007af8 <__kernel_cos+0x180>)
 8007a60:	4602      	mov	r2, r0
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7f8 fc28 	bl	80002b8 <__aeabi_dsub>
 8007a68:	ec41 0b10 	vmov	d0, r0, r1
 8007a6c:	b003      	add	sp, #12
 8007a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a72:	4b22      	ldr	r3, [pc, #136]	; (8007afc <__kernel_cos+0x184>)
 8007a74:	4920      	ldr	r1, [pc, #128]	; (8007af8 <__kernel_cos+0x180>)
 8007a76:	4598      	cmp	r8, r3
 8007a78:	bfcc      	ite	gt
 8007a7a:	4d21      	ldrgt	r5, [pc, #132]	; (8007b00 <__kernel_cos+0x188>)
 8007a7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007a80:	2400      	movs	r4, #0
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	2000      	movs	r0, #0
 8007a88:	f7f8 fc16 	bl	80002b8 <__aeabi_dsub>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4680      	mov	r8, r0
 8007a90:	4689      	mov	r9, r1
 8007a92:	462b      	mov	r3, r5
 8007a94:	4650      	mov	r0, sl
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f8 fc0e 	bl	80002b8 <__aeabi_dsub>
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	f7f8 fc0a 	bl	80002b8 <__aeabi_dsub>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	e7da      	b.n	8007a64 <__kernel_cos+0xec>
 8007aae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007ae8 <__kernel_cos+0x170>
 8007ab2:	e7db      	b.n	8007a6c <__kernel_cos+0xf4>
 8007ab4:	f3af 8000 	nop.w
 8007ab8:	be8838d4 	.word	0xbe8838d4
 8007abc:	bda8fae9 	.word	0xbda8fae9
 8007ac0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ac4:	3e21ee9e 	.word	0x3e21ee9e
 8007ac8:	809c52ad 	.word	0x809c52ad
 8007acc:	3e927e4f 	.word	0x3e927e4f
 8007ad0:	19cb1590 	.word	0x19cb1590
 8007ad4:	3efa01a0 	.word	0x3efa01a0
 8007ad8:	16c15177 	.word	0x16c15177
 8007adc:	3f56c16c 	.word	0x3f56c16c
 8007ae0:	5555554c 	.word	0x5555554c
 8007ae4:	3fa55555 	.word	0x3fa55555
 8007ae8:	00000000 	.word	0x00000000
 8007aec:	3ff00000 	.word	0x3ff00000
 8007af0:	3fe00000 	.word	0x3fe00000
 8007af4:	3fd33332 	.word	0x3fd33332
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	3fe90000 	.word	0x3fe90000
 8007b00:	3fd20000 	.word	0x3fd20000
 8007b04:	00000000 	.word	0x00000000

08007b08 <__kernel_rem_pio2>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	ed2d 8b02 	vpush	{d8}
 8007b10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007b14:	f112 0f14 	cmn.w	r2, #20
 8007b18:	9308      	str	r3, [sp, #32]
 8007b1a:	9101      	str	r1, [sp, #4]
 8007b1c:	4bc4      	ldr	r3, [pc, #784]	; (8007e30 <__kernel_rem_pio2+0x328>)
 8007b1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007b20:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	9b08      	ldr	r3, [sp, #32]
 8007b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b2e:	bfa8      	it	ge
 8007b30:	1ed4      	subge	r4, r2, #3
 8007b32:	9306      	str	r3, [sp, #24]
 8007b34:	bfb2      	itee	lt
 8007b36:	2400      	movlt	r4, #0
 8007b38:	2318      	movge	r3, #24
 8007b3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b3e:	f06f 0317 	mvn.w	r3, #23
 8007b42:	fb04 3303 	mla	r3, r4, r3, r3
 8007b46:	eb03 0a02 	add.w	sl, r3, r2
 8007b4a:	9b02      	ldr	r3, [sp, #8]
 8007b4c:	9a06      	ldr	r2, [sp, #24]
 8007b4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007e20 <__kernel_rem_pio2+0x318>
 8007b52:	eb03 0802 	add.w	r8, r3, r2
 8007b56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007b58:	1aa7      	subs	r7, r4, r2
 8007b5a:	ae22      	add	r6, sp, #136	; 0x88
 8007b5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b60:	2500      	movs	r5, #0
 8007b62:	4545      	cmp	r5, r8
 8007b64:	dd13      	ble.n	8007b8e <__kernel_rem_pio2+0x86>
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007e20 <__kernel_rem_pio2+0x318>
 8007b6c:	aa22      	add	r2, sp, #136	; 0x88
 8007b6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007b72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	4598      	cmp	r8, r3
 8007b7e:	dc2f      	bgt.n	8007be0 <__kernel_rem_pio2+0xd8>
 8007b80:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007b84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007b88:	462f      	mov	r7, r5
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e01b      	b.n	8007bc6 <__kernel_rem_pio2+0xbe>
 8007b8e:	42ef      	cmn	r7, r5
 8007b90:	d407      	bmi.n	8007ba2 <__kernel_rem_pio2+0x9a>
 8007b92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b96:	f7f8 fcdd 	bl	8000554 <__aeabi_i2d>
 8007b9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b9e:	3501      	adds	r5, #1
 8007ba0:	e7df      	b.n	8007b62 <__kernel_rem_pio2+0x5a>
 8007ba2:	ec51 0b18 	vmov	r0, r1, d8
 8007ba6:	e7f8      	b.n	8007b9a <__kernel_rem_pio2+0x92>
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007bb0:	f7f8 fd3a 	bl	8000628 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bbc:	f7f8 fb7e 	bl	80002bc <__adddf3>
 8007bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	9b06      	ldr	r3, [sp, #24]
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	f1a7 0708 	sub.w	r7, r7, #8
 8007bce:	ddeb      	ble.n	8007ba8 <__kernel_rem_pio2+0xa0>
 8007bd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007bd4:	f108 0801 	add.w	r8, r8, #1
 8007bd8:	ecab 7b02 	vstmia	fp!, {d7}
 8007bdc:	3508      	adds	r5, #8
 8007bde:	e7cc      	b.n	8007b7a <__kernel_rem_pio2+0x72>
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	aa0e      	add	r2, sp, #56	; 0x38
 8007be4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007be8:	930d      	str	r3, [sp, #52]	; 0x34
 8007bea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007bec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bf0:	9c02      	ldr	r4, [sp, #8]
 8007bf2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf4:	00e3      	lsls	r3, r4, #3
 8007bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf8:	ab9a      	add	r3, sp, #616	; 0x268
 8007bfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007c02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007c06:	ab72      	add	r3, sp, #456	; 0x1c8
 8007c08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007c0c:	46c3      	mov	fp, r8
 8007c0e:	46a1      	mov	r9, r4
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	f1a5 0508 	sub.w	r5, r5, #8
 8007c18:	dc77      	bgt.n	8007d0a <__kernel_rem_pio2+0x202>
 8007c1a:	ec47 6b10 	vmov	d0, r6, r7
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f000 fc0a 	bl	8008438 <scalbn>
 8007c24:	ec57 6b10 	vmov	r6, r7, d0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007c2e:	ee10 0a10 	vmov	r0, s0
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fcf8 	bl	8000628 <__aeabi_dmul>
 8007c38:	ec41 0b10 	vmov	d0, r0, r1
 8007c3c:	f000 fb7c 	bl	8008338 <floor>
 8007c40:	4b7c      	ldr	r3, [pc, #496]	; (8007e34 <__kernel_rem_pio2+0x32c>)
 8007c42:	ec51 0b10 	vmov	r0, r1, d0
 8007c46:	2200      	movs	r2, #0
 8007c48:	f7f8 fcee 	bl	8000628 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fb30 	bl	80002b8 <__aeabi_dsub>
 8007c58:	460f      	mov	r7, r1
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	f7f8 ff7e 	bl	8000b5c <__aeabi_d2iz>
 8007c60:	9004      	str	r0, [sp, #16]
 8007c62:	f7f8 fc77 	bl	8000554 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb23 	bl	80002b8 <__aeabi_dsub>
 8007c72:	f1ba 0f00 	cmp.w	sl, #0
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	dd6d      	ble.n	8007d58 <__kernel_rem_pio2+0x250>
 8007c7c:	1e62      	subs	r2, r4, #1
 8007c7e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c80:	9d04      	ldr	r5, [sp, #16]
 8007c82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007c86:	f1ca 0118 	rsb	r1, sl, #24
 8007c8a:	fa40 f301 	asr.w	r3, r0, r1
 8007c8e:	441d      	add	r5, r3
 8007c90:	408b      	lsls	r3, r1
 8007c92:	1ac0      	subs	r0, r0, r3
 8007c94:	ab0e      	add	r3, sp, #56	; 0x38
 8007c96:	9504      	str	r5, [sp, #16]
 8007c98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007c9c:	f1ca 0317 	rsb	r3, sl, #23
 8007ca0:	fa40 fb03 	asr.w	fp, r0, r3
 8007ca4:	f1bb 0f00 	cmp.w	fp, #0
 8007ca8:	dd65      	ble.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	2200      	movs	r2, #0
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	4615      	mov	r5, r2
 8007cb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007cb8:	4294      	cmp	r4, r2
 8007cba:	f300 809c 	bgt.w	8007df6 <__kernel_rem_pio2+0x2ee>
 8007cbe:	f1ba 0f00 	cmp.w	sl, #0
 8007cc2:	dd07      	ble.n	8007cd4 <__kernel_rem_pio2+0x1cc>
 8007cc4:	f1ba 0f01 	cmp.w	sl, #1
 8007cc8:	f000 80c0 	beq.w	8007e4c <__kernel_rem_pio2+0x344>
 8007ccc:	f1ba 0f02 	cmp.w	sl, #2
 8007cd0:	f000 80c6 	beq.w	8007e60 <__kernel_rem_pio2+0x358>
 8007cd4:	f1bb 0f02 	cmp.w	fp, #2
 8007cd8:	d14d      	bne.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007cda:	4632      	mov	r2, r6
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4956      	ldr	r1, [pc, #344]	; (8007e38 <__kernel_rem_pio2+0x330>)
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f7f8 fae9 	bl	80002b8 <__aeabi_dsub>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	d043      	beq.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007cee:	4650      	mov	r0, sl
 8007cf0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007e28 <__kernel_rem_pio2+0x320>
 8007cf4:	f000 fba0 	bl	8008438 <scalbn>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	ec53 2b10 	vmov	r2, r3, d0
 8007d00:	f7f8 fada 	bl	80002b8 <__aeabi_dsub>
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	e035      	b.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007d0a:	4b4c      	ldr	r3, [pc, #304]	; (8007e3c <__kernel_rem_pio2+0x334>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	f7f8 fc89 	bl	8000628 <__aeabi_dmul>
 8007d16:	f7f8 ff21 	bl	8000b5c <__aeabi_d2iz>
 8007d1a:	f7f8 fc1b 	bl	8000554 <__aeabi_i2d>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec43 2b18 	vmov	d8, r2, r3
 8007d26:	4b46      	ldr	r3, [pc, #280]	; (8007e40 <__kernel_rem_pio2+0x338>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f7f8 fc7d 	bl	8000628 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fabf 	bl	80002b8 <__aeabi_dsub>
 8007d3a:	f7f8 ff0f 	bl	8000b5c <__aeabi_d2iz>
 8007d3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d42:	f84b 0b04 	str.w	r0, [fp], #4
 8007d46:	ec51 0b18 	vmov	r0, r1, d8
 8007d4a:	f7f8 fab7 	bl	80002bc <__adddf3>
 8007d4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	e75b      	b.n	8007c10 <__kernel_rem_pio2+0x108>
 8007d58:	d106      	bne.n	8007d68 <__kernel_rem_pio2+0x260>
 8007d5a:	1e63      	subs	r3, r4, #1
 8007d5c:	aa0e      	add	r2, sp, #56	; 0x38
 8007d5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007d66:	e79d      	b.n	8007ca4 <__kernel_rem_pio2+0x19c>
 8007d68:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <__kernel_rem_pio2+0x33c>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f7f8 fee2 	bl	8000b34 <__aeabi_dcmpge>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d13d      	bne.n	8007df0 <__kernel_rem_pio2+0x2e8>
 8007d74:	4683      	mov	fp, r0
 8007d76:	2200      	movs	r2, #0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 febb 	bl	8000af8 <__aeabi_dcmpeq>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f000 80c0 	beq.w	8007f08 <__kernel_rem_pio2+0x400>
 8007d88:	1e65      	subs	r5, r4, #1
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	9902      	ldr	r1, [sp, #8]
 8007d90:	428b      	cmp	r3, r1
 8007d92:	da6c      	bge.n	8007e6e <__kernel_rem_pio2+0x366>
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	f000 8089 	beq.w	8007eac <__kernel_rem_pio2+0x3a4>
 8007d9a:	ab0e      	add	r3, sp, #56	; 0x38
 8007d9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007da0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80ad 	beq.w	8007f04 <__kernel_rem_pio2+0x3fc>
 8007daa:	4650      	mov	r0, sl
 8007dac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007e28 <__kernel_rem_pio2+0x320>
 8007db0:	f000 fb42 	bl	8008438 <scalbn>
 8007db4:	ab9a      	add	r3, sp, #616	; 0x268
 8007db6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007dba:	ec57 6b10 	vmov	r6, r7, d0
 8007dbe:	00ec      	lsls	r4, r5, #3
 8007dc0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007dc4:	46aa      	mov	sl, r5
 8007dc6:	f1ba 0f00 	cmp.w	sl, #0
 8007dca:	f280 80d6 	bge.w	8007f7a <__kernel_rem_pio2+0x472>
 8007dce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007e20 <__kernel_rem_pio2+0x318>
 8007dd2:	462e      	mov	r6, r5
 8007dd4:	2e00      	cmp	r6, #0
 8007dd6:	f2c0 8104 	blt.w	8007fe2 <__kernel_rem_pio2+0x4da>
 8007dda:	ab72      	add	r3, sp, #456	; 0x1c8
 8007ddc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007de0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007e48 <__kernel_rem_pio2+0x340>
 8007de4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007de8:	f04f 0800 	mov.w	r8, #0
 8007dec:	1baf      	subs	r7, r5, r6
 8007dee:	e0ea      	b.n	8007fc6 <__kernel_rem_pio2+0x4be>
 8007df0:	f04f 0b02 	mov.w	fp, #2
 8007df4:	e759      	b.n	8007caa <__kernel_rem_pio2+0x1a2>
 8007df6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfa:	b955      	cbnz	r5, 8007e12 <__kernel_rem_pio2+0x30a>
 8007dfc:	b123      	cbz	r3, 8007e08 <__kernel_rem_pio2+0x300>
 8007dfe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007e02:	f8c8 3000 	str.w	r3, [r8]
 8007e06:	2301      	movs	r3, #1
 8007e08:	3201      	adds	r2, #1
 8007e0a:	f108 0804 	add.w	r8, r8, #4
 8007e0e:	461d      	mov	r5, r3
 8007e10:	e752      	b.n	8007cb8 <__kernel_rem_pio2+0x1b0>
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	f8c8 3000 	str.w	r3, [r8]
 8007e18:	462b      	mov	r3, r5
 8007e1a:	e7f5      	b.n	8007e08 <__kernel_rem_pio2+0x300>
 8007e1c:	f3af 8000 	nop.w
	...
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	0800a5e8 	.word	0x0800a5e8
 8007e34:	40200000 	.word	0x40200000
 8007e38:	3ff00000 	.word	0x3ff00000
 8007e3c:	3e700000 	.word	0x3e700000
 8007e40:	41700000 	.word	0x41700000
 8007e44:	3fe00000 	.word	0x3fe00000
 8007e48:	0800a5a8 	.word	0x0800a5a8
 8007e4c:	1e62      	subs	r2, r4, #1
 8007e4e:	ab0e      	add	r3, sp, #56	; 0x38
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e58:	a90e      	add	r1, sp, #56	; 0x38
 8007e5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e5e:	e739      	b.n	8007cd4 <__kernel_rem_pio2+0x1cc>
 8007e60:	1e62      	subs	r2, r4, #1
 8007e62:	ab0e      	add	r3, sp, #56	; 0x38
 8007e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e6c:	e7f4      	b.n	8007e58 <__kernel_rem_pio2+0x350>
 8007e6e:	a90e      	add	r1, sp, #56	; 0x38
 8007e70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	430a      	orrs	r2, r1
 8007e78:	e789      	b.n	8007d8e <__kernel_rem_pio2+0x286>
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d0fa      	beq.n	8007e7a <__kernel_rem_pio2+0x372>
 8007e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e86:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007e8a:	446a      	add	r2, sp
 8007e8c:	3a98      	subs	r2, #152	; 0x98
 8007e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e90:	9a08      	ldr	r2, [sp, #32]
 8007e92:	18e3      	adds	r3, r4, r3
 8007e94:	18a5      	adds	r5, r4, r2
 8007e96:	aa22      	add	r2, sp, #136	; 0x88
 8007e98:	f104 0801 	add.w	r8, r4, #1
 8007e9c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	9b04      	ldr	r3, [sp, #16]
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	da04      	bge.n	8007eb2 <__kernel_rem_pio2+0x3aa>
 8007ea8:	461c      	mov	r4, r3
 8007eaa:	e6a3      	b.n	8007bf4 <__kernel_rem_pio2+0xec>
 8007eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7e4      	b.n	8007e7c <__kernel_rem_pio2+0x374>
 8007eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007eb8:	f7f8 fb4c 	bl	8000554 <__aeabi_i2d>
 8007ebc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec2:	46ab      	mov	fp, r5
 8007ec4:	461c      	mov	r4, r3
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	2600      	movs	r6, #0
 8007ecc:	2700      	movs	r7, #0
 8007ece:	9b06      	ldr	r3, [sp, #24]
 8007ed0:	4599      	cmp	r9, r3
 8007ed2:	dd06      	ble.n	8007ee2 <__kernel_rem_pio2+0x3da>
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007eda:	f108 0801 	add.w	r8, r8, #1
 8007ede:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee0:	e7df      	b.n	8007ea2 <__kernel_rem_pio2+0x39a>
 8007ee2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ee6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007eea:	f7f8 fb9d 	bl	8000628 <__aeabi_dmul>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 f9e1 	bl	80002bc <__adddf3>
 8007efa:	f109 0901 	add.w	r9, r9, #1
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	e7e4      	b.n	8007ece <__kernel_rem_pio2+0x3c6>
 8007f04:	3d01      	subs	r5, #1
 8007f06:	e748      	b.n	8007d9a <__kernel_rem_pio2+0x292>
 8007f08:	ec47 6b10 	vmov	d0, r6, r7
 8007f0c:	f1ca 0000 	rsb	r0, sl, #0
 8007f10:	f000 fa92 	bl	8008438 <scalbn>
 8007f14:	ec57 6b10 	vmov	r6, r7, d0
 8007f18:	4ba0      	ldr	r3, [pc, #640]	; (800819c <__kernel_rem_pio2+0x694>)
 8007f1a:	ee10 0a10 	vmov	r0, s0
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4639      	mov	r1, r7
 8007f22:	f7f8 fe07 	bl	8000b34 <__aeabi_dcmpge>
 8007f26:	b1f8      	cbz	r0, 8007f68 <__kernel_rem_pio2+0x460>
 8007f28:	4b9d      	ldr	r3, [pc, #628]	; (80081a0 <__kernel_rem_pio2+0x698>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 fb7a 	bl	8000628 <__aeabi_dmul>
 8007f34:	f7f8 fe12 	bl	8000b5c <__aeabi_d2iz>
 8007f38:	4680      	mov	r8, r0
 8007f3a:	f7f8 fb0b 	bl	8000554 <__aeabi_i2d>
 8007f3e:	4b97      	ldr	r3, [pc, #604]	; (800819c <__kernel_rem_pio2+0x694>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7f8 fb71 	bl	8000628 <__aeabi_dmul>
 8007f46:	460b      	mov	r3, r1
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7f8 f9b3 	bl	80002b8 <__aeabi_dsub>
 8007f52:	f7f8 fe03 	bl	8000b5c <__aeabi_d2iz>
 8007f56:	1c65      	adds	r5, r4, #1
 8007f58:	ab0e      	add	r3, sp, #56	; 0x38
 8007f5a:	f10a 0a18 	add.w	sl, sl, #24
 8007f5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f62:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007f66:	e720      	b.n	8007daa <__kernel_rem_pio2+0x2a2>
 8007f68:	4630      	mov	r0, r6
 8007f6a:	4639      	mov	r1, r7
 8007f6c:	f7f8 fdf6 	bl	8000b5c <__aeabi_d2iz>
 8007f70:	ab0e      	add	r3, sp, #56	; 0x38
 8007f72:	4625      	mov	r5, r4
 8007f74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f78:	e717      	b.n	8007daa <__kernel_rem_pio2+0x2a2>
 8007f7a:	ab0e      	add	r3, sp, #56	; 0x38
 8007f7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007f80:	f7f8 fae8 	bl	8000554 <__aeabi_i2d>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fb4e 	bl	8000628 <__aeabi_dmul>
 8007f8c:	4b84      	ldr	r3, [pc, #528]	; (80081a0 <__kernel_rem_pio2+0x698>)
 8007f8e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007f92:	2200      	movs	r2, #0
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 fb46 	bl	8000628 <__aeabi_dmul>
 8007f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	e70f      	b.n	8007dc6 <__kernel_rem_pio2+0x2be>
 8007fa6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007faa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007fae:	f7f8 fb3b 	bl	8000628 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fba:	f7f8 f97f 	bl	80002bc <__adddf3>
 8007fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fc2:	f108 0801 	add.w	r8, r8, #1
 8007fc6:	9b02      	ldr	r3, [sp, #8]
 8007fc8:	4598      	cmp	r8, r3
 8007fca:	dc01      	bgt.n	8007fd0 <__kernel_rem_pio2+0x4c8>
 8007fcc:	45b8      	cmp	r8, r7
 8007fce:	ddea      	ble.n	8007fa6 <__kernel_rem_pio2+0x49e>
 8007fd0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007fd4:	ab4a      	add	r3, sp, #296	; 0x128
 8007fd6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007fda:	ed87 7b00 	vstr	d7, [r7]
 8007fde:	3e01      	subs	r6, #1
 8007fe0:	e6f8      	b.n	8007dd4 <__kernel_rem_pio2+0x2cc>
 8007fe2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	dc0b      	bgt.n	8008000 <__kernel_rem_pio2+0x4f8>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dc35      	bgt.n	8008058 <__kernel_rem_pio2+0x550>
 8007fec:	d059      	beq.n	80080a2 <__kernel_rem_pio2+0x59a>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	f003 0007 	and.w	r0, r3, #7
 8007ff4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007ff8:	ecbd 8b02 	vpop	{d8}
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008002:	2b03      	cmp	r3, #3
 8008004:	d1f3      	bne.n	8007fee <__kernel_rem_pio2+0x4e6>
 8008006:	ab4a      	add	r3, sp, #296	; 0x128
 8008008:	4423      	add	r3, r4
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	461c      	mov	r4, r3
 800800e:	469a      	mov	sl, r3
 8008010:	9502      	str	r5, [sp, #8]
 8008012:	9b02      	ldr	r3, [sp, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f1aa 0a08 	sub.w	sl, sl, #8
 800801a:	dc6b      	bgt.n	80080f4 <__kernel_rem_pio2+0x5ec>
 800801c:	46aa      	mov	sl, r5
 800801e:	f1ba 0f01 	cmp.w	sl, #1
 8008022:	f1a4 0408 	sub.w	r4, r4, #8
 8008026:	f300 8085 	bgt.w	8008134 <__kernel_rem_pio2+0x62c>
 800802a:	9c06      	ldr	r4, [sp, #24]
 800802c:	2000      	movs	r0, #0
 800802e:	3408      	adds	r4, #8
 8008030:	2100      	movs	r1, #0
 8008032:	2d01      	cmp	r5, #1
 8008034:	f300 809d 	bgt.w	8008172 <__kernel_rem_pio2+0x66a>
 8008038:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800803c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	f040 809b 	bne.w	800817e <__kernel_rem_pio2+0x676>
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	e9c3 5600 	strd	r5, r6, [r3]
 800804e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008052:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008056:	e7ca      	b.n	8007fee <__kernel_rem_pio2+0x4e6>
 8008058:	3408      	adds	r4, #8
 800805a:	ab4a      	add	r3, sp, #296	; 0x128
 800805c:	441c      	add	r4, r3
 800805e:	462e      	mov	r6, r5
 8008060:	2000      	movs	r0, #0
 8008062:	2100      	movs	r1, #0
 8008064:	2e00      	cmp	r6, #0
 8008066:	da36      	bge.n	80080d6 <__kernel_rem_pio2+0x5ce>
 8008068:	f1bb 0f00 	cmp.w	fp, #0
 800806c:	d039      	beq.n	80080e2 <__kernel_rem_pio2+0x5da>
 800806e:	4602      	mov	r2, r0
 8008070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008074:	9c01      	ldr	r4, [sp, #4]
 8008076:	e9c4 2300 	strd	r2, r3, [r4]
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008082:	f7f8 f919 	bl	80002b8 <__aeabi_dsub>
 8008086:	ae4c      	add	r6, sp, #304	; 0x130
 8008088:	2401      	movs	r4, #1
 800808a:	42a5      	cmp	r5, r4
 800808c:	da2c      	bge.n	80080e8 <__kernel_rem_pio2+0x5e0>
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	d002      	beq.n	800809a <__kernel_rem_pio2+0x592>
 8008094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008098:	4619      	mov	r1, r3
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080a0:	e7a5      	b.n	8007fee <__kernel_rem_pio2+0x4e6>
 80080a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80080a6:	eb0d 0403 	add.w	r4, sp, r3
 80080aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80080ae:	2000      	movs	r0, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	da09      	bge.n	80080ca <__kernel_rem_pio2+0x5c2>
 80080b6:	f1bb 0f00 	cmp.w	fp, #0
 80080ba:	d002      	beq.n	80080c2 <__kernel_rem_pio2+0x5ba>
 80080bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080c0:	4619      	mov	r1, r3
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	e9c3 0100 	strd	r0, r1, [r3]
 80080c8:	e791      	b.n	8007fee <__kernel_rem_pio2+0x4e6>
 80080ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080ce:	f7f8 f8f5 	bl	80002bc <__adddf3>
 80080d2:	3d01      	subs	r5, #1
 80080d4:	e7ed      	b.n	80080b2 <__kernel_rem_pio2+0x5aa>
 80080d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080da:	f7f8 f8ef 	bl	80002bc <__adddf3>
 80080de:	3e01      	subs	r6, #1
 80080e0:	e7c0      	b.n	8008064 <__kernel_rem_pio2+0x55c>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e7c5      	b.n	8008074 <__kernel_rem_pio2+0x56c>
 80080e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80080ec:	f7f8 f8e6 	bl	80002bc <__adddf3>
 80080f0:	3401      	adds	r4, #1
 80080f2:	e7ca      	b.n	800808a <__kernel_rem_pio2+0x582>
 80080f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80080f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	3b01      	subs	r3, #1
 8008100:	9302      	str	r3, [sp, #8]
 8008102:	4632      	mov	r2, r6
 8008104:	463b      	mov	r3, r7
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 f8d7 	bl	80002bc <__adddf3>
 800810e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 f8cd 	bl	80002b8 <__aeabi_dsub>
 800811e:	4632      	mov	r2, r6
 8008120:	463b      	mov	r3, r7
 8008122:	f7f8 f8cb 	bl	80002bc <__adddf3>
 8008126:	ed9d 7b08 	vldr	d7, [sp, #32]
 800812a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800812e:	ed8a 7b00 	vstr	d7, [sl]
 8008132:	e76e      	b.n	8008012 <__kernel_rem_pio2+0x50a>
 8008134:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008138:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800813c:	4640      	mov	r0, r8
 800813e:	4632      	mov	r2, r6
 8008140:	463b      	mov	r3, r7
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f8ba 	bl	80002bc <__adddf3>
 8008148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 f8b0 	bl	80002b8 <__aeabi_dsub>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	f7f8 f8ae 	bl	80002bc <__adddf3>
 8008160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008164:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008168:	ed84 7b00 	vstr	d7, [r4]
 800816c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008170:	e755      	b.n	800801e <__kernel_rem_pio2+0x516>
 8008172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008176:	f7f8 f8a1 	bl	80002bc <__adddf3>
 800817a:	3d01      	subs	r5, #1
 800817c:	e759      	b.n	8008032 <__kernel_rem_pio2+0x52a>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	9a01      	ldr	r2, [sp, #4]
 8008182:	601d      	str	r5, [r3, #0]
 8008184:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008188:	605c      	str	r4, [r3, #4]
 800818a:	609f      	str	r7, [r3, #8]
 800818c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008190:	60d3      	str	r3, [r2, #12]
 8008192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008196:	6110      	str	r0, [r2, #16]
 8008198:	6153      	str	r3, [r2, #20]
 800819a:	e728      	b.n	8007fee <__kernel_rem_pio2+0x4e6>
 800819c:	41700000 	.word	0x41700000
 80081a0:	3e700000 	.word	0x3e700000
 80081a4:	00000000 	.word	0x00000000

080081a8 <__kernel_sin>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	ed2d 8b04 	vpush	{d8-d9}
 80081b0:	eeb0 8a41 	vmov.f32	s16, s2
 80081b4:	eef0 8a61 	vmov.f32	s17, s3
 80081b8:	ec55 4b10 	vmov	r4, r5, d0
 80081bc:	b083      	sub	sp, #12
 80081be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80081c6:	9001      	str	r0, [sp, #4]
 80081c8:	da06      	bge.n	80081d8 <__kernel_sin+0x30>
 80081ca:	ee10 0a10 	vmov	r0, s0
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fcc4 	bl	8000b5c <__aeabi_d2iz>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d051      	beq.n	800827c <__kernel_sin+0xd4>
 80081d8:	4622      	mov	r2, r4
 80081da:	462b      	mov	r3, r5
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 fa22 	bl	8000628 <__aeabi_dmul>
 80081e4:	4682      	mov	sl, r0
 80081e6:	468b      	mov	fp, r1
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4620      	mov	r0, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	f7f8 fa1a 	bl	8000628 <__aeabi_dmul>
 80081f4:	a341      	add	r3, pc, #260	; (adr r3, 80082fc <__kernel_sin+0x154>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	4680      	mov	r8, r0
 80081fc:	4689      	mov	r9, r1
 80081fe:	4650      	mov	r0, sl
 8008200:	4659      	mov	r1, fp
 8008202:	f7f8 fa11 	bl	8000628 <__aeabi_dmul>
 8008206:	a33f      	add	r3, pc, #252	; (adr r3, 8008304 <__kernel_sin+0x15c>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f854 	bl	80002b8 <__aeabi_dsub>
 8008210:	4652      	mov	r2, sl
 8008212:	465b      	mov	r3, fp
 8008214:	f7f8 fa08 	bl	8000628 <__aeabi_dmul>
 8008218:	a33c      	add	r3, pc, #240	; (adr r3, 800830c <__kernel_sin+0x164>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 f84d 	bl	80002bc <__adddf3>
 8008222:	4652      	mov	r2, sl
 8008224:	465b      	mov	r3, fp
 8008226:	f7f8 f9ff 	bl	8000628 <__aeabi_dmul>
 800822a:	a33a      	add	r3, pc, #232	; (adr r3, 8008314 <__kernel_sin+0x16c>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f842 	bl	80002b8 <__aeabi_dsub>
 8008234:	4652      	mov	r2, sl
 8008236:	465b      	mov	r3, fp
 8008238:	f7f8 f9f6 	bl	8000628 <__aeabi_dmul>
 800823c:	a337      	add	r3, pc, #220	; (adr r3, 800831c <__kernel_sin+0x174>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f83b 	bl	80002bc <__adddf3>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	4606      	mov	r6, r0
 800824a:	460f      	mov	r7, r1
 800824c:	b9eb      	cbnz	r3, 800828a <__kernel_sin+0xe2>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4650      	mov	r0, sl
 8008254:	4659      	mov	r1, fp
 8008256:	f7f8 f9e7 	bl	8000628 <__aeabi_dmul>
 800825a:	a325      	add	r3, pc, #148	; (adr r3, 80082f0 <__kernel_sin+0x148>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f82a 	bl	80002b8 <__aeabi_dsub>
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	f7f8 f9de 	bl	8000628 <__aeabi_dmul>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4620      	mov	r0, r4
 8008272:	4629      	mov	r1, r5
 8008274:	f7f8 f822 	bl	80002bc <__adddf3>
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	ec45 4b10 	vmov	d0, r4, r5
 8008280:	b003      	add	sp, #12
 8008282:	ecbd 8b04 	vpop	{d8-d9}
 8008286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <__kernel_sin+0x150>)
 800828c:	ec51 0b18 	vmov	r0, r1, d8
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9c9 	bl	8000628 <__aeabi_dmul>
 8008296:	4632      	mov	r2, r6
 8008298:	ec41 0b19 	vmov	d9, r0, r1
 800829c:	463b      	mov	r3, r7
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	f7f8 f9c1 	bl	8000628 <__aeabi_dmul>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	ec51 0b19 	vmov	r0, r1, d9
 80082ae:	f7f8 f803 	bl	80002b8 <__aeabi_dsub>
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	f7f8 f9b7 	bl	8000628 <__aeabi_dmul>
 80082ba:	ec53 2b18 	vmov	r2, r3, d8
 80082be:	f7f7 fffb 	bl	80002b8 <__aeabi_dsub>
 80082c2:	a30b      	add	r3, pc, #44	; (adr r3, 80082f0 <__kernel_sin+0x148>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	4606      	mov	r6, r0
 80082ca:	460f      	mov	r7, r1
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 f9aa 	bl	8000628 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f7f7 ffee 	bl	80002bc <__adddf3>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f7 ffe6 	bl	80002b8 <__aeabi_dsub>
 80082ec:	e7c4      	b.n	8008278 <__kernel_sin+0xd0>
 80082ee:	bf00      	nop
 80082f0:	55555549 	.word	0x55555549
 80082f4:	3fc55555 	.word	0x3fc55555
 80082f8:	3fe00000 	.word	0x3fe00000
 80082fc:	5acfd57c 	.word	0x5acfd57c
 8008300:	3de5d93a 	.word	0x3de5d93a
 8008304:	8a2b9ceb 	.word	0x8a2b9ceb
 8008308:	3e5ae5e6 	.word	0x3e5ae5e6
 800830c:	57b1fe7d 	.word	0x57b1fe7d
 8008310:	3ec71de3 	.word	0x3ec71de3
 8008314:	19c161d5 	.word	0x19c161d5
 8008318:	3f2a01a0 	.word	0x3f2a01a0
 800831c:	1110f8a6 	.word	0x1110f8a6
 8008320:	3f811111 	.word	0x3f811111

08008324 <fabs>:
 8008324:	ec51 0b10 	vmov	r0, r1, d0
 8008328:	ee10 2a10 	vmov	r2, s0
 800832c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008330:	ec43 2b10 	vmov	d0, r2, r3
 8008334:	4770      	bx	lr
	...

08008338 <floor>:
 8008338:	ec51 0b10 	vmov	r0, r1, d0
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008344:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008348:	2e13      	cmp	r6, #19
 800834a:	ee10 5a10 	vmov	r5, s0
 800834e:	ee10 8a10 	vmov	r8, s0
 8008352:	460c      	mov	r4, r1
 8008354:	dc32      	bgt.n	80083bc <floor+0x84>
 8008356:	2e00      	cmp	r6, #0
 8008358:	da14      	bge.n	8008384 <floor+0x4c>
 800835a:	a333      	add	r3, pc, #204	; (adr r3, 8008428 <floor+0xf0>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f7f7 ffac 	bl	80002bc <__adddf3>
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	f7f8 fbee 	bl	8000b48 <__aeabi_dcmpgt>
 800836c:	b138      	cbz	r0, 800837e <floor+0x46>
 800836e:	2c00      	cmp	r4, #0
 8008370:	da57      	bge.n	8008422 <floor+0xea>
 8008372:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008376:	431d      	orrs	r5, r3
 8008378:	d001      	beq.n	800837e <floor+0x46>
 800837a:	4c2d      	ldr	r4, [pc, #180]	; (8008430 <floor+0xf8>)
 800837c:	2500      	movs	r5, #0
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	e025      	b.n	80083d0 <floor+0x98>
 8008384:	4f2b      	ldr	r7, [pc, #172]	; (8008434 <floor+0xfc>)
 8008386:	4137      	asrs	r7, r6
 8008388:	ea01 0307 	and.w	r3, r1, r7
 800838c:	4303      	orrs	r3, r0
 800838e:	d01f      	beq.n	80083d0 <floor+0x98>
 8008390:	a325      	add	r3, pc, #148	; (adr r3, 8008428 <floor+0xf0>)
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f7f7 ff91 	bl	80002bc <__adddf3>
 800839a:	2200      	movs	r2, #0
 800839c:	2300      	movs	r3, #0
 800839e:	f7f8 fbd3 	bl	8000b48 <__aeabi_dcmpgt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0eb      	beq.n	800837e <floor+0x46>
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	bfbe      	ittt	lt
 80083aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80083ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80083b2:	19a4      	addlt	r4, r4, r6
 80083b4:	ea24 0407 	bic.w	r4, r4, r7
 80083b8:	2500      	movs	r5, #0
 80083ba:	e7e0      	b.n	800837e <floor+0x46>
 80083bc:	2e33      	cmp	r6, #51	; 0x33
 80083be:	dd0b      	ble.n	80083d8 <floor+0xa0>
 80083c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80083c4:	d104      	bne.n	80083d0 <floor+0x98>
 80083c6:	ee10 2a10 	vmov	r2, s0
 80083ca:	460b      	mov	r3, r1
 80083cc:	f7f7 ff76 	bl	80002bc <__adddf3>
 80083d0:	ec41 0b10 	vmov	d0, r0, r1
 80083d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295
 80083e0:	fa23 f707 	lsr.w	r7, r3, r7
 80083e4:	4207      	tst	r7, r0
 80083e6:	d0f3      	beq.n	80083d0 <floor+0x98>
 80083e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008428 <floor+0xf0>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f7 ff65 	bl	80002bc <__adddf3>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	f7f8 fba7 	bl	8000b48 <__aeabi_dcmpgt>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0bf      	beq.n	800837e <floor+0x46>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	da02      	bge.n	8008408 <floor+0xd0>
 8008402:	2e14      	cmp	r6, #20
 8008404:	d103      	bne.n	800840e <floor+0xd6>
 8008406:	3401      	adds	r4, #1
 8008408:	ea25 0507 	bic.w	r5, r5, r7
 800840c:	e7b7      	b.n	800837e <floor+0x46>
 800840e:	2301      	movs	r3, #1
 8008410:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008414:	fa03 f606 	lsl.w	r6, r3, r6
 8008418:	4435      	add	r5, r6
 800841a:	4545      	cmp	r5, r8
 800841c:	bf38      	it	cc
 800841e:	18e4      	addcc	r4, r4, r3
 8008420:	e7f2      	b.n	8008408 <floor+0xd0>
 8008422:	2500      	movs	r5, #0
 8008424:	462c      	mov	r4, r5
 8008426:	e7aa      	b.n	800837e <floor+0x46>
 8008428:	8800759c 	.word	0x8800759c
 800842c:	7e37e43c 	.word	0x7e37e43c
 8008430:	bff00000 	.word	0xbff00000
 8008434:	000fffff 	.word	0x000fffff

08008438 <scalbn>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	ec55 4b10 	vmov	r4, r5, d0
 800843e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008442:	4606      	mov	r6, r0
 8008444:	462b      	mov	r3, r5
 8008446:	b99a      	cbnz	r2, 8008470 <scalbn+0x38>
 8008448:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800844c:	4323      	orrs	r3, r4
 800844e:	d036      	beq.n	80084be <scalbn+0x86>
 8008450:	4b39      	ldr	r3, [pc, #228]	; (8008538 <scalbn+0x100>)
 8008452:	4629      	mov	r1, r5
 8008454:	ee10 0a10 	vmov	r0, s0
 8008458:	2200      	movs	r2, #0
 800845a:	f7f8 f8e5 	bl	8000628 <__aeabi_dmul>
 800845e:	4b37      	ldr	r3, [pc, #220]	; (800853c <scalbn+0x104>)
 8008460:	429e      	cmp	r6, r3
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	da10      	bge.n	800848a <scalbn+0x52>
 8008468:	a32b      	add	r3, pc, #172	; (adr r3, 8008518 <scalbn+0xe0>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	e03a      	b.n	80084e6 <scalbn+0xae>
 8008470:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008474:	428a      	cmp	r2, r1
 8008476:	d10c      	bne.n	8008492 <scalbn+0x5a>
 8008478:	ee10 2a10 	vmov	r2, s0
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f7 ff1c 	bl	80002bc <__adddf3>
 8008484:	4604      	mov	r4, r0
 8008486:	460d      	mov	r5, r1
 8008488:	e019      	b.n	80084be <scalbn+0x86>
 800848a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800848e:	460b      	mov	r3, r1
 8008490:	3a36      	subs	r2, #54	; 0x36
 8008492:	4432      	add	r2, r6
 8008494:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008498:	428a      	cmp	r2, r1
 800849a:	dd08      	ble.n	80084ae <scalbn+0x76>
 800849c:	2d00      	cmp	r5, #0
 800849e:	a120      	add	r1, pc, #128	; (adr r1, 8008520 <scalbn+0xe8>)
 80084a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084a4:	da1c      	bge.n	80084e0 <scalbn+0xa8>
 80084a6:	a120      	add	r1, pc, #128	; (adr r1, 8008528 <scalbn+0xf0>)
 80084a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ac:	e018      	b.n	80084e0 <scalbn+0xa8>
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	dd08      	ble.n	80084c4 <scalbn+0x8c>
 80084b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084be:	ec45 4b10 	vmov	d0, r4, r5
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80084c8:	da19      	bge.n	80084fe <scalbn+0xc6>
 80084ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80084ce:	429e      	cmp	r6, r3
 80084d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80084d4:	dd0a      	ble.n	80084ec <scalbn+0xb4>
 80084d6:	a112      	add	r1, pc, #72	; (adr r1, 8008520 <scalbn+0xe8>)
 80084d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e2      	bne.n	80084a6 <scalbn+0x6e>
 80084e0:	a30f      	add	r3, pc, #60	; (adr r3, 8008520 <scalbn+0xe8>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7f8 f89f 	bl	8000628 <__aeabi_dmul>
 80084ea:	e7cb      	b.n	8008484 <scalbn+0x4c>
 80084ec:	a10a      	add	r1, pc, #40	; (adr r1, 8008518 <scalbn+0xe0>)
 80084ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0b8      	beq.n	8008468 <scalbn+0x30>
 80084f6:	a10e      	add	r1, pc, #56	; (adr r1, 8008530 <scalbn+0xf8>)
 80084f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084fc:	e7b4      	b.n	8008468 <scalbn+0x30>
 80084fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008502:	3236      	adds	r2, #54	; 0x36
 8008504:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008508:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800850c:	4620      	mov	r0, r4
 800850e:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <scalbn+0x108>)
 8008510:	2200      	movs	r2, #0
 8008512:	e7e8      	b.n	80084e6 <scalbn+0xae>
 8008514:	f3af 8000 	nop.w
 8008518:	c2f8f359 	.word	0xc2f8f359
 800851c:	01a56e1f 	.word	0x01a56e1f
 8008520:	8800759c 	.word	0x8800759c
 8008524:	7e37e43c 	.word	0x7e37e43c
 8008528:	8800759c 	.word	0x8800759c
 800852c:	fe37e43c 	.word	0xfe37e43c
 8008530:	c2f8f359 	.word	0xc2f8f359
 8008534:	81a56e1f 	.word	0x81a56e1f
 8008538:	43500000 	.word	0x43500000
 800853c:	ffff3cb0 	.word	0xffff3cb0
 8008540:	3c900000 	.word	0x3c900000

08008544 <_init>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr

08008550 <_fini>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr
