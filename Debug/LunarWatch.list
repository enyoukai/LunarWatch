
LunarWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004814  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b4  0800b1b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1bc  0800b1bc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000084  0800b248  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800b248  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bf0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f40  00000000  00000000  00033ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00037d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025589  00000000  00000000  00038da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c92  00000000  00000000  0005e331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db053  00000000  00000000  00075fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  00151068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006988 	.word	0x08006988

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006988 	.word	0x08006988

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a37      	ldr	r2, [pc, #220]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xfc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a29      	ldr	r2, [pc, #164]	; (80006b0 <MX_GPIO_Init+0xfc>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000642:	f002 faed 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	481b      	ldr	r0, [pc, #108]	; (80006b8 <MX_GPIO_Init+0x104>)
 800064c:	f002 fae8 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000656:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <MX_GPIO_Init+0x108>)
 8000668:	f002 f946 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 800066c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0x100>)
 8000686:	f002 f937 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 800068a:	2340      	movs	r3, #64	; 0x40
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_GPIO_Init+0x104>)
 80006a2:	f002 f929 	bl	80028f8 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40020800 	.word	0x40020800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 ff9b 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8f3 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f7ff ff71 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d2:	f000 fc27 	bl	8000f24 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006d6:	f000 fb6f 	bl	8000db8 <MX_TIM3_Init>
  MX_SPI1_Init();
 80006da:	f000 f9e7 	bl	8000aac <MX_SPI1_Init>
  MX_RTC_Init();
 80006de:	f000 f961 	bl	80009a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	printf("LCD_1IN28_test Demo\r\n");
 80006e2:	4864      	ldr	r0, [pc, #400]	; (8000874 <main+0x1b4>)
 80006e4:	f005 fab2 	bl	8005c4c <puts>
	DEV_Module_Init();
 80006e8:	f000 fcca 	bl	8001080 <DEV_Module_Init>

	printf("LCD_1IN28_ Init and Clear...\r\n");
 80006ec:	4862      	ldr	r0, [pc, #392]	; (8000878 <main+0x1b8>)
 80006ee:	f005 faad 	bl	8005c4c <puts>
	LCD_1IN28_SetBackLight(10000);
 80006f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80006f6:	f001 ff73 	bl	80025e0 <LCD_1IN28_SetBackLight>
	LCD_1IN28_Init(VERTICAL);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 fed4 	bl	80024a8 <LCD_1IN28_Init>
	LCD_1IN28_Clear(BLACK);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 ff1f 	bl	8002544 <LCD_1IN28_Clear>

	printf("Paint_NewImage\r\n");
 8000706:	485d      	ldr	r0, [pc, #372]	; (800087c <main+0x1bc>)
 8000708:	f005 faa0 	bl	8005c4c <puts>
	Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 800070c:	2300      	movs	r3, #0
 800070e:	2200      	movs	r2, #0
 8000710:	21f0      	movs	r1, #240	; 0xf0
 8000712:	20f0      	movs	r0, #240	; 0xf0
 8000714:	f000 fcd4 	bl	80010c0 <Paint_NewImage>

	printf("Set Clear and Display Funtion\r\n");
 8000718:	4859      	ldr	r0, [pc, #356]	; (8000880 <main+0x1c0>)
 800071a:	f005 fa97 	bl	8005c4c <puts>
	Paint_SetClearFuntion(LCD_1IN28_Clear);
 800071e:	4859      	ldr	r0, [pc, #356]	; (8000884 <main+0x1c4>)
 8000720:	f000 fd1a 	bl	8001158 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8000724:	4858      	ldr	r0, [pc, #352]	; (8000888 <main+0x1c8>)
 8000726:	f000 fd27 	bl	8001178 <Paint_SetDisplayFuntion>

	printf("Paint_Clear\r\n");
 800072a:	4858      	ldr	r0, [pc, #352]	; (800088c <main+0x1cc>)
 800072c:	f005 fa8e 	bl	8005c4c <puts>
	Paint_Clear(BLACK);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fde1 	bl	80012f8 <Paint_Clear>
	DEV_Delay_ms(1000);
 8000736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073a:	f001 ffd3 	bl	80026e4 <HAL_Delay>

	printf("drawing...\r\n");
 800073e:	4854      	ldr	r0, [pc, #336]	; (8000890 <main+0x1d0>)
 8000740:	f005 fa84 	bl	8005c4c <puts>
	Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8000744:	2300      	movs	r3, #0
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	2302      	movs	r3, #2
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	231f      	movs	r3, #31
 800074e:	2278      	movs	r2, #120	; 0x78
 8000750:	2178      	movs	r1, #120	; 0x78
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 ff2c 	bl	80015b0 <Paint_DrawCircle>
	Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8000758:	2300      	movs	r3, #0
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	2304      	movs	r3, #4
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	230c      	movs	r3, #12
 8000768:	2278      	movs	r2, #120	; 0x78
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	; 0x78
 800076e:	f000 fe6f 	bl	8001450 <Paint_DrawLine>
	Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8000772:	2300      	movs	r3, #0
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	2304      	movs	r3, #4
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	23f0      	movs	r3, #240	; 0xf0
 8000782:	2278      	movs	r2, #120	; 0x78
 8000784:	21e4      	movs	r1, #228	; 0xe4
 8000786:	2078      	movs	r0, #120	; 0x78
 8000788:	f000 fe62 	bl	8001450 <Paint_DrawLine>
	Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800078c:	2300      	movs	r3, #0
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2304      	movs	r3, #4
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2378      	movs	r3, #120	; 0x78
 800079c:	220c      	movs	r2, #12
 800079e:	2178      	movs	r1, #120	; 0x78
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fe55 	bl	8001450 <Paint_DrawLine>
	Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80007a6:	2300      	movs	r3, #0
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	2304      	movs	r3, #4
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2378      	movs	r3, #120	; 0x78
 80007b6:	22f0      	movs	r2, #240	; 0xf0
 80007b8:	2178      	movs	r1, #120	; 0x78
 80007ba:	20e4      	movs	r0, #228	; 0xe4
 80007bc:	f000 fe48 	bl	8001450 <Paint_DrawLine>

	Paint_DrawImage(gImage_70X70, 85, 25, 70, 70);
 80007c0:	2346      	movs	r3, #70	; 0x46
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2346      	movs	r3, #70	; 0x46
 80007c6:	2219      	movs	r2, #25
 80007c8:	2155      	movs	r1, #85	; 0x55
 80007ca:	4832      	ldr	r0, [pc, #200]	; (8000894 <main+0x1d4>)
 80007cc:	f001 fb1e 	bl	8001e0c <Paint_DrawImage>
	Paint_DrawString_CN(56,140, "΢ѩ����",   &Font24CN,BLACK,  WHITE);
 80007d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	2300      	movs	r3, #0
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <main+0x1d8>)
 80007dc:	4a2f      	ldr	r2, [pc, #188]	; (800089c <main+0x1dc>)
 80007de:	218c      	movs	r1, #140	; 0x8c
 80007e0:	2038      	movs	r0, #56	; 0x38
 80007e2:	f001 f977 	bl	8001ad4 <Paint_DrawString_CN>
	Paint_DrawString_EN(123, 123, "WAVESHARE",&Font16,  BLACK, GREEN);
 80007e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <main+0x1e0>)
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <main+0x1e4>)
 80007f4:	217b      	movs	r1, #123	; 0x7b
 80007f6:	207b      	movs	r0, #123	; 0x7b
 80007f8:	f001 f914 	bl	8001a24 <Paint_DrawString_EN>

	Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 80007fc:	2300      	movs	r3, #0
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2303      	movs	r3, #3
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2346      	movs	r3, #70	; 0x46
 800080c:	2246      	movs	r2, #70	; 0x46
 800080e:	2178      	movs	r1, #120	; 0x78
 8000810:	2078      	movs	r0, #120	; 0x78
 8000812:	f000 fe1d 	bl	8001450 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8000816:	2300      	movs	r3, #0
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2303      	movs	r3, #3
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	231f      	movs	r3, #31
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	22b0      	movs	r2, #176	; 0xb0
 8000826:	2178      	movs	r1, #120	; 0x78
 8000828:	2078      	movs	r0, #120	; 0x78
 800082a:	f000 fe11 	bl	8001450 <Paint_DrawLine>
	Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 800082e:	2300      	movs	r3, #0
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2302      	movs	r3, #2
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	23d2      	movs	r3, #210	; 0xd2
 800083e:	2278      	movs	r2, #120	; 0x78
 8000840:	2178      	movs	r1, #120	; 0x78
 8000842:	2078      	movs	r0, #120	; 0x78
 8000844:	f000 fe04 	bl	8001450 <Paint_DrawLine>

	printf("quit...\r\n");
 8000848:	4817      	ldr	r0, [pc, #92]	; (80008a8 <main+0x1e8>)
 800084a:	f005 f9ff 	bl	8005c4c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <main+0x1ec>)
 8000850:	1d3c      	adds	r4, r7, #4
 8000852:	461d      	mov	r5, r3
 8000854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
 800085c:	1d39      	adds	r1, r7, #4
 800085e:	230a      	movs	r3, #10
 8000860:	2212      	movs	r2, #18
 8000862:	4813      	ldr	r0, [pc, #76]	; (80008b0 <main+0x1f0>)
 8000864:	f004 fce5 	bl	8005232 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f001 ff3a 	bl	80026e4 <HAL_Delay>
  {
 8000870:	e7ed      	b.n	800084e <main+0x18e>
 8000872:	bf00      	nop
 8000874:	080069a0 	.word	0x080069a0
 8000878:	080069b8 	.word	0x080069b8
 800087c:	080069d8 	.word	0x080069d8
 8000880:	080069e8 	.word	0x080069e8
 8000884:	08002545 	.word	0x08002545
 8000888:	080025b1 	.word	0x080025b1
 800088c:	08006a08 	.word	0x08006a08
 8000890:	08006a18 	.word	0x08006a18
 8000894:	08008ad4 	.word	0x08008ad4
 8000898:	2000000c 	.word	0x2000000c
 800089c:	08006a24 	.word	0x08006a24
 80008a0:	20000004 	.word	0x20000004
 80008a4:	08006a38 	.word	0x08006a38
 80008a8:	08006a44 	.word	0x08006a44
 80008ac:	08006a50 	.word	0x08006a50
 80008b0:	20000164 	.word	0x20000164

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2234      	movs	r2, #52	; 0x34
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 f854 	bl	8005970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a2b      	ldr	r2, [pc, #172]	; (8000990 <SystemClock_Config+0xdc>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <SystemClock_Config+0xdc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f4:	2300      	movs	r3, #0
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000900:	4a24      	ldr	r2, [pc, #144]	; (8000994 <SystemClock_Config+0xe0>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <SystemClock_Config+0xe0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000914:	230a      	movs	r3, #10
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000924:	2301      	movs	r3, #1
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000930:	2310      	movs	r3, #16
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093a:	2304      	movs	r3, #4
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fff6 	bl	800393c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000956:	f000 f81f 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f96c 	bl	8002c54 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000982:	f000 f809 	bl	8000998 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_RTC_Init+0xac>)
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_RTC_Init+0xac>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_RTC_Init+0xac>)
 80009ca:	227f      	movs	r2, #127	; 0x7f
 80009cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_RTC_Init+0xac>)
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_RTC_Init+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_RTC_Init+0xac>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_RTC_Init+0xac>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e6:	481a      	ldr	r0, [pc, #104]	; (8000a50 <MX_RTC_Init+0xac>)
 80009e8:	f003 fa46 	bl	8003e78 <HAL_RTC_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80009f2:	f7ff ffd1 	bl	8000998 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_RTC_Init+0xac>)
 8000a12:	f003 faa7 	bl	8003f64 <HAL_RTC_SetTime>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f7ff ffbc 	bl	8000998 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a20:	2301      	movs	r3, #1
 8000a22:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a24:	2301      	movs	r3, #1
 8000a26:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_RTC_Init+0xac>)
 8000a38:	f003 fb2e 	bl	8004098 <HAL_RTC_SetDate>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a42:	f7ff ffa9 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000a0 	.word	0x200000a0
 8000a54:	40002800 	.word	0x40002800

08000a58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09a      	sub	sp, #104	; 0x68
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	225c      	movs	r2, #92	; 0x5c
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 ff81 	bl	8005970 <memset>
  if(rtcHandle->Instance==RTC)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_RTC_MspInit+0x4c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d111      	bne.n	8000a9c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f9fe 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a92:	f7ff ff81 	bl	8000998 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_RTC_MspInit+0x50>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3768      	adds	r7, #104	; 0x68
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40002800 	.word	0x40002800
 8000aa8:	42470e3c 	.word	0x42470e3c

08000aac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <MX_SPI1_Init+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000abc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000af8:	220a      	movs	r2, #10
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_SPI1_Init+0x64>)
 8000afe:	f003 fbf0 	bl	80042e2 <HAL_SPI_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b08:	f7ff ff46 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000c0 	.word	0x200000c0
 8000b14:	40013000 	.word	0x40013000

08000b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_SPI_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_SPI_MspInit+0x8c>)
 8000b8e:	f001 feb3 	bl	80028f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
 8000be8:	f001 fe52 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f001 fd2e 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
  }

  return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
  }
  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f004 fde0 	bl	800591c <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000118 	.word	0x20000118
 8000d90:	200001e8 	.word	0x200001e8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <MX_TIM3_Init+0xb0>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000de2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000df0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000e04:	f003 fcfc 	bl	8004800 <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e0e:	f7ff fdc3 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000e22:	f004 f93d 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e2c:	f7ff fdb4 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	2360      	movs	r3, #96	; 0x60
 8000e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000e48:	f003 fdf2 	bl	8004a30 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e52:	f7ff fda1 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM3_Init+0xac>)
 8000e58:	f000 f82a 	bl	8000eb0 <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000011c 	.word	0x2000011c
 8000e68:	40000400 	.word	0x40000400

08000e6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10d      	bne.n	8000e9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_PWM_MspInit+0x40>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_TIM_PWM_MspInit+0x40>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_TIM_PWM_MspInit+0x40>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_TIM_MspPostInit+0x68>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d11d      	bne.n	8000f0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_TIM_MspPostInit+0x70>)
 8000f0a:	f001 fcf5 	bl	80028f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020800 	.word	0x40020800

08000f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <MX_USART2_UART_Init+0x50>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	f004 f91c 	bl	8005198 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f66:	f7ff fd17 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000164 	.word	0x20000164
 8000f74:	40004400 	.word	0x40004400

08000f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_UART_MspInit+0x8c>)
 8000fee:	f001 fc83 	bl	80028f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40004400 	.word	0x40004400
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	; (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff feaf 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f004 fc77 	bl	8005928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fb41 	bl	80006c0 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800104c:	0800b1c4 	.word	0x0800b1c4
  ldr r2, =_sbss
 8001050:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001054:	200001e4 	.word	0x200001e4

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8001066:	1df9      	adds	r1, r7, #7
 8001068:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800106c:	2201      	movs	r2, #1
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <DEV_SPI_WRite+0x20>)
 8001070:	f003 f9c0 	bl	80043f4 <HAL_SPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000c0 	.word	0x200000c0

08001080 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <DEV_Module_Init+0x34>)
 800108c:	f001 fdc8 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <DEV_Module_Init+0x38>)
 8001096:	f001 fdc3 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <DEV_Module_Init+0x34>)
 80010a2:	f001 fdbd 	bl	8002c20 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010a6:	2104      	movs	r1, #4
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <DEV_Module_Init+0x3c>)
 80010aa:	f003 fbf9 	bl	80048a0 <HAL_TIM_PWM_Start>
		return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	2000011c 	.word	0x2000011c

080010c0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	4603      	mov	r3, r0
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	4613      	mov	r3, r2
 80010dc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <Paint_NewImage+0x90>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <Paint_NewImage+0x90>)
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80010ea:	4a19      	ldr	r2, [pc, #100]	; (8001150 <Paint_NewImage+0x90>)
 80010ec:	883b      	ldrh	r3, [r7, #0]
 80010ee:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <Paint_NewImage+0x90>)
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <Paint_NewImage+0x90>)
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <Paint_NewImage+0x90>)
 80010fe:	8a5b      	ldrh	r3, [r3, #18]
 8001100:	b29b      	uxth	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <Paint_NewImage+0x90>)
 8001106:	8a9b      	ldrh	r3, [r3, #20]
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <Paint_NewImage+0x94>)
 800110e:	f004 fd17 	bl	8005b40 <iprintf>
   
    Paint.Rotate = Rotate;
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <Paint_NewImage+0x90>)
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <Paint_NewImage+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <Paint_NewImage+0x6a>
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	2bb4      	cmp	r3, #180	; 0xb4
 8001128:	d106      	bne.n	8001138 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <Paint_NewImage+0x90>)
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <Paint_NewImage+0x90>)
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	80d3      	strh	r3, [r2, #6]
 8001136:	e006      	b.n	8001146 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <Paint_NewImage+0x90>)
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <Paint_NewImage+0x90>)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	80d3      	strh	r3, [r2, #6]
    }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	200001a8 	.word	0x200001a8
 8001154:	08006a64 	.word	0x08006a64

08001158 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <Paint_SetClearFuntion+0x1c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001c4 	.word	0x200001c4

08001178 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <Paint_SetDisplayFuntion+0x1c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001c0 	.word	0x200001c0

08001198 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	80bb      	strh	r3, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <Paint_SetPixel+0x154>)
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d805      	bhi.n	80011c2 <Paint_SetPixel+0x2a>
 80011b6:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <Paint_SetPixel+0x154>)
 80011b8:	88db      	ldrh	r3, [r3, #6]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	88ba      	ldrh	r2, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d903      	bls.n	80011ca <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80011c2:	484b      	ldr	r0, [pc, #300]	; (80012f0 <Paint_SetPixel+0x158>)
 80011c4:	f004 fd42 	bl	8005c4c <puts>
        return;
 80011c8:	e08c      	b.n	80012e4 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <Paint_SetPixel+0x154>)
 80011cc:	89db      	ldrh	r3, [r3, #14]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80011d4:	d02d      	beq.n	8001232 <Paint_SetPixel+0x9a>
 80011d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80011da:	f300 8080 	bgt.w	80012de <Paint_SetPixel+0x146>
 80011de:	2bb4      	cmp	r3, #180	; 0xb4
 80011e0:	d016      	beq.n	8001210 <Paint_SetPixel+0x78>
 80011e2:	2bb4      	cmp	r3, #180	; 0xb4
 80011e4:	dc7b      	bgt.n	80012de <Paint_SetPixel+0x146>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <Paint_SetPixel+0x58>
 80011ea:	2b5a      	cmp	r3, #90	; 0x5a
 80011ec:	d005      	beq.n	80011fa <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80011ee:	e076      	b.n	80012de <Paint_SetPixel+0x146>
        X = Xpoint;
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	81bb      	strh	r3, [r7, #12]
        break;
 80011f8:	e026      	b.n	8001248 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <Paint_SetPixel+0x154>)
 80011fc:	891b      	ldrh	r3, [r3, #8]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	81bb      	strh	r3, [r7, #12]
        break;
 800120e:	e01b      	b.n	8001248 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <Paint_SetPixel+0x154>)
 8001212:	891b      	ldrh	r3, [r3, #8]
 8001214:	b29a      	uxth	r2, r3
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <Paint_SetPixel+0x154>)
 8001222:	895b      	ldrh	r3, [r3, #10]
 8001224:	b29a      	uxth	r2, r3
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	3b01      	subs	r3, #1
 800122e:	81bb      	strh	r3, [r7, #12]
        break;
 8001230:	e00a      	b.n	8001248 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <Paint_SetPixel+0x154>)
 8001238:	895b      	ldrh	r3, [r3, #10]
 800123a:	b29a      	uxth	r2, r3
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	3b01      	subs	r3, #1
 8001244:	81bb      	strh	r3, [r7, #12]
        break;
 8001246:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <Paint_SetPixel+0x154>)
 800124a:	8a1b      	ldrh	r3, [r3, #16]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d847      	bhi.n	80012e2 <Paint_SetPixel+0x14a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <Paint_SetPixel+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012af 	.word	0x080012af
 800125c:	08001269 	.word	0x08001269
 8001260:	0800127b 	.word	0x0800127b
 8001264:	0800128d 	.word	0x0800128d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <Paint_SetPixel+0x154>)
 800126a:	891b      	ldrh	r3, [r3, #8]
 800126c:	b29a      	uxth	r2, r3
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	3b01      	subs	r3, #1
 8001276:	81fb      	strh	r3, [r7, #14]
        break;
 8001278:	e01a      	b.n	80012b0 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <Paint_SetPixel+0x154>)
 800127c:	895b      	ldrh	r3, [r3, #10]
 800127e:	b29a      	uxth	r2, r3
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	81bb      	strh	r3, [r7, #12]
        break;
 800128a:	e011      	b.n	80012b0 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <Paint_SetPixel+0x154>)
 800128e:	891b      	ldrh	r3, [r3, #8]
 8001290:	b29a      	uxth	r2, r3
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b01      	subs	r3, #1
 800129a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <Paint_SetPixel+0x154>)
 800129e:	895b      	ldrh	r3, [r3, #10]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	89bb      	ldrh	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	81bb      	strh	r3, [r7, #12]
        break;
 80012ac:	e000      	b.n	80012b0 <Paint_SetPixel+0x118>
        break;
 80012ae:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <Paint_SetPixel+0x154>)
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	89fa      	ldrh	r2, [r7, #14]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d805      	bhi.n	80012c8 <Paint_SetPixel+0x130>
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <Paint_SetPixel+0x154>)
 80012be:	895b      	ldrh	r3, [r3, #10]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	89ba      	ldrh	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d903      	bls.n	80012d0 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <Paint_SetPixel+0x158>)
 80012ca:	f004 fcbf 	bl	8005c4c <puts>
        return;
 80012ce:	e009      	b.n	80012e4 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Paint_SetPixel+0x15c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	89b9      	ldrh	r1, [r7, #12]
 80012d8:	89f8      	ldrh	r0, [r7, #14]
 80012da:	4798      	blx	r3
 80012dc:	e002      	b.n	80012e4 <Paint_SetPixel+0x14c>
        return;
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <Paint_SetPixel+0x14c>
        return;
 80012e2:	bf00      	nop
}
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001a8 	.word	0x200001a8
 80012f0:	08006b64 	.word	0x08006b64
 80012f4:	200001c0 	.word	0x200001c0

080012f8 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <Paint_Clear+0x1c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	4610      	mov	r0, r2
 800130a:	4798      	blx	r3
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200001c4 	.word	0x200001c4

08001318 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <Paint_DrawPoint+0x130>)
 8001338:	889b      	ldrh	r3, [r3, #4]
 800133a:	b29b      	uxth	r3, r3
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	429a      	cmp	r2, r3
 8001340:	d805      	bhi.n	800134e <Paint_DrawPoint+0x36>
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <Paint_DrawPoint+0x130>)
 8001344:	88db      	ldrh	r3, [r3, #6]
 8001346:	b29b      	uxth	r3, r3
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	d903      	bls.n	8001356 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800134e:	483f      	ldr	r0, [pc, #252]	; (800144c <Paint_DrawPoint+0x134>)
 8001350:	f004 fc7c 	bl	8005c4c <puts>
        return;
 8001354:	e074      	b.n	8001440 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8001356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d144      	bne.n	80013e8 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 800135e:	2300      	movs	r3, #0
 8001360:	81fb      	strh	r3, [r7, #14]
 8001362:	e039      	b.n	80013d8 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001364:	2300      	movs	r3, #0
 8001366:	81bb      	strh	r3, [r7, #12]
 8001368:	e029      	b.n	80013be <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001370:	441a      	add	r2, r3
 8001372:	787b      	ldrb	r3, [r7, #1]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	db28      	blt.n	80013cc <Paint_DrawPoint+0xb4>
 800137a:	88ba      	ldrh	r2, [r7, #4]
 800137c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001380:	441a      	add	r2, r3
 8001382:	787b      	ldrb	r3, [r7, #1]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	db20      	blt.n	80013cc <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4413      	add	r3, r2
 8001390:	b29a      	uxth	r2, r3
 8001392:	787b      	ldrb	r3, [r7, #1]
 8001394:	b29b      	uxth	r3, r3
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b298      	uxth	r0, r3
 800139a:	89ba      	ldrh	r2, [r7, #12]
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	787b      	ldrb	r3, [r7, #1]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fef3 	bl	8001198 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80013b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	81bb      	strh	r3, [r7, #12]
 80013be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013c2:	787b      	ldrb	r3, [r7, #1]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbce      	blt.n	800136a <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80013cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	81fb      	strh	r3, [r7, #14]
 80013d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	3b01      	subs	r3, #1
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbbe      	blt.n	8001364 <Paint_DrawPoint+0x4c>
 80013e6:	e02b      	b.n	8001440 <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	81fb      	strh	r3, [r7, #14]
 80013ec:	e023      	b.n	8001436 <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	81bb      	strh	r3, [r7, #12]
 80013f2:	e015      	b.n	8001420 <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80013f4:	89fa      	ldrh	r2, [r7, #14]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b298      	uxth	r0, r3
 8001400:	89ba      	ldrh	r2, [r7, #12]
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fec2 	bl	8001198 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001414:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001418:	b29b      	uxth	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	81bb      	strh	r3, [r7, #12]
 8001420:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbe4      	blt.n	80013f4 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800142a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3301      	adds	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	81fb      	strh	r3, [r7, #14]
 8001436:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800143a:	787b      	ldrb	r3, [r7, #1]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbd6      	blt.n	80013ee <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	200001a8 	.word	0x200001a8
 800144c:	08006b8c 	.word	0x08006b8c

08001450 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b08d      	sub	sp, #52	; 0x34
 8001454:	af02      	add	r7, sp, #8
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	4603      	mov	r3, r0
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800146e:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <Paint_DrawLine+0x154>)
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	b29b      	uxth	r3, r3
 8001474:	88fa      	ldrh	r2, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d811      	bhi.n	800149e <Paint_DrawLine+0x4e>
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <Paint_DrawLine+0x154>)
 800147c:	88db      	ldrh	r3, [r3, #6]
 800147e:	b29b      	uxth	r3, r3
 8001480:	88ba      	ldrh	r2, [r7, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	d80b      	bhi.n	800149e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <Paint_DrawLine+0x154>)
 8001488:	889b      	ldrh	r3, [r3, #4]
 800148a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	429a      	cmp	r2, r3
 8001490:	d805      	bhi.n	800149e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <Paint_DrawLine+0x154>)
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	b29b      	uxth	r3, r3
 8001498:	883a      	ldrh	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d903      	bls.n	80014a6 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800149e:	4842      	ldr	r0, [pc, #264]	; (80015a8 <Paint_DrawLine+0x158>)
 80014a0:	f004 fbd4 	bl	8005c4c <puts>
        return;
 80014a4:	e07b      	b.n	800159e <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bfb8      	it	lt
 80014b8:	425b      	neglt	r3, r3
 80014ba:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80014bc:	883a      	ldrh	r2, [r7, #0]
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bfb8      	it	lt
 80014c6:	425b      	neglt	r3, r3
 80014c8:	425b      	negs	r3, r3
 80014ca:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d201      	bcs.n	80014d8 <Paint_DrawLine+0x88>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e001      	b.n	80014dc <Paint_DrawLine+0x8c>
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80014de:	88ba      	ldrh	r2, [r7, #4]
 80014e0:	883b      	ldrh	r3, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d201      	bcs.n	80014ea <Paint_DrawLine+0x9a>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e001      	b.n	80014ee <Paint_DrawLine+0x9e>
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4413      	add	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80014fc:	7ffb      	ldrb	r3, [r7, #31]
 80014fe:	3301      	adds	r3, #1
 8001500:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001502:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001506:	2b01      	cmp	r3, #1
 8001508:	d118      	bne.n	800153c <Paint_DrawLine+0xec>
 800150a:	7ffa      	ldrb	r2, [r7, #31]
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <Paint_DrawLine+0x15c>)
 800150e:	fba3 1302 	umull	r1, r3, r3, r2
 8001512:	0859      	lsrs	r1, r3, #1
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001522:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001526:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001528:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800152a:	2201      	movs	r2, #1
 800152c:	9200      	str	r2, [sp, #0]
 800152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001532:	f7ff fef1 	bl	8001318 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	77fb      	strb	r3, [r7, #31]
 800153a:	e008      	b.n	800154e <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800153c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001540:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001542:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001544:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001546:	2401      	movs	r4, #1
 8001548:	9400      	str	r4, [sp, #0]
 800154a:	f7ff fee5 	bl	8001318 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	dc0c      	bgt.n	8001572 <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8001558:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	429a      	cmp	r2, r3
 800155e:	d01b      	beq.n	8001598 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8001560:	6a3a      	ldr	r2, [r7, #32]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4413      	add	r3, r2
 8001566:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	b29a      	uxth	r2, r3
 800156c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156e:	4413      	add	r3, r2
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbbf      	blt.n	80014fc <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 800157c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800157e:	883b      	ldrh	r3, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d00b      	beq.n	800159c <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4413      	add	r3, r2
 800158a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001592:	4413      	add	r3, r2
 8001594:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8001596:	e7b1      	b.n	80014fc <Paint_DrawLine+0xac>
                break;
 8001598:	bf00      	nop
 800159a:	e000      	b.n	800159e <Paint_DrawLine+0x14e>
                break;
 800159c:	bf00      	nop
        }
    }
}
 800159e:	372c      	adds	r7, #44	; 0x2c
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	200001a8 	.word	0x200001a8
 80015a8:	08006bcc 	.word	0x08006bcc
 80015ac:	aaaaaaab 	.word	0xaaaaaaab

080015b0 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	4603      	mov	r3, r0
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80015ce:	4b68      	ldr	r3, [pc, #416]	; (8001770 <Paint_DrawCircle+0x1c0>)
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d805      	bhi.n	80015e6 <Paint_DrawCircle+0x36>
 80015da:	4b65      	ldr	r3, [pc, #404]	; (8001770 <Paint_DrawCircle+0x1c0>)
 80015dc:	88db      	ldrh	r3, [r3, #6]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	88ba      	ldrh	r2, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d303      	bcc.n	80015ee <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 80015e6:	4863      	ldr	r0, [pc, #396]	; (8001774 <Paint_DrawCircle+0x1c4>)
 80015e8:	f004 fb30 	bl	8005c4c <puts>
        return;
 80015ec:	e16b      	b.n	80018c6 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f1c3 0303 	rsb	r3, r3, #3
 8001600:	b29b      	uxth	r3, r3
 8001602:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 8155 	bne.w	80018b8 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800160e:	e0a6      	b.n	800175e <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	813b      	strh	r3, [r7, #8]
 8001614:	e075      	b.n	8001702 <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001616:	89fa      	ldrh	r2, [r7, #14]
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4413      	add	r3, r2
 800161c:	b298      	uxth	r0, r3
 800161e:	893a      	ldrh	r2, [r7, #8]
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	b299      	uxth	r1, r3
 8001626:	883a      	ldrh	r2, [r7, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	f7ff fe73 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	b298      	uxth	r0, r3
 800163a:	893a      	ldrh	r2, [r7, #8]
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	b299      	uxth	r1, r3
 8001642:	883a      	ldrh	r2, [r7, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	f7ff fe65 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800164e:	893b      	ldrh	r3, [r7, #8]
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b298      	uxth	r0, r3
 8001656:	89fa      	ldrh	r2, [r7, #14]
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	b299      	uxth	r1, r3
 800165e:	883a      	ldrh	r2, [r7, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	f7ff fe57 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800166a:	893b      	ldrh	r3, [r7, #8]
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b298      	uxth	r0, r3
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	88ba      	ldrh	r2, [r7, #4]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b299      	uxth	r1, r3
 800167a:	883a      	ldrh	r2, [r7, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	f7ff fe49 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	b298      	uxth	r0, r3
 800168e:	893b      	ldrh	r3, [r7, #8]
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b299      	uxth	r1, r3
 8001696:	883a      	ldrh	r2, [r7, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	f7ff fe3b 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 80016a2:	89fa      	ldrh	r2, [r7, #14]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4413      	add	r3, r2
 80016a8:	b298      	uxth	r0, r3
 80016aa:	893b      	ldrh	r3, [r7, #8]
 80016ac:	88ba      	ldrh	r2, [r7, #4]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	b299      	uxth	r1, r3
 80016b2:	883a      	ldrh	r2, [r7, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	f7ff fe2d 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 80016be:	893a      	ldrh	r2, [r7, #8]
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	4413      	add	r3, r2
 80016c4:	b298      	uxth	r0, r3
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	88ba      	ldrh	r2, [r7, #4]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b299      	uxth	r1, r3
 80016ce:	883a      	ldrh	r2, [r7, #0]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	f7ff fe1f 	bl	8001318 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 80016da:	893a      	ldrh	r2, [r7, #8]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4413      	add	r3, r2
 80016e0:	b298      	uxth	r0, r3
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	b299      	uxth	r1, r3
 80016ea:	883a      	ldrh	r2, [r7, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	f7ff fe11 	bl	8001318 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80016f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b29b      	uxth	r3, r3
 8001700:	813b      	strh	r3, [r7, #8]
 8001702:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001706:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	dd83      	ble.n	8001616 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800170e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da09      	bge.n	800172a <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	b29a      	uxth	r2, r3
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	3306      	adds	r3, #6
 8001724:	b29b      	uxth	r3, r3
 8001726:	817b      	strh	r3, [r7, #10]
 8001728:	e013      	b.n	8001752 <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800172a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800172e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	b29a      	uxth	r2, r3
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	330a      	adds	r3, #10
 8001742:	b29b      	uxth	r3, r3
 8001744:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001746:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	b29b      	uxth	r3, r3
 800175c:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800175e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001762:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001766:	429a      	cmp	r2, r3
 8001768:	f77f af52 	ble.w	8001610 <Paint_DrawCircle+0x60>
 800176c:	e0ab      	b.n	80018c6 <Paint_DrawCircle+0x316>
 800176e:	bf00      	nop
 8001770:	200001a8 	.word	0x200001a8
 8001774:	08006c3c 	.word	0x08006c3c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001778:	89fa      	ldrh	r2, [r7, #14]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4413      	add	r3, r2
 800177e:	b298      	uxth	r0, r3
 8001780:	89ba      	ldrh	r2, [r7, #12]
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	b299      	uxth	r1, r3
 8001788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178c:	883a      	ldrh	r2, [r7, #0]
 800178e:	2401      	movs	r4, #1
 8001790:	9400      	str	r4, [sp, #0]
 8001792:	f7ff fdc1 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	88fa      	ldrh	r2, [r7, #6]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	b298      	uxth	r0, r3
 800179e:	89ba      	ldrh	r2, [r7, #12]
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	b299      	uxth	r1, r3
 80017a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017aa:	883a      	ldrh	r2, [r7, #0]
 80017ac:	2401      	movs	r4, #1
 80017ae:	9400      	str	r4, [sp, #0]
 80017b0:	f7ff fdb2 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	88fa      	ldrh	r2, [r7, #6]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b298      	uxth	r0, r3
 80017bc:	89fa      	ldrh	r2, [r7, #14]
 80017be:	88bb      	ldrh	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	b299      	uxth	r1, r3
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	883a      	ldrh	r2, [r7, #0]
 80017ca:	2401      	movs	r4, #1
 80017cc:	9400      	str	r4, [sp, #0]
 80017ce:	f7ff fda3 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	88fa      	ldrh	r2, [r7, #6]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	b298      	uxth	r0, r3
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	88ba      	ldrh	r2, [r7, #4]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e6:	883a      	ldrh	r2, [r7, #0]
 80017e8:	2401      	movs	r4, #1
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	f7ff fd94 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	88fa      	ldrh	r2, [r7, #6]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b298      	uxth	r0, r3
 80017f8:	89bb      	ldrh	r3, [r7, #12]
 80017fa:	88ba      	ldrh	r2, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b299      	uxth	r1, r3
 8001800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001804:	883a      	ldrh	r2, [r7, #0]
 8001806:	2401      	movs	r4, #1
 8001808:	9400      	str	r4, [sp, #0]
 800180a:	f7ff fd85 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800180e:	89fa      	ldrh	r2, [r7, #14]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4413      	add	r3, r2
 8001814:	b298      	uxth	r0, r3
 8001816:	89bb      	ldrh	r3, [r7, #12]
 8001818:	88ba      	ldrh	r2, [r7, #4]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b299      	uxth	r1, r3
 800181e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001822:	883a      	ldrh	r2, [r7, #0]
 8001824:	2401      	movs	r4, #1
 8001826:	9400      	str	r4, [sp, #0]
 8001828:	f7ff fd76 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800182c:	89ba      	ldrh	r2, [r7, #12]
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	4413      	add	r3, r2
 8001832:	b298      	uxth	r0, r3
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	88ba      	ldrh	r2, [r7, #4]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	b299      	uxth	r1, r3
 800183c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001840:	883a      	ldrh	r2, [r7, #0]
 8001842:	2401      	movs	r4, #1
 8001844:	9400      	str	r4, [sp, #0]
 8001846:	f7ff fd67 	bl	8001318 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800184a:	89ba      	ldrh	r2, [r7, #12]
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4413      	add	r3, r2
 8001850:	b298      	uxth	r0, r3
 8001852:	89fa      	ldrh	r2, [r7, #14]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	b299      	uxth	r1, r3
 800185a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800185e:	883a      	ldrh	r2, [r7, #0]
 8001860:	2401      	movs	r4, #1
 8001862:	9400      	str	r4, [sp, #0]
 8001864:	f7ff fd58 	bl	8001318 <Paint_DrawPoint>

            if (Esp < 0 )
 8001868:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da09      	bge.n	8001884 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8001870:	89fb      	ldrh	r3, [r7, #14]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	b29a      	uxth	r2, r3
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	3306      	adds	r3, #6
 800187e:	b29b      	uxth	r3, r3
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	e013      	b.n	80018ac <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001884:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	b29b      	uxth	r3, r3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	b29a      	uxth	r2, r3
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	330a      	adds	r3, #10
 800189c:	b29b      	uxth	r3, r3
 800189e:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80018a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80018ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80018b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f77f af59 	ble.w	8001778 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4603      	mov	r3, r0
 80018d6:	81fb      	strh	r3, [r7, #14]
 80018d8:	460b      	mov	r3, r1
 80018da:	81bb      	strh	r3, [r7, #12]
 80018dc:	4613      	mov	r3, r2
 80018de:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80018e0:	4b4e      	ldr	r3, [pc, #312]	; (8001a1c <Paint_DrawChar+0x150>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	89fa      	ldrh	r2, [r7, #14]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d805      	bhi.n	80018f8 <Paint_DrawChar+0x2c>
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <Paint_DrawChar+0x150>)
 80018ee:	88db      	ldrh	r3, [r3, #6]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	89ba      	ldrh	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d903      	bls.n	8001900 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80018f8:	4849      	ldr	r0, [pc, #292]	; (8001a20 <Paint_DrawChar+0x154>)
 80018fa:	f004 f9a7 	bl	8005c4c <puts>
        return;
 80018fe:	e089      	b.n	8001a14 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	3b20      	subs	r3, #32
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	88d2      	ldrh	r2, [r2, #6]
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	8892      	ldrh	r2, [r2, #4]
 8001910:	08d2      	lsrs	r2, r2, #3
 8001912:	b292      	uxth	r2, r2
 8001914:	4611      	mov	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	8892      	ldrh	r2, [r2, #4]
 800191a:	f002 0207 	and.w	r2, r2, #7
 800191e:	b292      	uxth	r2, r2
 8001920:	2a00      	cmp	r2, #0
 8001922:	bf14      	ite	ne
 8001924:	2201      	movne	r2, #1
 8001926:	2200      	moveq	r2, #0
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440a      	add	r2, r1
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800193c:	2300      	movs	r3, #0
 800193e:	83fb      	strh	r3, [r7, #30]
 8001940:	e063      	b.n	8001a0a <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001942:	2300      	movs	r3, #0
 8001944:	83bb      	strh	r3, [r7, #28]
 8001946:	e04e      	b.n	80019e6 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001948:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800194a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194e:	4293      	cmp	r3, r2
 8001950:	d118      	bne.n	8001984 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	8bbb      	ldrh	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	fa42 f303 	asr.w	r3, r2, r3
 8001964:	400b      	ands	r3, r1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d031      	beq.n	80019ce <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800196a:	89fa      	ldrh	r2, [r7, #14]
 800196c:	8bbb      	ldrh	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	b298      	uxth	r0, r3
 8001972:	89ba      	ldrh	r2, [r7, #12]
 8001974:	8bfb      	ldrh	r3, [r7, #30]
 8001976:	4413      	add	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff fc0b 	bl	8001198 <Paint_SetPixel>
 8001982:	e024      	b.n	80019ce <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	8bbb      	ldrh	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	fa42 f303 	asr.w	r3, r2, r3
 8001996:	400b      	ands	r3, r1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800199c:	89fa      	ldrh	r2, [r7, #14]
 800199e:	8bbb      	ldrh	r3, [r7, #28]
 80019a0:	4413      	add	r3, r2
 80019a2:	b298      	uxth	r0, r3
 80019a4:	89ba      	ldrh	r2, [r7, #12]
 80019a6:	8bfb      	ldrh	r3, [r7, #30]
 80019a8:	4413      	add	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff fbf2 	bl	8001198 <Paint_SetPixel>
 80019b4:	e00b      	b.n	80019ce <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80019b6:	89fa      	ldrh	r2, [r7, #14]
 80019b8:	8bbb      	ldrh	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	b298      	uxth	r0, r3
 80019be:	89ba      	ldrh	r2, [r7, #12]
 80019c0:	8bfb      	ldrh	r3, [r7, #30]
 80019c2:	4413      	add	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019c8:	4619      	mov	r1, r3
 80019ca:	f7ff fbe5 	bl	8001198 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80019ce:	8bbb      	ldrh	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d102      	bne.n	80019e0 <Paint_DrawChar+0x114>
                ptr++;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	3301      	adds	r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80019e0:	8bbb      	ldrh	r3, [r7, #28]
 80019e2:	3301      	adds	r3, #1
 80019e4:	83bb      	strh	r3, [r7, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	889b      	ldrh	r3, [r3, #4]
 80019ea:	8bba      	ldrh	r2, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3ab      	bcc.n	8001948 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	889b      	ldrh	r3, [r3, #4]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <Paint_DrawChar+0x138>
            ptr++;
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001a04:	8bfb      	ldrh	r3, [r7, #30]
 8001a06:	3301      	adds	r3, #1
 8001a08:	83fb      	strh	r3, [r7, #30]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	88db      	ldrh	r3, [r3, #6]
 8001a0e:	8bfa      	ldrh	r2, [r7, #30]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d396      	bcc.n	8001942 <Paint_DrawChar+0x76>
    }// Write all
}
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001a8 	.word	0x200001a8
 8001a20:	08006c80 	.word	0x08006c80

08001a24 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4603      	mov	r3, r0
 8001a30:	81fb      	strh	r3, [r7, #14]
 8001a32:	460b      	mov	r3, r1
 8001a34:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001a3a:	89bb      	ldrh	r3, [r7, #12]
 8001a3c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <Paint_DrawString_EN+0xa8>)
 8001a40:	889b      	ldrh	r3, [r3, #4]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	89fa      	ldrh	r2, [r7, #14]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d805      	bhi.n	8001a56 <Paint_DrawString_EN+0x32>
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <Paint_DrawString_EN+0xa8>)
 8001a4c:	88db      	ldrh	r3, [r3, #6]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	89ba      	ldrh	r2, [r7, #12]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d933      	bls.n	8001abe <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8001a56:	481e      	ldr	r0, [pc, #120]	; (8001ad0 <Paint_DrawString_EN+0xac>)
 8001a58:	f004 f8f8 	bl	8005c4c <puts>
        return;
 8001a5c:	e033      	b.n	8001ac6 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	8892      	ldrh	r2, [r2, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <Paint_DrawString_EN+0xa8>)
 8001a68:	8892      	ldrh	r2, [r2, #4]
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	dd06      	ble.n	8001a7e <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	88da      	ldrh	r2, [r3, #6]
 8001a78:	8abb      	ldrh	r3, [r7, #20]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001a7e:	8abb      	ldrh	r3, [r7, #20]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	88d2      	ldrh	r2, [r2, #6]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <Paint_DrawString_EN+0xa8>)
 8001a88:	88d2      	ldrh	r2, [r2, #6]
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	dd03      	ble.n	8001a98 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	8ab9      	ldrh	r1, [r7, #20]
 8001a9e:	8af8      	ldrh	r0, [r7, #22]
 8001aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	8c3b      	ldrh	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f7ff ff0f 	bl	80018cc <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	889a      	ldrh	r2, [r3, #4]
 8001ab8:	8afb      	ldrh	r3, [r7, #22]
 8001aba:	4413      	add	r3, r2
 8001abc:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1cb      	bne.n	8001a5e <Paint_DrawString_EN+0x3a>
    }
}
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200001a8 	.word	0x200001a8
 8001ad0:	08006cc0 	.word	0x08006cc0

08001ad4 <Paint_DrawString_CN>:
    Font             ：A structure pointer that displays a character size
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	81fb      	strh	r3, [r7, #14]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001af2:	e180      	b.n	8001df6 <Paint_DrawString_CN+0x322>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f2c0 80b7 	blt.w	8001c6e <Paint_DrawString_CN+0x19a>
            for(Num = 0; Num < font->size; Num++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e0a2      	b.n	8001c4c <Paint_DrawString_CN+0x178>
                if(*p_text== font->table[Num].index[0]) {
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	20a6      	movs	r0, #166	; 0xa6
 8001b12:	fb00 f303 	mul.w	r3, r0, r3
 8001b16:	440b      	add	r3, r1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f040 8093 	bne.w	8001c46 <Paint_DrawString_CN+0x172>
                    const char* ptr = &font->table[Num].matrix[0];
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	21a6      	movs	r1, #166	; 0xa6
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	e07e      	b.n	8001c36 <Paint_DrawString_CN+0x162>
                        for (i = 0; i < font->Width; i++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	e068      	b.n	8001c10 <Paint_DrawString_CN+0x13c>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001b3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d121      	bne.n	8001b8c <Paint_DrawString_CN+0xb8>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	425a      	negs	r2, r3
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	f002 0207 	and.w	r2, r2, #7
 8001b5a:	bf58      	it	pl
 8001b5c:	4253      	negpl	r3, r2
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	fa42 f303 	asr.w	r3, r2, r3
 8001b64:	400b      	ands	r3, r1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d042      	beq.n	8001bf0 <Paint_DrawString_CN+0x11c>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	b298      	uxth	r0, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff fb07 	bl	8001198 <Paint_SetPixel>
 8001b8a:	e031      	b.n	8001bf0 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	425a      	negs	r2, r3
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	f002 0207 	and.w	r2, r2, #7
 8001b9e:	bf58      	it	pl
 8001ba0:	4253      	negpl	r3, r2
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	fa42 f303 	asr.w	r3, r2, r3
 8001ba8:	400b      	ands	r3, r1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <Paint_DrawString_CN+0xfc>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b298      	uxth	r0, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff fae5 	bl	8001198 <Paint_SetPixel>
 8001bce:	e00f      	b.n	8001bf0 <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b298      	uxth	r0, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff fad4 	bl	8001198 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	425a      	negs	r2, r3
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	f002 0207 	and.w	r2, r2, #7
 8001bfc:	bf58      	it	pl
 8001bfe:	4253      	negpl	r3, r2
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d102      	bne.n	8001c0a <Paint_DrawString_CN+0x136>
                                ptr++;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	891b      	ldrh	r3, [r3, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	db90      	blt.n	8001b3e <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	891b      	ldrh	r3, [r3, #8]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <Paint_DrawString_CN+0x15c>
                            ptr++;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	3301      	adds	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	895b      	ldrh	r3, [r3, #10]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	f6ff af7a 	blt.w	8001b38 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8001c44:	e009      	b.n	8001c5a <Paint_DrawString_CN+0x186>
            for(Num = 0; Num < font->size; Num++) {
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	461a      	mov	r2, r3
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	f6ff af56 	blt.w	8001b06 <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	88db      	ldrh	r3, [r3, #6]
 8001c64:	461a      	mov	r2, r3
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	4413      	add	r3, r2
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6c:	e0c3      	b.n	8001df6 <Paint_DrawString_CN+0x322>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e0b0      	b.n	8001dd6 <Paint_DrawString_CN+0x302>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	20a6      	movs	r0, #166	; 0xa6
 8001c80:	fb00 f303 	mul.w	r3, r0, r3
 8001c84:	440b      	add	r3, r1
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 80a1 	bne.w	8001dd0 <Paint_DrawString_CN+0x2fc>
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	3301      	adds	r3, #1
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	20a6      	movs	r0, #166	; 0xa6
 8001c9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8093 	bne.w	8001dd0 <Paint_DrawString_CN+0x2fc>
                    const char* ptr = &font->table[Num].matrix[0];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	21a6      	movs	r1, #166	; 0xa6
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
 8001cc0:	e07e      	b.n	8001dc0 <Paint_DrawString_CN+0x2ec>
                        for (i = 0; i < font->Width; i++) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	e068      	b.n	8001d9a <Paint_DrawString_CN+0x2c6>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001cc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d121      	bne.n	8001d16 <Paint_DrawString_CN+0x242>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	425a      	negs	r2, r3
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	f002 0207 	and.w	r2, r2, #7
 8001ce4:	bf58      	it	pl
 8001ce6:	4253      	negpl	r3, r2
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	fa42 f303 	asr.w	r3, r2, r3
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d042      	beq.n	8001d7a <Paint_DrawString_CN+0x2a6>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b298      	uxth	r0, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7ff fa42 	bl	8001198 <Paint_SetPixel>
 8001d14:	e031      	b.n	8001d7a <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	425a      	negs	r2, r3
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	f002 0207 	and.w	r2, r2, #7
 8001d28:	bf58      	it	pl
 8001d2a:	4253      	negpl	r3, r2
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	fa42 f303 	asr.w	r3, r2, r3
 8001d32:	400b      	ands	r3, r1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <Paint_DrawString_CN+0x286>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b298      	uxth	r0, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7ff fa20 	bl	8001198 <Paint_SetPixel>
 8001d58:	e00f      	b.n	8001d7a <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b298      	uxth	r0, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7ff fa0f 	bl	8001198 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	425a      	negs	r2, r3
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	f002 0207 	and.w	r2, r2, #7
 8001d86:	bf58      	it	pl
 8001d88:	4253      	negpl	r3, r2
 8001d8a:	2b07      	cmp	r3, #7
 8001d8c:	d102      	bne.n	8001d94 <Paint_DrawString_CN+0x2c0>
                                ptr++;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	3301      	adds	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	891b      	ldrh	r3, [r3, #8]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	4293      	cmp	r3, r2
 8001da4:	db90      	blt.n	8001cc8 <Paint_DrawString_CN+0x1f4>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	891b      	ldrh	r3, [r3, #8]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <Paint_DrawString_CN+0x2e6>
                            ptr++;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	895b      	ldrh	r3, [r3, #10]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	f6ff af7a 	blt.w	8001cc2 <Paint_DrawString_CN+0x1ee>
                        }
                    }
                    break;
 8001dce:	e009      	b.n	8001de4 <Paint_DrawString_CN+0x310>
            for(Num = 0; Num < font->size; Num++) {
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f6ff af48 	blt.w	8001c74 <Paint_DrawString_CN+0x1a0>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	3302      	adds	r3, #2
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	891b      	ldrh	r3, [r3, #8]
 8001dee:	461a      	mov	r2, r3
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	4413      	add	r3, r2
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f47f ae7a 	bne.w	8001af4 <Paint_DrawString_CN+0x20>
        }
    }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	817b      	strh	r3, [r7, #10]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	813b      	strh	r3, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	e049      	b.n	8001ec0 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e03f      	b.n	8001eb2 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8001e32:	897a      	ldrh	r2, [r7, #10]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <Paint_DrawImage+0xc8>)
 8001e3a:	8912      	ldrh	r2, [r2, #8]
 8001e3c:	b292      	uxth	r2, r2
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	da34      	bge.n	8001eac <Paint_DrawImage+0xa0>
 8001e42:	893a      	ldrh	r2, [r7, #8]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <Paint_DrawImage+0xc8>)
 8001e4a:	8952      	ldrh	r2, [r2, #10]
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	da2c      	bge.n	8001eac <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	893b      	ldrh	r3, [r7, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	b29c      	uxth	r4, r3
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	461a      	mov	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	3301      	adds	r3, #1
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4619      	mov	r1, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	440b      	add	r3, r1
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	440b      	add	r3, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	f7ff f976 	bl	8001198 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbbb      	blt.n	8001e32 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbb1      	blt.n	8001e2c <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200001a8 	.word	0x200001a8

08001ed8 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    LCD_1IN28_RST_1;
 8001edc:	2201      	movs	r2, #1
 8001ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LCD_1IN28_Reset+0x40>)
 8001ee4:	f000 fe9c 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	f000 fbfb 	bl	80026e4 <HAL_Delay>
    LCD_1IN28_RST_0;
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef4:	4808      	ldr	r0, [pc, #32]	; (8001f18 <LCD_1IN28_Reset+0x40>)
 8001ef6:	f000 fe93 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001efa:	2064      	movs	r0, #100	; 0x64
 8001efc:	f000 fbf2 	bl	80026e4 <HAL_Delay>
    LCD_1IN28_RST_1;
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <LCD_1IN28_Reset+0x40>)
 8001f08:	f000 fe8a 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001f0c:	2064      	movs	r0, #100	; 0x64
 8001f0e:	f000 fbe9 	bl	80026e4 <HAL_Delay>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020000 	.word	0x40020000

08001f1c <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_0;
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2c:	4807      	ldr	r0, [pc, #28]	; (8001f4c <LCD_1IN28_SendCommand+0x30>)
 8001f2e:	f000 fe77 	bl	8002c20 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001f32:	2200      	movs	r2, #0
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <LCD_1IN28_SendCommand+0x34>)
 8001f38:	f000 fe72 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f88c 	bl	800105c <DEV_SPI_WRite>
    // LCD_1IN28_CS_1;
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400

08001f54 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN28_DC_1;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <LCD_1IN28_SendData_8Bit+0x3c>)
 8001f66:	f000 fe5b 	bl	8002c20 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <LCD_1IN28_SendData_8Bit+0x40>)
 8001f70:	f000 fe56 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f870 	bl	800105c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <LCD_1IN28_SendData_8Bit+0x40>)
 8001f82:	f000 fe4d 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400

08001f98 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
    LCD_1IN28_DC_1;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <LCD_1IN28_SendData_16Bit+0x4c>)
 8001faa:	f000 fe39 	bl	8002c20 <HAL_GPIO_WritePin>
    LCD_1IN28_CS_0;
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2140      	movs	r1, #64	; 0x40
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LCD_1IN28_SendData_16Bit+0x50>)
 8001fb4:	f000 fe34 	bl	8002c20 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data >> 8);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f84b 	bl	800105c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data);
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f846 	bl	800105c <DEV_SPI_WRite>
    LCD_1IN28_CS_1;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <LCD_1IN28_SendData_16Bit+0x50>)
 8001fd6:	f000 fe23 	bl	8002c20 <HAL_GPIO_WritePin>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40020400 	.word	0x40020400

08001fec <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  LCD_1IN28_SendCommand(0xEF);
 8001ff0:	20ef      	movs	r0, #239	; 0xef
 8001ff2:	f7ff ff93 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 8001ff6:	20eb      	movs	r0, #235	; 0xeb
 8001ff8:	f7ff ff90 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001ffc:	2014      	movs	r0, #20
 8001ffe:	f7ff ffa9 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0xFE);			 
 8002002:	20fe      	movs	r0, #254	; 0xfe
 8002004:	f7ff ff8a 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8002008:	20ef      	movs	r0, #239	; 0xef
 800200a:	f7ff ff87 	bl	8001f1c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 800200e:	20eb      	movs	r0, #235	; 0xeb
 8002010:	f7ff ff84 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8002014:	2014      	movs	r0, #20
 8002016:	f7ff ff9d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 800201a:	2084      	movs	r0, #132	; 0x84
 800201c:	f7ff ff7e 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8002020:	2040      	movs	r0, #64	; 0x40
 8002022:	f7ff ff97 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8002026:	2085      	movs	r0, #133	; 0x85
 8002028:	f7ff ff78 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800202c:	20ff      	movs	r0, #255	; 0xff
 800202e:	f7ff ff91 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8002032:	2086      	movs	r0, #134	; 0x86
 8002034:	f7ff ff72 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8002038:	20ff      	movs	r0, #255	; 0xff
 800203a:	f7ff ff8b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 800203e:	2087      	movs	r0, #135	; 0x87
 8002040:	f7ff ff6c 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8002044:	20ff      	movs	r0, #255	; 0xff
 8002046:	f7ff ff85 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 800204a:	2088      	movs	r0, #136	; 0x88
 800204c:	f7ff ff66 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8002050:	200a      	movs	r0, #10
 8002052:	f7ff ff7f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8002056:	2089      	movs	r0, #137	; 0x89
 8002058:	f7ff ff60 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 800205c:	2021      	movs	r0, #33	; 0x21
 800205e:	f7ff ff79 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8002062:	208a      	movs	r0, #138	; 0x8a
 8002064:	f7ff ff5a 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ff73 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 800206e:	208b      	movs	r0, #139	; 0x8b
 8002070:	f7ff ff54 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8002074:	2080      	movs	r0, #128	; 0x80
 8002076:	f7ff ff6d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 800207a:	208c      	movs	r0, #140	; 0x8c
 800207c:	f7ff ff4e 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff ff67 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8002086:	208d      	movs	r0, #141	; 0x8d
 8002088:	f7ff ff48 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff ff61 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8002092:	208e      	movs	r0, #142	; 0x8e
 8002094:	f7ff ff42 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8002098:	20ff      	movs	r0, #255	; 0xff
 800209a:	f7ff ff5b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 800209e:	208f      	movs	r0, #143	; 0x8f
 80020a0:	f7ff ff3c 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80020a4:	20ff      	movs	r0, #255	; 0xff
 80020a6:	f7ff ff55 	bl	8001f54 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80020aa:	20b6      	movs	r0, #182	; 0xb6
 80020ac:	f7ff ff36 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ff4f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80020b6:	2020      	movs	r0, #32
 80020b8:	f7ff ff4c 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80020bc:	2036      	movs	r0, #54	; 0x36
 80020be:	f7ff ff2d 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80020c2:	2008      	movs	r0, #8
 80020c4:	f7ff ff46 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 80020c8:	203a      	movs	r0, #58	; 0x3a
 80020ca:	f7ff ff27 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 80020ce:	2005      	movs	r0, #5
 80020d0:	f7ff ff40 	bl	8001f54 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 80020d4:	2090      	movs	r0, #144	; 0x90
 80020d6:	f7ff ff21 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 80020da:	2008      	movs	r0, #8
 80020dc:	f7ff ff3a 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80020e0:	2008      	movs	r0, #8
 80020e2:	f7ff ff37 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80020e6:	2008      	movs	r0, #8
 80020e8:	f7ff ff34 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 80020ec:	2008      	movs	r0, #8
 80020ee:	f7ff ff31 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 80020f2:	20bd      	movs	r0, #189	; 0xbd
 80020f4:	f7ff ff12 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 80020f8:	2006      	movs	r0, #6
 80020fa:	f7ff ff2b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 80020fe:	20bc      	movs	r0, #188	; 0xbc
 8002100:	f7ff ff0c 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff ff25 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 800210a:	20ff      	movs	r0, #255	; 0xff
 800210c:	f7ff ff06 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8002110:	2060      	movs	r0, #96	; 0x60
 8002112:	f7ff ff1f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff ff1c 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 800211c:	2004      	movs	r0, #4
 800211e:	f7ff ff19 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8002122:	20c3      	movs	r0, #195	; 0xc3
 8002124:	f7ff fefa 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8002128:	2013      	movs	r0, #19
 800212a:	f7ff ff13 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 800212e:	20c4      	movs	r0, #196	; 0xc4
 8002130:	f7ff fef4 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8002134:	2013      	movs	r0, #19
 8002136:	f7ff ff0d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 800213a:	20c9      	movs	r0, #201	; 0xc9
 800213c:	f7ff feee 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8002140:	2022      	movs	r0, #34	; 0x22
 8002142:	f7ff ff07 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8002146:	20be      	movs	r0, #190	; 0xbe
 8002148:	f7ff fee8 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 800214c:	2011      	movs	r0, #17
 800214e:	f7ff ff01 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8002152:	20e1      	movs	r0, #225	; 0xe1
 8002154:	f7ff fee2 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8002158:	2010      	movs	r0, #16
 800215a:	f7ff fefb 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 800215e:	200e      	movs	r0, #14
 8002160:	f7ff fef8 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8002164:	20df      	movs	r0, #223	; 0xdf
 8002166:	f7ff fed9 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800216a:	2021      	movs	r0, #33	; 0x21
 800216c:	f7ff fef2 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8002170:	200c      	movs	r0, #12
 8002172:	f7ff feef 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8002176:	2002      	movs	r0, #2
 8002178:	f7ff feec 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 800217c:	20f0      	movs	r0, #240	; 0xf0
 800217e:	f7ff fecd 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8002182:	2045      	movs	r0, #69	; 0x45
 8002184:	f7ff fee6 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8002188:	2009      	movs	r0, #9
 800218a:	f7ff fee3 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800218e:	2008      	movs	r0, #8
 8002190:	f7ff fee0 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8002194:	2008      	movs	r0, #8
 8002196:	f7ff fedd 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 800219a:	2026      	movs	r0, #38	; 0x26
 800219c:	f7ff feda 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80021a0:	202a      	movs	r0, #42	; 0x2a
 80021a2:	f7ff fed7 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80021a6:	20f1      	movs	r0, #241	; 0xf1
 80021a8:	f7ff feb8 	bl	8001f1c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80021ac:	2043      	movs	r0, #67	; 0x43
 80021ae:	f7ff fed1 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80021b2:	2070      	movs	r0, #112	; 0x70
 80021b4:	f7ff fece 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80021b8:	2072      	movs	r0, #114	; 0x72
 80021ba:	f7ff fecb 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80021be:	2036      	movs	r0, #54	; 0x36
 80021c0:	f7ff fec8 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 80021c4:	2037      	movs	r0, #55	; 0x37
 80021c6:	f7ff fec5 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80021ca:	206f      	movs	r0, #111	; 0x6f
 80021cc:	f7ff fec2 	bl	8001f54 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 80021d0:	20f2      	movs	r0, #242	; 0xf2
 80021d2:	f7ff fea3 	bl	8001f1c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 80021d6:	2045      	movs	r0, #69	; 0x45
 80021d8:	f7ff febc 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 80021dc:	2009      	movs	r0, #9
 80021de:	f7ff feb9 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80021e2:	2008      	movs	r0, #8
 80021e4:	f7ff feb6 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80021e8:	2008      	movs	r0, #8
 80021ea:	f7ff feb3 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 80021ee:	2026      	movs	r0, #38	; 0x26
 80021f0:	f7ff feb0 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80021f4:	202a      	movs	r0, #42	; 0x2a
 80021f6:	f7ff fead 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 80021fa:	20f3      	movs	r0, #243	; 0xf3
 80021fc:	f7ff fe8e 	bl	8001f1c <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8002200:	2043      	movs	r0, #67	; 0x43
 8002202:	f7ff fea7 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8002206:	2070      	movs	r0, #112	; 0x70
 8002208:	f7ff fea4 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 800220c:	2072      	movs	r0, #114	; 0x72
 800220e:	f7ff fea1 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8002212:	2036      	movs	r0, #54	; 0x36
 8002214:	f7ff fe9e 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8002218:	2037      	movs	r0, #55	; 0x37
 800221a:	f7ff fe9b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 800221e:	206f      	movs	r0, #111	; 0x6f
 8002220:	f7ff fe98 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8002224:	20ed      	movs	r0, #237	; 0xed
 8002226:	f7ff fe79 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 800222a:	201b      	movs	r0, #27
 800222c:	f7ff fe92 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8002230:	200b      	movs	r0, #11
 8002232:	f7ff fe8f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8002236:	20ae      	movs	r0, #174	; 0xae
 8002238:	f7ff fe70 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 800223c:	2077      	movs	r0, #119	; 0x77
 800223e:	f7ff fe89 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8002242:	20cd      	movs	r0, #205	; 0xcd
 8002244:	f7ff fe6a 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8002248:	2063      	movs	r0, #99	; 0x63
 800224a:	f7ff fe83 	bl	8001f54 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 800224e:	2070      	movs	r0, #112	; 0x70
 8002250:	f7ff fe64 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8002254:	2007      	movs	r0, #7
 8002256:	f7ff fe7d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800225a:	2007      	movs	r0, #7
 800225c:	f7ff fe7a 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8002260:	2004      	movs	r0, #4
 8002262:	f7ff fe77 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8002266:	200e      	movs	r0, #14
 8002268:	f7ff fe74 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 800226c:	200f      	movs	r0, #15
 800226e:	f7ff fe71 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8002272:	2009      	movs	r0, #9
 8002274:	f7ff fe6e 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8002278:	2007      	movs	r0, #7
 800227a:	f7ff fe6b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800227e:	2008      	movs	r0, #8
 8002280:	f7ff fe68 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8002284:	2003      	movs	r0, #3
 8002286:	f7ff fe65 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 800228a:	20e8      	movs	r0, #232	; 0xe8
 800228c:	f7ff fe46 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8002290:	2034      	movs	r0, #52	; 0x34
 8002292:	f7ff fe5f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8002296:	2062      	movs	r0, #98	; 0x62
 8002298:	f7ff fe40 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800229c:	2018      	movs	r0, #24
 800229e:	f7ff fe59 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80022a2:	200d      	movs	r0, #13
 80022a4:	f7ff fe56 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80022a8:	2071      	movs	r0, #113	; 0x71
 80022aa:	f7ff fe53 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80022ae:	20ed      	movs	r0, #237	; 0xed
 80022b0:	f7ff fe50 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80022b4:	2070      	movs	r0, #112	; 0x70
 80022b6:	f7ff fe4d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80022ba:	2070      	movs	r0, #112	; 0x70
 80022bc:	f7ff fe4a 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80022c0:	2018      	movs	r0, #24
 80022c2:	f7ff fe47 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80022c6:	200f      	movs	r0, #15
 80022c8:	f7ff fe44 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80022cc:	2071      	movs	r0, #113	; 0x71
 80022ce:	f7ff fe41 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 80022d2:	20ef      	movs	r0, #239	; 0xef
 80022d4:	f7ff fe3e 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80022d8:	2070      	movs	r0, #112	; 0x70
 80022da:	f7ff fe3b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80022de:	2070      	movs	r0, #112	; 0x70
 80022e0:	f7ff fe38 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 80022e4:	2063      	movs	r0, #99	; 0x63
 80022e6:	f7ff fe19 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80022ea:	2018      	movs	r0, #24
 80022ec:	f7ff fe32 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 80022f0:	2011      	movs	r0, #17
 80022f2:	f7ff fe2f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80022f6:	2071      	movs	r0, #113	; 0x71
 80022f8:	f7ff fe2c 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80022fc:	20f1      	movs	r0, #241	; 0xf1
 80022fe:	f7ff fe29 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8002302:	2070      	movs	r0, #112	; 0x70
 8002304:	f7ff fe26 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8002308:	2070      	movs	r0, #112	; 0x70
 800230a:	f7ff fe23 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 800230e:	2018      	movs	r0, #24
 8002310:	f7ff fe20 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8002314:	2013      	movs	r0, #19
 8002316:	f7ff fe1d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800231a:	2071      	movs	r0, #113	; 0x71
 800231c:	f7ff fe1a 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8002320:	20f3      	movs	r0, #243	; 0xf3
 8002322:	f7ff fe17 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8002326:	2070      	movs	r0, #112	; 0x70
 8002328:	f7ff fe14 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800232c:	2070      	movs	r0, #112	; 0x70
 800232e:	f7ff fe11 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8002332:	2064      	movs	r0, #100	; 0x64
 8002334:	f7ff fdf2 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8002338:	2028      	movs	r0, #40	; 0x28
 800233a:	f7ff fe0b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 800233e:	2029      	movs	r0, #41	; 0x29
 8002340:	f7ff fe08 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002344:	20f1      	movs	r0, #241	; 0xf1
 8002346:	f7ff fe05 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fe02 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8002350:	20f1      	movs	r0, #241	; 0xf1
 8002352:	f7ff fdff 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fdfc 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800235c:	2007      	movs	r0, #7
 800235e:	f7ff fdf9 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8002362:	2066      	movs	r0, #102	; 0x66
 8002364:	f7ff fdda 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8002368:	203c      	movs	r0, #60	; 0x3c
 800236a:	f7ff fdf3 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff fdf0 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8002374:	20cd      	movs	r0, #205	; 0xcd
 8002376:	f7ff fded 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800237a:	2067      	movs	r0, #103	; 0x67
 800237c:	f7ff fdea 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8002380:	2045      	movs	r0, #69	; 0x45
 8002382:	f7ff fde7 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8002386:	2045      	movs	r0, #69	; 0x45
 8002388:	f7ff fde4 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800238c:	2010      	movs	r0, #16
 800238e:	f7ff fde1 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fdde 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fddb 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fdd8 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80023a4:	2067      	movs	r0, #103	; 0x67
 80023a6:	f7ff fdb9 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff fdd2 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80023b0:	203c      	movs	r0, #60	; 0x3c
 80023b2:	f7ff fdcf 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fdcc 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fdc9 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fdc6 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fdc3 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 80023ce:	2054      	movs	r0, #84	; 0x54
 80023d0:	f7ff fdc0 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80023d4:	2010      	movs	r0, #16
 80023d6:	f7ff fdbd 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80023da:	2032      	movs	r0, #50	; 0x32
 80023dc:	f7ff fdba 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 80023e0:	2098      	movs	r0, #152	; 0x98
 80023e2:	f7ff fdb7 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 80023e6:	2074      	movs	r0, #116	; 0x74
 80023e8:	f7ff fd98 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 80023ec:	2010      	movs	r0, #16
 80023ee:	f7ff fdb1 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 80023f2:	2085      	movs	r0, #133	; 0x85
 80023f4:	f7ff fdae 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 80023f8:	2080      	movs	r0, #128	; 0x80
 80023fa:	f7ff fdab 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80023fe:	2000      	movs	r0, #0
 8002400:	f7ff fda8 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fda5 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800240a:	204e      	movs	r0, #78	; 0x4e
 800240c:	f7ff fda2 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fd9f 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	
  LCD_1IN28_SendCommand(0x98);			
 8002416:	2098      	movs	r0, #152	; 0x98
 8002418:	f7ff fd80 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 800241c:	203e      	movs	r0, #62	; 0x3e
 800241e:	f7ff fd99 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8002422:	2007      	movs	r0, #7
 8002424:	f7ff fd96 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8002428:	2035      	movs	r0, #53	; 0x35
 800242a:	f7ff fd77 	bl	8001f1c <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 800242e:	2021      	movs	r0, #33	; 0x21
 8002430:	f7ff fd74 	bl	8001f1c <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8002434:	2011      	movs	r0, #17
 8002436:	f7ff fd71 	bl	8001f1c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(120);
 800243a:	2078      	movs	r0, #120	; 0x78
 800243c:	f000 f952 	bl	80026e4 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8002440:	2029      	movs	r0, #41	; 0x29
 8002442:	f7ff fd6b 	bl	8001f1c <LCD_1IN28_SendCommand>
	DEV_Delay_ms(20);
 8002446:	2014      	movs	r0, #20
 8002448:	f000 f94c 	bl	80026e4 <HAL_Delay>
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <LCD_1IN28_SetAttributes+0x54>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8002460:	2308      	movs	r3, #8
 8002462:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <LCD_1IN28_SetAttributes+0x54>)
 800246c:	22f0      	movs	r2, #240	; 0xf0
 800246e:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <LCD_1IN28_SetAttributes+0x54>)
 8002472:	22f0      	movs	r2, #240	; 0xf0
 8002474:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8002476:	23c8      	movs	r3, #200	; 0xc8
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e007      	b.n	800248c <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <LCD_1IN28_SetAttributes+0x54>)
 800247e:	22f0      	movs	r2, #240	; 0xf0
 8002480:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LCD_1IN28_SetAttributes+0x54>)
 8002484:	22f0      	movs	r2, #240	; 0xf0
 8002486:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8002488:	2368      	movs	r3, #104	; 0x68
 800248a:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 800248c:	2036      	movs	r0, #54	; 0x36
 800248e:	f7ff fd45 	bl	8001f1c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd5d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200001c8 	.word	0x200001c8

080024a8 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80024b2:	f7ff fd11 	bl	8001ed8 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffc9 	bl	8002450 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80024be:	f7ff fd95 	bl	8001fec <LCD_1IN28_InitReg>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4604      	mov	r4, r0
 80024d2:	4608      	mov	r0, r1
 80024d4:	4611      	mov	r1, r2
 80024d6:	461a      	mov	r2, r3
 80024d8:	4623      	mov	r3, r4
 80024da:	80fb      	strh	r3, [r7, #6]
 80024dc:	4603      	mov	r3, r0
 80024de:	80bb      	strh	r3, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 80024e8:	202a      	movs	r0, #42	; 0x2a
 80024ea:	f7ff fd17 	bl	8001f1c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff fd30 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fd2b 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fd28 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fd23 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 800250e:	202b      	movs	r0, #43	; 0x2b
 8002510:	f7ff fd04 	bl	8001f1c <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff fd1d 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(Ystart);
 800251a:	88bb      	ldrh	r3, [r7, #4]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fd18 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
	  LCD_1IN28_SendData_8Bit(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff fd15 	bl	8001f54 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 800252a:	883b      	ldrh	r3, [r7, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fd10 	bl	8001f54 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8002534:	202c      	movs	r0, #44	; 0x2c
 8002536:	f7ff fcf1 	bl	8001f1c <LCD_1IN28_SendCommand>
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
	...

08002544 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 800254e:	23ef      	movs	r3, #239	; 0xef
 8002550:	22ef      	movs	r2, #239	; 0xef
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff ffb8 	bl	80024ca <LCD_1IN28_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002560:	4812      	ldr	r0, [pc, #72]	; (80025ac <LCD_1IN28_Clear+0x68>)
 8002562:	f000 fb5d 	bl	8002c20 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8002566:	2300      	movs	r3, #0
 8002568:	81fb      	strh	r3, [r7, #14]
 800256a:	e017      	b.n	800259c <LCD_1IN28_Clear+0x58>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800256c:	2300      	movs	r3, #0
 800256e:	81bb      	strh	r3, [r7, #12]
 8002570:	e00e      	b.n	8002590 <LCD_1IN28_Clear+0x4c>
			DEV_SPI_WRITE(Color>>8);
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fd6e 	bl	800105c <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fd69 	bl	800105c <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800258a:	89bb      	ldrh	r3, [r7, #12]
 800258c:	3301      	adds	r3, #1
 800258e:	81bb      	strh	r3, [r7, #12]
 8002590:	89bb      	ldrh	r3, [r7, #12]
 8002592:	2bef      	cmp	r3, #239	; 0xef
 8002594:	d9ed      	bls.n	8002572 <LCD_1IN28_Clear+0x2e>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	3301      	adds	r3, #1
 800259a:	81fb      	strh	r3, [r7, #14]
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	2bef      	cmp	r3, #239	; 0xef
 80025a0:	d9e4      	bls.n	800256c <LCD_1IN28_Clear+0x28>
		}
	 }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40020000 	.word	0x40020000

080025b0 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	460b      	mov	r3, r1
 80025bc:	80bb      	strh	r3, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	88b9      	ldrh	r1, [r7, #4]
 80025c8:	88f8      	ldrh	r0, [r7, #6]
 80025ca:	f7ff ff7e 	bl	80024ca <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fce1 	bl	8001f98 <LCD_1IN28_SendData_16Bit>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <LCD_1IN28_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN28_SetBackLight(UWORD Value)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <LCD_1IN28_SetBackLight+0x1c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40000400 	.word	0x40000400

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f931 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	2000      	movs	r0, #0
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7fe fab8 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f93b 	bl	80028de <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f911 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000000 	.word	0x20000000
 800269c:	2000001c 	.word	0x2000001c
 80026a0:	20000018 	.word	0x20000018

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000001c 	.word	0x2000001c
 80026c8:	200001d0 	.word	0x200001d0

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200001d0 	.word	0x200001d0

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000001c 	.word	0x2000001c

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff47 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff5c 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff8e 	bl	80027e4 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5d 	bl	8002790 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff ffb0 	bl	800284c <SysTick_Config>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e165      	b.n	8002be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8154 	bne.w	8002bda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80ae 	beq.w	8002bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a5c      	ldr	r2, [pc, #368]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <HAL_GPIO_Init+0x300>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_GPIO_Init+0x308>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d025      	beq.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_GPIO_Init+0x30c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <HAL_GPIO_Init+0x216>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_GPIO_Init+0x310>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x212>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_GPIO_Init+0x314>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x20e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_GPIO_Init+0x318>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x20a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <HAL_GPIO_Init+0x31c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x206>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a49      	ldr	r2, [pc, #292]	; (8002c18 <HAL_GPIO_Init+0x320>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x202>
 8002af6:	2306      	movs	r3, #6
 8002af8:	e00c      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e00a      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002afe:	2305      	movs	r3, #5
 8002b00:	e008      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e004      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_GPIO_Init+0x21c>
 8002b12:	2300      	movs	r3, #0
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f002 0203 	and.w	r2, r2, #3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4093      	lsls	r3, r2
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b24:	4935      	ldr	r1, [pc, #212]	; (8002bfc <HAL_GPIO_Init+0x304>)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	f67f ae96 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40013800 	.word	0x40013800
 8002c00:	40020000 	.word	0x40020000
 8002c04:	40020400 	.word	0x40020400
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	40020c00 	.word	0x40020c00
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40021400 	.word	0x40021400
 8002c18:	40021800 	.word	0x40021800
 8002c1c:	40013c00 	.word	0x40013c00

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c3c:	e003      	b.n	8002c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	041a      	lsls	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	619a      	str	r2, [r3, #24]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cc      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d90c      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e067      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7ff fcc2 	bl	80026cc <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7ff fcbe 	bl	80026cc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e04f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d20c      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 fb7f 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fc22 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08006d58 	.word	0x08006d58
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000018 	.word	0x20000018

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08006d68 	.word	0x08006d68

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffdc 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08006d68 	.word	0x08006d68

08002e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	496c      	ldr	r1, [pc, #432]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	4960      	ldr	r1, [pc, #384]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4955      	ldr	r1, [pc, #340]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f58:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4946      	ldr	r1, [pc, #280]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f76:	d101      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002f84:	2301      	movs	r3, #1
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 808a 	beq.w	80030aa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a38      	ldr	r2, [pc, #224]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fbe:	f7ff fb85 	bl	80026cc <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7ff fb81 	bl	80026cc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e278      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d028      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d114      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800302a:	f7ff fb4f 	bl	80026cc <HAL_GetTick>
 800302e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003032:	f7ff fb4b 	bl	80026cc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003040:	4293      	cmp	r3, r2
 8003042:	d901      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e240      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ee      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003060:	d114      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003076:	4902      	ldr	r1, [pc, #8]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
 800307c:	e00c      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	42470e40 	.word	0x42470e40
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003092:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003096:	6093      	str	r3, [r2, #8]
 8003098:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800309a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	4944      	ldr	r1, [pc, #272]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d004      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80030bc:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80030be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	492e      	ldr	r1, [pc, #184]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	4926      	ldr	r1, [pc, #152]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312e:	d101      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003130:	2301      	movs	r3, #1
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	491a      	ldr	r1, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003168:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	4911      	ldr	r1, [pc, #68]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003180:	d101      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d005      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003194:	f040 80ff 	bne.w	8003396 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800319e:	f7ff fa95 	bl	80026cc <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a4:	e00e      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031a6:	f7ff fa91 	bl	80026cc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d907      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e188      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	424711e0 	.word	0x424711e0
 80031c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031c4:	4b7e      	ldr	r3, [pc, #504]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ea      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d028      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d124      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031f8:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	3301      	adds	r3, #1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800320a:	4b6d      	ldr	r3, [pc, #436]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800320c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003210:	0e1b      	lsrs	r3, r3, #24
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	3b01      	subs	r3, #1
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	4961      	ldr	r1, [pc, #388]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003260:	2b00      	cmp	r3, #0
 8003262:	d035      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326c:	d130      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003286:	0f1b      	lsrs	r3, r3, #28
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	019b      	lsls	r3, r3, #6
 8003298:	431a      	orrs	r2, r3
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	431a      	orrs	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	071b      	lsls	r3, r3, #28
 80032b0:	4943      	ldr	r1, [pc, #268]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032be:	f023 021f 	bic.w	r2, r3, #31
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	493d      	ldr	r1, [pc, #244]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d029      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e4:	d124      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	019b      	lsls	r3, r3, #6
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	431a      	orrs	r2, r3
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	431a      	orrs	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	071b      	lsls	r3, r3, #28
 8003328:	4925      	ldr	r1, [pc, #148]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	3b01      	subs	r3, #1
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4917      	ldr	r1, [pc, #92]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003370:	f7ff f9ac 	bl	80026cc <HAL_GetTick>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003378:	f7ff f9a8 	bl	80026cc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e09f      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	f040 8095 	bne.w	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033a4:	f7ff f992 	bl	80026cc <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033aa:	e00f      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033ac:	f7ff f98e 	bl	80026cc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d908      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e085      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	42470068 	.word	0x42470068
 80033c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d8:	d0e8      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02b      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d127      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	431a      	orrs	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	3b01      	subs	r3, #1
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	4928      	ldr	r1, [pc, #160]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800343a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	3b01      	subs	r3, #1
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	4922      	ldr	r1, [pc, #136]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003466:	d118      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	019b      	lsls	r3, r3, #6
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	3b01      	subs	r3, #1
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	4910      	ldr	r1, [pc, #64]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034a0:	f7ff f914 	bl	80026cc <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80034a8:	f7ff f910 	bl	80026cc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e007      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c6:	d1ef      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	42470070 	.word	0x42470070

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b0ae      	sub	sp, #184	; 0xb8
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003502:	4bcb      	ldr	r3, [pc, #812]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b0c      	cmp	r3, #12
 800350c:	f200 8206 	bhi.w	800391c <HAL_RCC_GetSysClockFreq+0x440>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800391d 	.word	0x0800391d
 8003520:	0800391d 	.word	0x0800391d
 8003524:	0800391d 	.word	0x0800391d
 8003528:	08003555 	.word	0x08003555
 800352c:	0800391d 	.word	0x0800391d
 8003530:	0800391d 	.word	0x0800391d
 8003534:	0800391d 	.word	0x0800391d
 8003538:	0800355d 	.word	0x0800355d
 800353c:	0800391d 	.word	0x0800391d
 8003540:	0800391d 	.word	0x0800391d
 8003544:	0800391d 	.word	0x0800391d
 8003548:	0800374d 	.word	0x0800374d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4bb9      	ldr	r3, [pc, #740]	; (8003834 <HAL_RCC_GetSysClockFreq+0x358>)
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003552:	e1e7      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003554:	4bb8      	ldr	r3, [pc, #736]	; (8003838 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800355a:	e1e3      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4bb4      	ldr	r3, [pc, #720]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003568:	4bb1      	ldr	r3, [pc, #708]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d071      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003574:	4bae      	ldr	r3, [pc, #696]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	099b      	lsrs	r3, r3, #6
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003580:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4621      	mov	r1, r4
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	6439      	str	r1, [r7, #64]	; 0x40
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035cc:	4649      	mov	r1, r9
 80035ce:	018b      	lsls	r3, r1, #6
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d6:	4641      	mov	r1, r8
 80035d8:	018a      	lsls	r2, r1, #6
 80035da:	4641      	mov	r1, r8
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	63b9      	str	r1, [r7, #56]	; 0x38
 80035e0:	4649      	mov	r1, r9
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80035f4:	4649      	mov	r1, r9
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4641      	mov	r1, r8
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4622      	mov	r2, r4
 800360a:	189b      	adds	r3, r3, r2
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
 800360e:	462b      	mov	r3, r5
 8003610:	460a      	mov	r2, r1
 8003612:	eb42 0303 	adc.w	r3, r2, r3
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003624:	4629      	mov	r1, r5
 8003626:	024b      	lsls	r3, r1, #9
 8003628:	4621      	mov	r1, r4
 800362a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800362e:	4621      	mov	r1, r4
 8003630:	024a      	lsls	r2, r1, #9
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003640:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003644:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003648:	f7fc fe32 	bl	80002b0 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003656:	e067      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003658:	4b75      	ldr	r3, [pc, #468]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003664:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	67bb      	str	r3, [r7, #120]	; 0x78
 8003672:	2300      	movs	r3, #0
 8003674:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003676:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4621      	mov	r1, r4
 8003694:	1a51      	subs	r1, r2, r1
 8003696:	62b9      	str	r1, [r7, #40]	; 0x28
 8003698:	4629      	mov	r1, r5
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80036ac:	4649      	mov	r1, r9
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	4641      	mov	r1, r8
 80036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b6:	4641      	mov	r1, r8
 80036b8:	018a      	lsls	r2, r1, #6
 80036ba:	4641      	mov	r1, r8
 80036bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c0:	4649      	mov	r1, r9
 80036c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036da:	4692      	mov	sl, r2
 80036dc:	469b      	mov	fp, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	eb1a 0303 	adds.w	r3, sl, r3
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	462b      	mov	r3, r5
 80036e8:	eb4b 0303 	adc.w	r3, fp, r3
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003704:	4621      	mov	r1, r4
 8003706:	028a      	lsls	r2, r1, #10
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003710:	2200      	movs	r2, #0
 8003712:	673b      	str	r3, [r7, #112]	; 0x70
 8003714:	677a      	str	r2, [r7, #116]	; 0x74
 8003716:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800371a:	f7fc fdc9 	bl	80002b0 <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4613      	mov	r3, r2
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003728:	4b41      	ldr	r3, [pc, #260]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800373a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800373e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800374a:	e0eb      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003758:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d06b      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	2200      	movs	r2, #0
 800376c:	66bb      	str	r3, [r7, #104]	; 0x68
 800376e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	663b      	str	r3, [r7, #96]	; 0x60
 8003778:	2300      	movs	r3, #0
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
 800377c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	0159      	lsls	r1, r3, #5
 800378e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003792:	0150      	lsls	r0, r2, #5
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4621      	mov	r1, r4
 800379a:	1a51      	subs	r1, r2, r1
 800379c:	61b9      	str	r1, [r7, #24]
 800379e:	4629      	mov	r1, r5
 80037a0:	eb63 0301 	sbc.w	r3, r3, r1
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037b2:	4659      	mov	r1, fp
 80037b4:	018b      	lsls	r3, r1, #6
 80037b6:	4651      	mov	r1, sl
 80037b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037bc:	4651      	mov	r1, sl
 80037be:	018a      	lsls	r2, r1, #6
 80037c0:	4651      	mov	r1, sl
 80037c2:	ebb2 0801 	subs.w	r8, r2, r1
 80037c6:	4659      	mov	r1, fp
 80037c8:	eb63 0901 	sbc.w	r9, r3, r1
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037e0:	4690      	mov	r8, r2
 80037e2:	4699      	mov	r9, r3
 80037e4:	4623      	mov	r3, r4
 80037e6:	eb18 0303 	adds.w	r3, r8, r3
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	462b      	mov	r3, r5
 80037ee:	eb49 0303 	adc.w	r3, r9, r3
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003800:	4629      	mov	r1, r5
 8003802:	024b      	lsls	r3, r1, #9
 8003804:	4621      	mov	r1, r4
 8003806:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800380a:	4621      	mov	r1, r4
 800380c:	024a      	lsls	r2, r1, #9
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003816:	2200      	movs	r2, #0
 8003818:	65bb      	str	r3, [r7, #88]	; 0x58
 800381a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800381c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003820:	f7fc fd46 	bl	80002b0 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800382e:	e065      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x420>
 8003830:	40023800 	.word	0x40023800
 8003834:	00f42400 	.word	0x00f42400
 8003838:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_GetSysClockFreq+0x458>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	2200      	movs	r2, #0
 8003844:	4618      	mov	r0, r3
 8003846:	4611      	mov	r1, r2
 8003848:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
 800384e:	2300      	movs	r3, #0
 8003850:	657b      	str	r3, [r7, #84]	; 0x54
 8003852:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	0159      	lsls	r1, r3, #5
 8003864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003868:	0150      	lsls	r0, r2, #5
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4641      	mov	r1, r8
 8003870:	1a51      	subs	r1, r2, r1
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4649      	mov	r1, r9
 8003876:	eb63 0301 	sbc.w	r3, r3, r1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003888:	4659      	mov	r1, fp
 800388a:	018b      	lsls	r3, r1, #6
 800388c:	4651      	mov	r1, sl
 800388e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003892:	4651      	mov	r1, sl
 8003894:	018a      	lsls	r2, r1, #6
 8003896:	4651      	mov	r1, sl
 8003898:	1a54      	subs	r4, r2, r1
 800389a:	4659      	mov	r1, fp
 800389c:	eb63 0501 	sbc.w	r5, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	00eb      	lsls	r3, r5, #3
 80038aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4643      	mov	r3, r8
 80038b6:	18e3      	adds	r3, r4, r3
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	464b      	mov	r3, r9
 80038bc:	eb45 0303 	adc.w	r3, r5, r3
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e4:	2200      	movs	r2, #0
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038ee:	f7fc fcdf 	bl	80002b0 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4613      	mov	r3, r2
 80038f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCC_GetSysClockFreq+0x458>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0f1b      	lsrs	r3, r3, #28
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800390a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800390e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800391a:	e003      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0x45c>)
 800391e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003922:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003928:	4618      	mov	r0, r3
 800392a:	37b8      	adds	r7, #184	; 0xb8
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400

0800393c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e28d      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8083 	beq.w	8003a62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800395c:	4b94      	ldr	r3, [pc, #592]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b04      	cmp	r3, #4
 8003966:	d019      	beq.n	800399c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003968:	4b91      	ldr	r3, [pc, #580]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003970:	2b08      	cmp	r3, #8
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003974:	4b8e      	ldr	r3, [pc, #568]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003980:	d00c      	beq.n	800399c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d112      	bne.n	80039b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d10b      	bne.n	80039b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	4b84      	ldr	r3, [pc, #528]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d05b      	beq.n	8003a60 <HAL_RCC_OscConfig+0x124>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d157      	bne.n	8003a60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e25a      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x90>
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7b      	ldr	r2, [pc, #492]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e01d      	b.n	8003a08 <HAL_RCC_OscConfig+0xcc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0xb4>
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b73      	ldr	r3, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a72      	ldr	r2, [pc, #456]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0xcc>
 80039f0:	4b6f      	ldr	r3, [pc, #444]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6b      	ldr	r2, [pc, #428]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe fe5c 	bl	80026cc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fe58 	bl	80026cc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e21f      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0xdc>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe fe48 	bl	80026cc <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fe44 	bl	80026cc <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e20b      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x104>
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d06f      	beq.n	8003b4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a6e:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d017      	beq.n	8003aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x186>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1d3      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e03a      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fdf1 	bl	80026cc <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fe fded 	bl	80026cc <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1b4      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fdd0 	bl	80026cc <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe fdcc 	bl	80026cc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e193      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d036      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fe fdb0 	bl	80026cc <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fe fdac 	bl	80026cc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e173      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x234>
 8003b8e:	e01b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fe fd99 	bl	80026cc <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	e00e      	b.n	8003bbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe fd95 	bl	80026cc <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d907      	bls.n	8003bbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e15c      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470000 	.word	0x42470000
 8003bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	4b8a      	ldr	r3, [pc, #552]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ea      	bne.n	8003b9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8097 	beq.w	8003d04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b83      	ldr	r3, [pc, #524]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a7e      	ldr	r2, [pc, #504]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fd55 	bl	80026cc <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe fd51 	bl	80026cc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e118      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x4b0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x31e>
 8003c4c:	4b66      	ldr	r3, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e01c      	b.n	8003c94 <HAL_RCC_OscConfig+0x358>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x340>
 8003c62:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0x358>
 8003c7c:	4b5a      	ldr	r3, [pc, #360]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a59      	ldr	r2, [pc, #356]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	f023 0304 	bic.w	r3, r3, #4
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fd16 	bl	80026cc <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fd12 	bl	80026cc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0d7      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x368>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fd00 	bl	80026cc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fcfc 	bl	80026cc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0c1      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80ad 	beq.w	8003e68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d060      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d145      	bne.n	8003dae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe fcd0 	bl	80026cc <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fccc 	bl	80026cc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e093      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	3b01      	subs	r3, #1
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fe fca1 	bl	80026cc <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fe fc9d 	bl	80026cc <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e064      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x452>
 8003dac:	e05c      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x4b4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe fc8a 	bl	80026cc <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe fc86 	bl	80026cc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e04d      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x480>
 8003dda:	e045      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e040      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <HAL_RCC_OscConfig+0x538>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d030      	beq.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d129      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d119      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10f      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800

08003e78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e066      	b.n	8003f5c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7f5b      	ldrb	r3, [r3, #29]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc fdda 	bl	8000a58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	22ca      	movs	r2, #202	; 0xca
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2253      	movs	r2, #83	; 0x53
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f998 	bl	80041f0 <RTC_EnterInitMode>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12c      	bne.n	8003f24 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003edc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	68d2      	ldr	r2, [r2, #12]
 8003f04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6919      	ldr	r1, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	041a      	lsls	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f99f 	bl	800425e <RTC_ExitInitMode>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	7f1b      	ldrb	r3, [r3, #28]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_RTC_SetTime+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e087      	b.n	8004090 <HAL_RTC_SetTime+0x12c>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d126      	bne.n	8003fe0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f97c 	bl	80042a8 <RTC_ByteToBcd2>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	785b      	ldrb	r3, [r3, #1]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f975 	bl	80042a8 <RTC_ByteToBcd2>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fc2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	789b      	ldrb	r3, [r3, #2]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f96d 	bl	80042a8 <RTC_ByteToBcd2>
 8003fce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fd0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	78db      	ldrb	r3, [r3, #3]
 8003fd8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e018      	b.n	8004012 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004000:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004006:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	78db      	ldrb	r3, [r3, #3]
 800400c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	22ca      	movs	r2, #202	; 0xca
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2253      	movs	r2, #83	; 0x53
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8e4 	bl	80041f0 <RTC_EnterInitMode>
 8004028:	4603      	mov	r3, r0
 800402a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d120      	bne.n	8004074 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800403c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004050:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8f7 	bl	800425e <RTC_ExitInitMode>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	771a      	strb	r2, [r3, #28]

  return status;
 800408e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	7f1b      	ldrb	r3, [r3, #28]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_RTC_SetDate+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e071      	b.n	8004198 <HAL_RTC_SetDate+0x100>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2202      	movs	r2, #2
 80040be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <HAL_RTC_SetDate+0x4c>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	330a      	adds	r3, #10
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11c      	bne.n	8004124 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	78db      	ldrb	r3, [r3, #3]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f8da 	bl	80042a8 <RTC_ByteToBcd2>
 80040f4:	4603      	mov	r3, r0
 80040f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8d3 	bl	80042a8 <RTC_ByteToBcd2>
 8004102:	4603      	mov	r3, r0
 8004104:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004106:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	789b      	ldrb	r3, [r3, #2]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f8cb 	bl	80042a8 <RTC_ByteToBcd2>
 8004112:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004114:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e00e      	b.n	8004142 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004130:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004136:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	22ca      	movs	r2, #202	; 0xca
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2253      	movs	r2, #83	; 0x53
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f84c 	bl	80041f0 <RTC_EnterInitMode>
 8004158:	4603      	mov	r3, r0
 800415a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800416c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004170:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f873 	bl	800425e <RTC_ExitInitMode>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	771a      	strb	r2, [r3, #28]

  return status;
 8004196:	7cfb      	ldrb	r3, [r7, #19]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7fe fa86 	bl	80026cc <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041c2:	e009      	b.n	80041d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041c4:	f7fe fa82 	bl	80026cc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	d901      	bls.n	80041d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e007      	b.n	80041e8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d122      	bne.n	8004254 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800421c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421e:	f7fe fa55 	bl	80026cc <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004224:	e00c      	b.n	8004240 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004226:	f7fe fa51 	bl	80026cc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004234:	d904      	bls.n	8004240 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2204      	movs	r2, #4
 800423a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <RTC_EnterInitMode+0x64>
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d1e8      	bne.n	8004226 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004278:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff89 	bl	80041a0 <HAL_RTC_WaitForSynchro>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80042b6:	e005      	b.n	80042c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	3301      	adds	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	3b0a      	subs	r3, #10
 80042c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	d8f6      	bhi.n	80042b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	b2db      	uxtb	r3, r3
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e07b      	b.n	80043ec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d108      	bne.n	800430e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004304:	d009      	beq.n	800431a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	61da      	str	r2, [r3, #28]
 800430c:	e005      	b.n	800431a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fc fbef 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	ea42 0103 	orr.w	r1, r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	0c1b      	lsrs	r3, r3, #16
 80043b8:	f003 0104 	and.w	r1, r3, #4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0210 	and.w	r2, r3, #16
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_SPI_Transmit+0x22>
 8004412:	2302      	movs	r3, #2
 8004414:	e126      	b.n	8004664 <HAL_SPI_Transmit+0x270>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441e:	f7fe f955 	bl	80026cc <HAL_GetTick>
 8004422:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004438:	e10b      	b.n	8004652 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SPI_Transmit+0x52>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800444a:	e102      	b.n	8004652 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2203      	movs	r2, #3
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004492:	d10f      	bne.n	80044b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d007      	beq.n	80044d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044da:	d14b      	bne.n	8004574 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_Transmit+0xf6>
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d13e      	bne.n	8004568 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800450e:	e02b      	b.n	8004568 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d112      	bne.n	8004544 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	881a      	ldrh	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	86da      	strh	r2, [r3, #54]	; 0x36
 8004542:	e011      	b.n	8004568 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004544:	f7fe f8c2 	bl	80026cc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d803      	bhi.n	800455c <HAL_SPI_Transmit+0x168>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Transmit+0x16e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004566:	e074      	b.n	8004652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ce      	bne.n	8004510 <HAL_SPI_Transmit+0x11c>
 8004572:	e04c      	b.n	800460e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_SPI_Transmit+0x18e>
 800457c:	8afb      	ldrh	r3, [r7, #22]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d140      	bne.n	8004604 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	7812      	ldrb	r2, [r2, #0]
 800458e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045a8:	e02c      	b.n	8004604 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d113      	bne.n	80045e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80045de:	e011      	b.n	8004604 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e0:	f7fe f874 	bl	80026cc <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d803      	bhi.n	80045f8 <HAL_SPI_Transmit+0x204>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_Transmit+0x20a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004602:	e026      	b.n	8004652 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1cd      	bne.n	80045aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	6839      	ldr	r1, [r7, #0]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8b2 	bl	800477c <SPI_EndRxTxTransaction>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e000      	b.n	8004652 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004650:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004662:	7ffb      	ldrb	r3, [r7, #31]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800467c:	f7fe f826 	bl	80026cc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800468c:	f7fe f81e 	bl	80026cc <HAL_GetTick>
 8004690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	015b      	lsls	r3, r3, #5
 8004698:	0d1b      	lsrs	r3, r3, #20
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a2:	e054      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d050      	beq.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ac:	f7fe f80e 	bl	80026cc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d902      	bls.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d13d      	bne.n	800473e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046da:	d111      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	d004      	beq.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ee:	d107      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d10f      	bne.n	800472a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e017      	b.n	800476e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3b01      	subs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d19b      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000000 	.word	0x20000000

0800477c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <SPI_EndRxTxTransaction+0x7c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <SPI_EndRxTxTransaction+0x80>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	0d5b      	lsrs	r3, r3, #21
 8004794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d112      	bne.n	80047ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f7ff ff5a 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f043 0220 	orr.w	r2, r3, #32
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e00f      	b.n	80047ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b80      	cmp	r3, #128	; 0x80
 80047e6:	d0f2      	beq.n	80047ce <SPI_EndRxTxTransaction+0x52>
 80047e8:	e000      	b.n	80047ec <SPI_EndRxTxTransaction+0x70>
        break;
 80047ea:	bf00      	nop
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000000 	.word	0x20000000
 80047fc:	165e9f81 	.word	0x165e9f81

08004800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fb20 	bl	8000e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 f9b8 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_TIM_PWM_Start+0x24>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e022      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d109      	bne.n	80048de <HAL_TIM_PWM_Start+0x3e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	e015      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d109      	bne.n	80048f8 <HAL_TIM_PWM_Start+0x58>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e008      	b.n	800490a <HAL_TIM_PWM_Start+0x6a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07c      	b.n	8004a0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start+0x82>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	e013      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0x92>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	e00b      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	e003      	b.n	800494a <HAL_TIM_PWM_Start+0xaa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fb7e 	bl	8005054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <HAL_TIM_PWM_Start+0x174>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIM_PWM_Start+0xcc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <HAL_TIM_PWM_Start+0x178>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_TIM_PWM_Start+0xd0>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_TIM_PWM_Start+0xd2>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <HAL_TIM_PWM_Start+0x174>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004998:	d01d      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <HAL_TIM_PWM_Start+0x17c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_TIM_PWM_Start+0x180>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <HAL_TIM_PWM_Start+0x184>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_TIM_PWM_Start+0x178>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_TIM_PWM_Start+0x188>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIM_PWM_Start+0x136>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <HAL_TIM_PWM_Start+0x18c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d010      	beq.n	8004a0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	e007      	b.n	8004a0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0201 	orr.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40010400 	.word	0x40010400
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40001800 	.word	0x40001800

08004a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0ae      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	f200 809f 	bhi.w	8004b9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004b9d 	.word	0x08004b9d
 8004a6c:	08004b9d 	.word	0x08004b9d
 8004a70:	08004b9d 	.word	0x08004b9d
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004b9d 	.word	0x08004b9d
 8004a7c:	08004b9d 	.word	0x08004b9d
 8004a80:	08004b9d 	.word	0x08004b9d
 8004a84:	08004b1b 	.word	0x08004b1b
 8004a88:	08004b9d 	.word	0x08004b9d
 8004a8c:	08004b9d 	.word	0x08004b9d
 8004a90:	08004b9d 	.word	0x08004b9d
 8004a94:	08004b5b 	.word	0x08004b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f928 	bl	8004cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6999      	ldr	r1, [r3, #24]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	619a      	str	r2, [r3, #24]
      break;
 8004ad6:	e064      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f978 	bl	8004dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	619a      	str	r2, [r3, #24]
      break;
 8004b18:	e043      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f9cd 	bl	8004ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0208 	orr.w	r2, r2, #8
 8004b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0204 	bic.w	r2, r2, #4
 8004b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69d9      	ldr	r1, [r3, #28]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	61da      	str	r2, [r3, #28]
      break;
 8004b58:	e023      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa21 	bl	8004fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	021a      	lsls	r2, r3, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	61da      	str	r2, [r3, #28]
      break;
 8004b9a:	e002      	b.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d00f      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <TIM_Base_SetConfig+0x120>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3a      	ldr	r2, [pc, #232]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d027      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d023      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01f      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <TIM_Base_SetConfig+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d017      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_Base_SetConfig+0x128>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <TIM_Base_SetConfig+0x12c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <TIM_Base_SetConfig+0x130>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <TIM_Base_SetConfig+0x134>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a24      	ldr	r2, [pc, #144]	; (8004cec <TIM_Base_SetConfig+0x138>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <TIM_Base_SetConfig+0x13c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0xf8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d103      	bne.n	8004cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	40001800 	.word	0x40001800
 8004cec:	40001c00 	.word	0x40001c00
 8004cf0:	40002000 	.word	0x40002000

08004cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0302 	bic.w	r3, r3, #2
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC1_SetConfig+0x64>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10c      	bne.n	8004d72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0308 	bic.w	r3, r3, #8
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 0304 	bic.w	r3, r3, #4
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC1_SetConfig+0x8e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0210 	bic.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC2_SetConfig+0x68>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10d      	bne.n	8004e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x94>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x66>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x92>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <TIM_OC4_SetConfig+0xa4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC4_SetConfig+0x68>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a11      	ldr	r2, [pc, #68]	; (8005050 <TIM_OC4_SetConfig+0xa8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d109      	bne.n	8005024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e05a      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e03f      	b.n	800522a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb feda 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f929 	bl	8005434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b08a      	sub	sp, #40	; 0x28
 8005236:	af02      	add	r7, sp, #8
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b20      	cmp	r3, #32
 8005250:	d17c      	bne.n	800534c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_UART_Transmit+0x2c>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e075      	b.n	800534e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UART_Transmit+0x3e>
 800526c:	2302      	movs	r3, #2
 800526e:	e06e      	b.n	800534e <HAL_UART_Transmit+0x11c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2221      	movs	r2, #33	; 0x21
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005286:	f7fd fa21 	bl	80026cc <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a0:	d108      	bne.n	80052b4 <HAL_UART_Transmit+0x82>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	e003      	b.n	80052bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052c4:	e02a      	b.n	800531c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2180      	movs	r1, #128	; 0x80
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f840 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e036      	b.n	800534e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	3302      	adds	r3, #2
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e007      	b.n	800530e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	781a      	ldrb	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3301      	adds	r3, #1
 800530c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1cf      	bne.n	80052c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	2140      	movs	r1, #64	; 0x40
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f810 	bl	8005356 <UART_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b090      	sub	sp, #64	; 0x40
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005366:	e050      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d04c      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0x30>
 8005376:	f7fd f9a9 	bl	80026cc <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005382:	429a      	cmp	r2, r3
 8005384:	d241      	bcs.n	800540a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053a6:	637a      	str	r2, [r7, #52]	; 0x34
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e5      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053da:	623a      	str	r2, [r7, #32]
 80053dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69f9      	ldr	r1, [r7, #28]
 80053e0:	6a3a      	ldr	r2, [r7, #32]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e5      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e00f      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	429a      	cmp	r2, r3
 8005426:	d09f      	beq.n	8005368 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3740      	adds	r7, #64	; 0x40
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005438:	b0c0      	sub	sp, #256	; 0x100
 800543a:	af00      	add	r7, sp, #0
 800543c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	ea40 0301 	orr.w	r3, r0, r1
 800545c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	431a      	orrs	r2, r3
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800548c:	f021 010c 	bic.w	r1, r1, #12
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800549a:	430b      	orrs	r3, r1
 800549c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	6999      	ldr	r1, [r3, #24]
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	ea40 0301 	orr.w	r3, r0, r1
 80054ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b8f      	ldr	r3, [pc, #572]	; (8005700 <UART_SetConfig+0x2cc>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d005      	beq.n	80054d4 <UART_SetConfig+0xa0>
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4b8d      	ldr	r3, [pc, #564]	; (8005704 <UART_SetConfig+0x2d0>)
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d104      	bne.n	80054de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d4:	f7fd fcc4 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 80054d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054dc:	e003      	b.n	80054e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054de:	f7fd fcab 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 80054e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	f040 810c 	bne.w	800570c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005506:	4622      	mov	r2, r4
 8005508:	462b      	mov	r3, r5
 800550a:	1891      	adds	r1, r2, r2
 800550c:	65b9      	str	r1, [r7, #88]	; 0x58
 800550e:	415b      	adcs	r3, r3
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005516:	4621      	mov	r1, r4
 8005518:	eb12 0801 	adds.w	r8, r2, r1
 800551c:	4629      	mov	r1, r5
 800551e:	eb43 0901 	adc.w	r9, r3, r1
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005536:	4690      	mov	r8, r2
 8005538:	4699      	mov	r9, r3
 800553a:	4623      	mov	r3, r4
 800553c:	eb18 0303 	adds.w	r3, r8, r3
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005544:	462b      	mov	r3, r5
 8005546:	eb49 0303 	adc.w	r3, r9, r3
 800554a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800555a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800555e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005562:	460b      	mov	r3, r1
 8005564:	18db      	adds	r3, r3, r3
 8005566:	653b      	str	r3, [r7, #80]	; 0x50
 8005568:	4613      	mov	r3, r2
 800556a:	eb42 0303 	adc.w	r3, r2, r3
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
 8005570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005578:	f7fa fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b61      	ldr	r3, [pc, #388]	; (8005708 <UART_SetConfig+0x2d4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055a4:	415b      	adcs	r3, r3
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055ac:	4641      	mov	r1, r8
 80055ae:	eb12 0a01 	adds.w	sl, r2, r1
 80055b2:	4649      	mov	r1, r9
 80055b4:	eb43 0b01 	adc.w	fp, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	4692      	mov	sl, r2
 80055ce:	469b      	mov	fp, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	eb1a 0303 	adds.w	r3, sl, r3
 80055d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055da:	464b      	mov	r3, r9
 80055dc:	eb4b 0303 	adc.w	r3, fp, r3
 80055e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f8:	460b      	mov	r3, r1
 80055fa:	18db      	adds	r3, r3, r3
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
 80055fe:	4613      	mov	r3, r2
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
 8005606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800560a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800560e:	f7fa fe4f 	bl	80002b0 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4611      	mov	r1, r2
 8005618:	4b3b      	ldr	r3, [pc, #236]	; (8005708 <UART_SetConfig+0x2d4>)
 800561a:	fba3 2301 	umull	r2, r3, r3, r1
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2264      	movs	r2, #100	; 0x64
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	1acb      	subs	r3, r1, r3
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562e:	4b36      	ldr	r3, [pc, #216]	; (8005708 <UART_SetConfig+0x2d4>)
 8005630:	fba3 2302 	umull	r2, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800563c:	441c      	add	r4, r3
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800564c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	63b9      	str	r1, [r7, #56]	; 0x38
 8005658:	415b      	adcs	r3, r3
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6339      	str	r1, [r7, #48]	; 0x30
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056b4:	460b      	mov	r3, r1
 80056b6:	18db      	adds	r3, r3, r3
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ba:	4613      	mov	r3, r2
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056ca:	f7fa fdf1 	bl	80002b0 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <UART_SetConfig+0x2d4>)
 80056d4:	fba3 1302 	umull	r1, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	2164      	movs	r1, #100	; 0x64
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	3332      	adds	r3, #50	; 0x32
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <UART_SetConfig+0x2d4>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 0207 	and.w	r2, r3, #7
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4422      	add	r2, r4
 80056fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056fc:	e105      	b.n	800590a <UART_SetConfig+0x4d6>
 80056fe:	bf00      	nop
 8005700:	40011000 	.word	0x40011000
 8005704:	40011400 	.word	0x40011400
 8005708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800570c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005710:	2200      	movs	r2, #0
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800571a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800571e:	4642      	mov	r2, r8
 8005720:	464b      	mov	r3, r9
 8005722:	1891      	adds	r1, r2, r2
 8005724:	6239      	str	r1, [r7, #32]
 8005726:	415b      	adcs	r3, r3
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572e:	4641      	mov	r1, r8
 8005730:	1854      	adds	r4, r2, r1
 8005732:	4649      	mov	r1, r9
 8005734:	eb43 0501 	adc.w	r5, r3, r1
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	00eb      	lsls	r3, r5, #3
 8005742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005746:	00e2      	lsls	r2, r4, #3
 8005748:	4614      	mov	r4, r2
 800574a:	461d      	mov	r5, r3
 800574c:	4643      	mov	r3, r8
 800574e:	18e3      	adds	r3, r4, r3
 8005750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005754:	464b      	mov	r3, r9
 8005756:	eb45 0303 	adc.w	r3, r5, r3
 800575a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800576a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800577a:	4629      	mov	r1, r5
 800577c:	008b      	lsls	r3, r1, #2
 800577e:	4621      	mov	r1, r4
 8005780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005784:	4621      	mov	r1, r4
 8005786:	008a      	lsls	r2, r1, #2
 8005788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800578c:	f7fa fd90 	bl	80002b0 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4b60      	ldr	r3, [pc, #384]	; (8005918 <UART_SetConfig+0x4e4>)
 8005796:	fba3 2302 	umull	r2, r3, r3, r2
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	011c      	lsls	r4, r3, #4
 800579e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	61b9      	str	r1, [r7, #24]
 80057b8:	415b      	adcs	r3, r3
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c0:	4641      	mov	r1, r8
 80057c2:	1851      	adds	r1, r2, r1
 80057c4:	6139      	str	r1, [r7, #16]
 80057c6:	4649      	mov	r1, r9
 80057c8:	414b      	adcs	r3, r1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d8:	4659      	mov	r1, fp
 80057da:	00cb      	lsls	r3, r1, #3
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e2:	4651      	mov	r1, sl
 80057e4:	00ca      	lsls	r2, r1, #3
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	4642      	mov	r2, r8
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f4:	464b      	mov	r3, r9
 80057f6:	460a      	mov	r2, r1
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	67bb      	str	r3, [r7, #120]	; 0x78
 800580a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005818:	4649      	mov	r1, r9
 800581a:	008b      	lsls	r3, r1, #2
 800581c:	4641      	mov	r1, r8
 800581e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005822:	4641      	mov	r1, r8
 8005824:	008a      	lsls	r2, r1, #2
 8005826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800582a:	f7fa fd41 	bl	80002b0 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <UART_SetConfig+0x4e4>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a34      	ldr	r2, [pc, #208]	; (8005918 <UART_SetConfig+0x4e4>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005852:	441c      	add	r4, r3
 8005854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005858:	2200      	movs	r2, #0
 800585a:	673b      	str	r3, [r7, #112]	; 0x70
 800585c:	677a      	str	r2, [r7, #116]	; 0x74
 800585e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005862:	4642      	mov	r2, r8
 8005864:	464b      	mov	r3, r9
 8005866:	1891      	adds	r1, r2, r2
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	415b      	adcs	r3, r3
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005872:	4641      	mov	r1, r8
 8005874:	1851      	adds	r1, r2, r1
 8005876:	6039      	str	r1, [r7, #0]
 8005878:	4649      	mov	r1, r9
 800587a:	414b      	adcs	r3, r1
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800588a:	4659      	mov	r1, fp
 800588c:	00cb      	lsls	r3, r1, #3
 800588e:	4651      	mov	r1, sl
 8005890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005894:	4651      	mov	r1, sl
 8005896:	00ca      	lsls	r2, r1, #3
 8005898:	4610      	mov	r0, r2
 800589a:	4619      	mov	r1, r3
 800589c:	4603      	mov	r3, r0
 800589e:	4642      	mov	r2, r8
 80058a0:	189b      	adds	r3, r3, r2
 80058a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a4:	464b      	mov	r3, r9
 80058a6:	460a      	mov	r2, r1
 80058a8:	eb42 0303 	adc.w	r3, r2, r3
 80058ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	663b      	str	r3, [r7, #96]	; 0x60
 80058b8:	667a      	str	r2, [r7, #100]	; 0x64
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058c6:	4649      	mov	r1, r9
 80058c8:	008b      	lsls	r3, r1, #2
 80058ca:	4641      	mov	r1, r8
 80058cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058d0:	4641      	mov	r1, r8
 80058d2:	008a      	lsls	r2, r1, #2
 80058d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d8:	f7fa fcea 	bl	80002b0 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <UART_SetConfig+0x4e4>)
 80058e2:	fba3 1302 	umull	r1, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2164      	movs	r1, #100	; 0x64
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	3332      	adds	r3, #50	; 0x32
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <UART_SetConfig+0x4e4>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4422      	add	r2, r4
 8005908:	609a      	str	r2, [r3, #8]
}
 800590a:	bf00      	nop
 800590c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	51eb851f 	.word	0x51eb851f

0800591c <__errno>:
 800591c:	4b01      	ldr	r3, [pc, #4]	; (8005924 <__errno+0x8>)
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000020 	.word	0x20000020

08005928 <__libc_init_array>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4d0d      	ldr	r5, [pc, #52]	; (8005960 <__libc_init_array+0x38>)
 800592c:	4c0d      	ldr	r4, [pc, #52]	; (8005964 <__libc_init_array+0x3c>)
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	2600      	movs	r6, #0
 8005934:	42a6      	cmp	r6, r4
 8005936:	d109      	bne.n	800594c <__libc_init_array+0x24>
 8005938:	4d0b      	ldr	r5, [pc, #44]	; (8005968 <__libc_init_array+0x40>)
 800593a:	4c0c      	ldr	r4, [pc, #48]	; (800596c <__libc_init_array+0x44>)
 800593c:	f001 f824 	bl	8006988 <_init>
 8005940:	1b64      	subs	r4, r4, r5
 8005942:	10a4      	asrs	r4, r4, #2
 8005944:	2600      	movs	r6, #0
 8005946:	42a6      	cmp	r6, r4
 8005948:	d105      	bne.n	8005956 <__libc_init_array+0x2e>
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005950:	4798      	blx	r3
 8005952:	3601      	adds	r6, #1
 8005954:	e7ee      	b.n	8005934 <__libc_init_array+0xc>
 8005956:	f855 3b04 	ldr.w	r3, [r5], #4
 800595a:	4798      	blx	r3
 800595c:	3601      	adds	r6, #1
 800595e:	e7f2      	b.n	8005946 <__libc_init_array+0x1e>
 8005960:	0800b1bc 	.word	0x0800b1bc
 8005964:	0800b1bc 	.word	0x0800b1bc
 8005968:	0800b1bc 	.word	0x0800b1bc
 800596c:	0800b1c0 	.word	0x0800b1c0

08005970 <memset>:
 8005970:	4402      	add	r2, r0
 8005972:	4603      	mov	r3, r0
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <memset+0xa>
 8005978:	4770      	bx	lr
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	e7f9      	b.n	8005974 <memset+0x4>

08005980 <_free_r>:
 8005980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005982:	2900      	cmp	r1, #0
 8005984:	d044      	beq.n	8005a10 <_free_r+0x90>
 8005986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f1a1 0404 	sub.w	r4, r1, #4
 8005992:	bfb8      	it	lt
 8005994:	18e4      	addlt	r4, r4, r3
 8005996:	f000 fc51 	bl	800623c <__malloc_lock>
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <_free_r+0x94>)
 800599c:	9801      	ldr	r0, [sp, #4]
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	b933      	cbnz	r3, 80059b0 <_free_r+0x30>
 80059a2:	6063      	str	r3, [r4, #4]
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	b003      	add	sp, #12
 80059a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ac:	f000 bc4c 	b.w	8006248 <__malloc_unlock>
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d908      	bls.n	80059c6 <_free_r+0x46>
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	1961      	adds	r1, r4, r5
 80059b8:	428b      	cmp	r3, r1
 80059ba:	bf01      	itttt	eq
 80059bc:	6819      	ldreq	r1, [r3, #0]
 80059be:	685b      	ldreq	r3, [r3, #4]
 80059c0:	1949      	addeq	r1, r1, r5
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	e7ed      	b.n	80059a2 <_free_r+0x22>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x50>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x46>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1855      	adds	r5, r2, r1
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x70>
 80059d8:	6824      	ldr	r4, [r4, #0]
 80059da:	4421      	add	r1, r4
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	42a3      	cmp	r3, r4
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1e0      	bne.n	80059a6 <_free_r+0x26>
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	4421      	add	r1, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	e7da      	b.n	80059a6 <_free_r+0x26>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x78>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	e7d6      	b.n	80059a6 <_free_r+0x26>
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1961      	adds	r1, r4, r5
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf04      	itt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	bf04      	itt	eq
 8005a08:	1949      	addeq	r1, r1, r5
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	6054      	str	r4, [r2, #4]
 8005a0e:	e7ca      	b.n	80059a6 <_free_r+0x26>
 8005a10:	b003      	add	sp, #12
 8005a12:	bd30      	pop	{r4, r5, pc}
 8005a14:	200001d4 	.word	0x200001d4

08005a18 <sbrk_aligned>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4e0e      	ldr	r6, [pc, #56]	; (8005a54 <sbrk_aligned+0x3c>)
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	4605      	mov	r5, r0
 8005a22:	b911      	cbnz	r1, 8005a2a <sbrk_aligned+0x12>
 8005a24:	f000 f91a 	bl	8005c5c <_sbrk_r>
 8005a28:	6030      	str	r0, [r6, #0]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f915 	bl	8005c5c <_sbrk_r>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d00a      	beq.n	8005a4c <sbrk_aligned+0x34>
 8005a36:	1cc4      	adds	r4, r0, #3
 8005a38:	f024 0403 	bic.w	r4, r4, #3
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d007      	beq.n	8005a50 <sbrk_aligned+0x38>
 8005a40:	1a21      	subs	r1, r4, r0
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f90a 	bl	8005c5c <_sbrk_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d101      	bne.n	8005a50 <sbrk_aligned+0x38>
 8005a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a50:	4620      	mov	r0, r4
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	200001d8 	.word	0x200001d8

08005a58 <_malloc_r>:
 8005a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	1ccd      	adds	r5, r1, #3
 8005a5e:	f025 0503 	bic.w	r5, r5, #3
 8005a62:	3508      	adds	r5, #8
 8005a64:	2d0c      	cmp	r5, #12
 8005a66:	bf38      	it	cc
 8005a68:	250c      	movcc	r5, #12
 8005a6a:	2d00      	cmp	r5, #0
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	db01      	blt.n	8005a74 <_malloc_r+0x1c>
 8005a70:	42a9      	cmp	r1, r5
 8005a72:	d905      	bls.n	8005a80 <_malloc_r+0x28>
 8005a74:	230c      	movs	r3, #12
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	2600      	movs	r6, #0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a80:	4e2e      	ldr	r6, [pc, #184]	; (8005b3c <_malloc_r+0xe4>)
 8005a82:	f000 fbdb 	bl	800623c <__malloc_lock>
 8005a86:	6833      	ldr	r3, [r6, #0]
 8005a88:	461c      	mov	r4, r3
 8005a8a:	bb34      	cbnz	r4, 8005ada <_malloc_r+0x82>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f7ff ffc2 	bl	8005a18 <sbrk_aligned>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	4604      	mov	r4, r0
 8005a98:	d14d      	bne.n	8005b36 <_malloc_r+0xde>
 8005a9a:	6834      	ldr	r4, [r6, #0]
 8005a9c:	4626      	mov	r6, r4
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	d140      	bne.n	8005b24 <_malloc_r+0xcc>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	eb04 0803 	add.w	r8, r4, r3
 8005aac:	f000 f8d6 	bl	8005c5c <_sbrk_r>
 8005ab0:	4580      	cmp	r8, r0
 8005ab2:	d13a      	bne.n	8005b2a <_malloc_r+0xd2>
 8005ab4:	6821      	ldr	r1, [r4, #0]
 8005ab6:	3503      	adds	r5, #3
 8005ab8:	1a6d      	subs	r5, r5, r1
 8005aba:	f025 0503 	bic.w	r5, r5, #3
 8005abe:	3508      	adds	r5, #8
 8005ac0:	2d0c      	cmp	r5, #12
 8005ac2:	bf38      	it	cc
 8005ac4:	250c      	movcc	r5, #12
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ffa5 	bl	8005a18 <sbrk_aligned>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d02b      	beq.n	8005b2a <_malloc_r+0xd2>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	442b      	add	r3, r5
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	e00e      	b.n	8005af8 <_malloc_r+0xa0>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	1b52      	subs	r2, r2, r5
 8005ade:	d41e      	bmi.n	8005b1e <_malloc_r+0xc6>
 8005ae0:	2a0b      	cmp	r2, #11
 8005ae2:	d916      	bls.n	8005b12 <_malloc_r+0xba>
 8005ae4:	1961      	adds	r1, r4, r5
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	6025      	str	r5, [r4, #0]
 8005aea:	bf18      	it	ne
 8005aec:	6059      	strne	r1, [r3, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	bf08      	it	eq
 8005af2:	6031      	streq	r1, [r6, #0]
 8005af4:	5162      	str	r2, [r4, r5]
 8005af6:	604b      	str	r3, [r1, #4]
 8005af8:	4638      	mov	r0, r7
 8005afa:	f104 060b 	add.w	r6, r4, #11
 8005afe:	f000 fba3 	bl	8006248 <__malloc_unlock>
 8005b02:	f026 0607 	bic.w	r6, r6, #7
 8005b06:	1d23      	adds	r3, r4, #4
 8005b08:	1af2      	subs	r2, r6, r3
 8005b0a:	d0b6      	beq.n	8005a7a <_malloc_r+0x22>
 8005b0c:	1b9b      	subs	r3, r3, r6
 8005b0e:	50a3      	str	r3, [r4, r2]
 8005b10:	e7b3      	b.n	8005a7a <_malloc_r+0x22>
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	bf0c      	ite	eq
 8005b18:	6032      	streq	r2, [r6, #0]
 8005b1a:	605a      	strne	r2, [r3, #4]
 8005b1c:	e7ec      	b.n	8005af8 <_malloc_r+0xa0>
 8005b1e:	4623      	mov	r3, r4
 8005b20:	6864      	ldr	r4, [r4, #4]
 8005b22:	e7b2      	b.n	8005a8a <_malloc_r+0x32>
 8005b24:	4634      	mov	r4, r6
 8005b26:	6876      	ldr	r6, [r6, #4]
 8005b28:	e7b9      	b.n	8005a9e <_malloc_r+0x46>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f000 fb8a 	bl	8006248 <__malloc_unlock>
 8005b34:	e7a1      	b.n	8005a7a <_malloc_r+0x22>
 8005b36:	6025      	str	r5, [r4, #0]
 8005b38:	e7de      	b.n	8005af8 <_malloc_r+0xa0>
 8005b3a:	bf00      	nop
 8005b3c:	200001d4 	.word	0x200001d4

08005b40 <iprintf>:
 8005b40:	b40f      	push	{r0, r1, r2, r3}
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <iprintf+0x2c>)
 8005b44:	b513      	push	{r0, r1, r4, lr}
 8005b46:	681c      	ldr	r4, [r3, #0]
 8005b48:	b124      	cbz	r4, 8005b54 <iprintf+0x14>
 8005b4a:	69a3      	ldr	r3, [r4, #24]
 8005b4c:	b913      	cbnz	r3, 8005b54 <iprintf+0x14>
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fa6e 	bl	8006030 <__sinit>
 8005b54:	ab05      	add	r3, sp, #20
 8005b56:	9a04      	ldr	r2, [sp, #16]
 8005b58:	68a1      	ldr	r1, [r4, #8]
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fba3 	bl	80062a8 <_vfiprintf_r>
 8005b62:	b002      	add	sp, #8
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	b004      	add	sp, #16
 8005b6a:	4770      	bx	lr
 8005b6c:	20000020 	.word	0x20000020

08005b70 <_puts_r>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	460e      	mov	r6, r1
 8005b74:	4605      	mov	r5, r0
 8005b76:	b118      	cbz	r0, 8005b80 <_puts_r+0x10>
 8005b78:	6983      	ldr	r3, [r0, #24]
 8005b7a:	b90b      	cbnz	r3, 8005b80 <_puts_r+0x10>
 8005b7c:	f000 fa58 	bl	8006030 <__sinit>
 8005b80:	69ab      	ldr	r3, [r5, #24]
 8005b82:	68ac      	ldr	r4, [r5, #8]
 8005b84:	b913      	cbnz	r3, 8005b8c <_puts_r+0x1c>
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 fa52 	bl	8006030 <__sinit>
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <_puts_r+0xd0>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d120      	bne.n	8005bd4 <_puts_r+0x64>
 8005b92:	686c      	ldr	r4, [r5, #4]
 8005b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b96:	07db      	lsls	r3, r3, #31
 8005b98:	d405      	bmi.n	8005ba6 <_puts_r+0x36>
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	0598      	lsls	r0, r3, #22
 8005b9e:	d402      	bmi.n	8005ba6 <_puts_r+0x36>
 8005ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ba2:	f000 fae3 	bl	800616c <__retarget_lock_acquire_recursive>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	0719      	lsls	r1, r3, #28
 8005baa:	d51d      	bpl.n	8005be8 <_puts_r+0x78>
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	b1db      	cbz	r3, 8005be8 <_puts_r+0x78>
 8005bb0:	3e01      	subs	r6, #1
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	bb39      	cbnz	r1, 8005c0e <_puts_r+0x9e>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da38      	bge.n	8005c34 <_puts_r+0xc4>
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	210a      	movs	r1, #10
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f858 	bl	8005c7c <__swbuf_r>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d011      	beq.n	8005bf4 <_puts_r+0x84>
 8005bd0:	250a      	movs	r5, #10
 8005bd2:	e011      	b.n	8005bf8 <_puts_r+0x88>
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <_puts_r+0xd4>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <_puts_r+0x6e>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7da      	b.n	8005b94 <_puts_r+0x24>
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <_puts_r+0xd8>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7d5      	b.n	8005b94 <_puts_r+0x24>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f898 	bl	8005d20 <__swsetup_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d0dd      	beq.n	8005bb0 <_puts_r+0x40>
 8005bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bfa:	07da      	lsls	r2, r3, #31
 8005bfc:	d405      	bmi.n	8005c0a <_puts_r+0x9a>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	059b      	lsls	r3, r3, #22
 8005c02:	d402      	bmi.n	8005c0a <_puts_r+0x9a>
 8005c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c06:	f000 fab2 	bl	800616e <__retarget_lock_release_recursive>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da04      	bge.n	8005c1c <_puts_r+0xac>
 8005c12:	69a2      	ldr	r2, [r4, #24]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	dc06      	bgt.n	8005c26 <_puts_r+0xb6>
 8005c18:	290a      	cmp	r1, #10
 8005c1a:	d004      	beq.n	8005c26 <_puts_r+0xb6>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	7019      	strb	r1, [r3, #0]
 8005c24:	e7c5      	b.n	8005bb2 <_puts_r+0x42>
 8005c26:	4622      	mov	r2, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f827 	bl	8005c7c <__swbuf_r>
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d1bf      	bne.n	8005bb2 <_puts_r+0x42>
 8005c32:	e7df      	b.n	8005bf4 <_puts_r+0x84>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	250a      	movs	r5, #10
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	701d      	strb	r5, [r3, #0]
 8005c3e:	e7db      	b.n	8005bf8 <_puts_r+0x88>
 8005c40:	0800b140 	.word	0x0800b140
 8005c44:	0800b160 	.word	0x0800b160
 8005c48:	0800b120 	.word	0x0800b120

08005c4c <puts>:
 8005c4c:	4b02      	ldr	r3, [pc, #8]	; (8005c58 <puts+0xc>)
 8005c4e:	4601      	mov	r1, r0
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f7ff bf8d 	b.w	8005b70 <_puts_r>
 8005c56:	bf00      	nop
 8005c58:	20000020 	.word	0x20000020

08005c5c <_sbrk_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_sbrk_r+0x1c>)
 8005c60:	2300      	movs	r3, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	602b      	str	r3, [r5, #0]
 8005c68:	f7fb f85e 	bl	8000d28 <_sbrk>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_sbrk_r+0x1a>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_sbrk_r+0x1a>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200001e0 	.word	0x200001e0

08005c7c <__swbuf_r>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	460e      	mov	r6, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	4605      	mov	r5, r0
 8005c84:	b118      	cbz	r0, 8005c8e <__swbuf_r+0x12>
 8005c86:	6983      	ldr	r3, [r0, #24]
 8005c88:	b90b      	cbnz	r3, 8005c8e <__swbuf_r+0x12>
 8005c8a:	f000 f9d1 	bl	8006030 <__sinit>
 8005c8e:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <__swbuf_r+0x98>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	d12b      	bne.n	8005cec <__swbuf_r+0x70>
 8005c94:	686c      	ldr	r4, [r5, #4]
 8005c96:	69a3      	ldr	r3, [r4, #24]
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	071a      	lsls	r2, r3, #28
 8005c9e:	d52f      	bpl.n	8005d00 <__swbuf_r+0x84>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	b36b      	cbz	r3, 8005d00 <__swbuf_r+0x84>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	1ac0      	subs	r0, r0, r3
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	b2f6      	uxtb	r6, r6
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	dc04      	bgt.n	8005cbe <__swbuf_r+0x42>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 f926 	bl	8005f08 <_fflush_r>
 8005cbc:	bb30      	cbnz	r0, 8005d0c <__swbuf_r+0x90>
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	701e      	strb	r6, [r3, #0]
 8005ccc:	6963      	ldr	r3, [r4, #20]
 8005cce:	3001      	adds	r0, #1
 8005cd0:	4283      	cmp	r3, r0
 8005cd2:	d004      	beq.n	8005cde <__swbuf_r+0x62>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d506      	bpl.n	8005ce8 <__swbuf_r+0x6c>
 8005cda:	2e0a      	cmp	r6, #10
 8005cdc:	d104      	bne.n	8005ce8 <__swbuf_r+0x6c>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 f911 	bl	8005f08 <_fflush_r>
 8005ce6:	b988      	cbnz	r0, 8005d0c <__swbuf_r+0x90>
 8005ce8:	4638      	mov	r0, r7
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <__swbuf_r+0x9c>)
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	d101      	bne.n	8005cf6 <__swbuf_r+0x7a>
 8005cf2:	68ac      	ldr	r4, [r5, #8]
 8005cf4:	e7cf      	b.n	8005c96 <__swbuf_r+0x1a>
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <__swbuf_r+0xa0>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	bf08      	it	eq
 8005cfc:	68ec      	ldreq	r4, [r5, #12]
 8005cfe:	e7ca      	b.n	8005c96 <__swbuf_r+0x1a>
 8005d00:	4621      	mov	r1, r4
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f80c 	bl	8005d20 <__swsetup_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d0cb      	beq.n	8005ca4 <__swbuf_r+0x28>
 8005d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d10:	e7ea      	b.n	8005ce8 <__swbuf_r+0x6c>
 8005d12:	bf00      	nop
 8005d14:	0800b140 	.word	0x0800b140
 8005d18:	0800b160 	.word	0x0800b160
 8005d1c:	0800b120 	.word	0x0800b120

08005d20 <__swsetup_r>:
 8005d20:	4b32      	ldr	r3, [pc, #200]	; (8005dec <__swsetup_r+0xcc>)
 8005d22:	b570      	push	{r4, r5, r6, lr}
 8005d24:	681d      	ldr	r5, [r3, #0]
 8005d26:	4606      	mov	r6, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	b125      	cbz	r5, 8005d36 <__swsetup_r+0x16>
 8005d2c:	69ab      	ldr	r3, [r5, #24]
 8005d2e:	b913      	cbnz	r3, 8005d36 <__swsetup_r+0x16>
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 f97d 	bl	8006030 <__sinit>
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <__swsetup_r+0xd0>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d10f      	bne.n	8005d5c <__swsetup_r+0x3c>
 8005d3c:	686c      	ldr	r4, [r5, #4]
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d44:	0719      	lsls	r1, r3, #28
 8005d46:	d42c      	bmi.n	8005da2 <__swsetup_r+0x82>
 8005d48:	06dd      	lsls	r5, r3, #27
 8005d4a:	d411      	bmi.n	8005d70 <__swsetup_r+0x50>
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5a:	e03e      	b.n	8005dda <__swsetup_r+0xba>
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <__swsetup_r+0xd4>)
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d101      	bne.n	8005d66 <__swsetup_r+0x46>
 8005d62:	68ac      	ldr	r4, [r5, #8]
 8005d64:	e7eb      	b.n	8005d3e <__swsetup_r+0x1e>
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <__swsetup_r+0xd8>)
 8005d68:	429c      	cmp	r4, r3
 8005d6a:	bf08      	it	eq
 8005d6c:	68ec      	ldreq	r4, [r5, #12]
 8005d6e:	e7e6      	b.n	8005d3e <__swsetup_r+0x1e>
 8005d70:	0758      	lsls	r0, r3, #29
 8005d72:	d512      	bpl.n	8005d9a <__swsetup_r+0x7a>
 8005d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d76:	b141      	cbz	r1, 8005d8a <__swsetup_r+0x6a>
 8005d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	d002      	beq.n	8005d86 <__swsetup_r+0x66>
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7ff fdfd 	bl	8005980 <_free_r>
 8005d86:	2300      	movs	r3, #0
 8005d88:	6363      	str	r3, [r4, #52]	; 0x34
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	2300      	movs	r3, #0
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	f043 0308 	orr.w	r3, r3, #8
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	b94b      	cbnz	r3, 8005dba <__swsetup_r+0x9a>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	d003      	beq.n	8005dba <__swsetup_r+0x9a>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 fa01 	bl	80061bc <__smakebuf_r>
 8005dba:	89a0      	ldrh	r0, [r4, #12]
 8005dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dc0:	f010 0301 	ands.w	r3, r0, #1
 8005dc4:	d00a      	beq.n	8005ddc <__swsetup_r+0xbc>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60a3      	str	r3, [r4, #8]
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	425b      	negs	r3, r3
 8005dce:	61a3      	str	r3, [r4, #24]
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	b943      	cbnz	r3, 8005de6 <__swsetup_r+0xc6>
 8005dd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dd8:	d1ba      	bne.n	8005d50 <__swsetup_r+0x30>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	0781      	lsls	r1, r0, #30
 8005dde:	bf58      	it	pl
 8005de0:	6963      	ldrpl	r3, [r4, #20]
 8005de2:	60a3      	str	r3, [r4, #8]
 8005de4:	e7f4      	b.n	8005dd0 <__swsetup_r+0xb0>
 8005de6:	2000      	movs	r0, #0
 8005de8:	e7f7      	b.n	8005dda <__swsetup_r+0xba>
 8005dea:	bf00      	nop
 8005dec:	20000020 	.word	0x20000020
 8005df0:	0800b140 	.word	0x0800b140
 8005df4:	0800b160 	.word	0x0800b160
 8005df8:	0800b120 	.word	0x0800b120

08005dfc <__sflush_r>:
 8005dfc:	898a      	ldrh	r2, [r1, #12]
 8005dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e02:	4605      	mov	r5, r0
 8005e04:	0710      	lsls	r0, r2, #28
 8005e06:	460c      	mov	r4, r1
 8005e08:	d458      	bmi.n	8005ebc <__sflush_r+0xc0>
 8005e0a:	684b      	ldr	r3, [r1, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dc05      	bgt.n	8005e1c <__sflush_r+0x20>
 8005e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dc02      	bgt.n	8005e1c <__sflush_r+0x20>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	d0f9      	beq.n	8005e16 <__sflush_r+0x1a>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e28:	682f      	ldr	r7, [r5, #0]
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	d032      	beq.n	8005e94 <__sflush_r+0x98>
 8005e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	075a      	lsls	r2, r3, #29
 8005e34:	d505      	bpl.n	8005e42 <__sflush_r+0x46>
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	1ac0      	subs	r0, r0, r3
 8005e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e3c:	b10b      	cbz	r3, 8005e42 <__sflush_r+0x46>
 8005e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e40:	1ac0      	subs	r0, r0, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	4602      	mov	r2, r0
 8005e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e48:	6a21      	ldr	r1, [r4, #32]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b0      	blx	r6
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	d106      	bne.n	8005e62 <__sflush_r+0x66>
 8005e54:	6829      	ldr	r1, [r5, #0]
 8005e56:	291d      	cmp	r1, #29
 8005e58:	d82c      	bhi.n	8005eb4 <__sflush_r+0xb8>
 8005e5a:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <__sflush_r+0x108>)
 8005e5c:	40ca      	lsrs	r2, r1
 8005e5e:	07d6      	lsls	r6, r2, #31
 8005e60:	d528      	bpl.n	8005eb4 <__sflush_r+0xb8>
 8005e62:	2200      	movs	r2, #0
 8005e64:	6062      	str	r2, [r4, #4]
 8005e66:	04d9      	lsls	r1, r3, #19
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	6022      	str	r2, [r4, #0]
 8005e6c:	d504      	bpl.n	8005e78 <__sflush_r+0x7c>
 8005e6e:	1c42      	adds	r2, r0, #1
 8005e70:	d101      	bne.n	8005e76 <__sflush_r+0x7a>
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	b903      	cbnz	r3, 8005e78 <__sflush_r+0x7c>
 8005e76:	6560      	str	r0, [r4, #84]	; 0x54
 8005e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7a:	602f      	str	r7, [r5, #0]
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d0ca      	beq.n	8005e16 <__sflush_r+0x1a>
 8005e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d002      	beq.n	8005e8e <__sflush_r+0x92>
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f7ff fd79 	bl	8005980 <_free_r>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	6360      	str	r0, [r4, #52]	; 0x34
 8005e92:	e7c1      	b.n	8005e18 <__sflush_r+0x1c>
 8005e94:	6a21      	ldr	r1, [r4, #32]
 8005e96:	2301      	movs	r3, #1
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b0      	blx	r6
 8005e9c:	1c41      	adds	r1, r0, #1
 8005e9e:	d1c7      	bne.n	8005e30 <__sflush_r+0x34>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0c4      	beq.n	8005e30 <__sflush_r+0x34>
 8005ea6:	2b1d      	cmp	r3, #29
 8005ea8:	d001      	beq.n	8005eae <__sflush_r+0xb2>
 8005eaa:	2b16      	cmp	r3, #22
 8005eac:	d101      	bne.n	8005eb2 <__sflush_r+0xb6>
 8005eae:	602f      	str	r7, [r5, #0]
 8005eb0:	e7b1      	b.n	8005e16 <__sflush_r+0x1a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	e7ad      	b.n	8005e18 <__sflush_r+0x1c>
 8005ebc:	690f      	ldr	r7, [r1, #16]
 8005ebe:	2f00      	cmp	r7, #0
 8005ec0:	d0a9      	beq.n	8005e16 <__sflush_r+0x1a>
 8005ec2:	0793      	lsls	r3, r2, #30
 8005ec4:	680e      	ldr	r6, [r1, #0]
 8005ec6:	bf08      	it	eq
 8005ec8:	694b      	ldreq	r3, [r1, #20]
 8005eca:	600f      	str	r7, [r1, #0]
 8005ecc:	bf18      	it	ne
 8005ece:	2300      	movne	r3, #0
 8005ed0:	eba6 0807 	sub.w	r8, r6, r7
 8005ed4:	608b      	str	r3, [r1, #8]
 8005ed6:	f1b8 0f00 	cmp.w	r8, #0
 8005eda:	dd9c      	ble.n	8005e16 <__sflush_r+0x1a>
 8005edc:	6a21      	ldr	r1, [r4, #32]
 8005ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	463a      	mov	r2, r7
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b0      	blx	r6
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	dc06      	bgt.n	8005efa <__sflush_r+0xfe>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef2:	81a3      	strh	r3, [r4, #12]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	e78e      	b.n	8005e18 <__sflush_r+0x1c>
 8005efa:	4407      	add	r7, r0
 8005efc:	eba8 0800 	sub.w	r8, r8, r0
 8005f00:	e7e9      	b.n	8005ed6 <__sflush_r+0xda>
 8005f02:	bf00      	nop
 8005f04:	20400001 	.word	0x20400001

08005f08 <_fflush_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	690b      	ldr	r3, [r1, #16]
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	b913      	cbnz	r3, 8005f18 <_fflush_r+0x10>
 8005f12:	2500      	movs	r5, #0
 8005f14:	4628      	mov	r0, r5
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	b118      	cbz	r0, 8005f22 <_fflush_r+0x1a>
 8005f1a:	6983      	ldr	r3, [r0, #24]
 8005f1c:	b90b      	cbnz	r3, 8005f22 <_fflush_r+0x1a>
 8005f1e:	f000 f887 	bl	8006030 <__sinit>
 8005f22:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <_fflush_r+0x6c>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	d11b      	bne.n	8005f60 <_fflush_r+0x58>
 8005f28:	686c      	ldr	r4, [r5, #4]
 8005f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ef      	beq.n	8005f12 <_fflush_r+0xa>
 8005f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f34:	07d0      	lsls	r0, r2, #31
 8005f36:	d404      	bmi.n	8005f42 <_fflush_r+0x3a>
 8005f38:	0599      	lsls	r1, r3, #22
 8005f3a:	d402      	bmi.n	8005f42 <_fflush_r+0x3a>
 8005f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3e:	f000 f915 	bl	800616c <__retarget_lock_acquire_recursive>
 8005f42:	4628      	mov	r0, r5
 8005f44:	4621      	mov	r1, r4
 8005f46:	f7ff ff59 	bl	8005dfc <__sflush_r>
 8005f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f4c:	07da      	lsls	r2, r3, #31
 8005f4e:	4605      	mov	r5, r0
 8005f50:	d4e0      	bmi.n	8005f14 <_fflush_r+0xc>
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	059b      	lsls	r3, r3, #22
 8005f56:	d4dd      	bmi.n	8005f14 <_fflush_r+0xc>
 8005f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5a:	f000 f908 	bl	800616e <__retarget_lock_release_recursive>
 8005f5e:	e7d9      	b.n	8005f14 <_fflush_r+0xc>
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <_fflush_r+0x70>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d101      	bne.n	8005f6a <_fflush_r+0x62>
 8005f66:	68ac      	ldr	r4, [r5, #8]
 8005f68:	e7df      	b.n	8005f2a <_fflush_r+0x22>
 8005f6a:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <_fflush_r+0x74>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	bf08      	it	eq
 8005f70:	68ec      	ldreq	r4, [r5, #12]
 8005f72:	e7da      	b.n	8005f2a <_fflush_r+0x22>
 8005f74:	0800b140 	.word	0x0800b140
 8005f78:	0800b160 	.word	0x0800b160
 8005f7c:	0800b120 	.word	0x0800b120

08005f80 <std>:
 8005f80:	2300      	movs	r3, #0
 8005f82:	b510      	push	{r4, lr}
 8005f84:	4604      	mov	r4, r0
 8005f86:	e9c0 3300 	strd	r3, r3, [r0]
 8005f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f8e:	6083      	str	r3, [r0, #8]
 8005f90:	8181      	strh	r1, [r0, #12]
 8005f92:	6643      	str	r3, [r0, #100]	; 0x64
 8005f94:	81c2      	strh	r2, [r0, #14]
 8005f96:	6183      	str	r3, [r0, #24]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	305c      	adds	r0, #92	; 0x5c
 8005f9e:	f7ff fce7 	bl	8005970 <memset>
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <std+0x38>)
 8005fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <std+0x3c>)
 8005fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <std+0x40>)
 8005fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <std+0x44>)
 8005fb0:	6224      	str	r4, [r4, #32]
 8005fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	bf00      	nop
 8005fb8:	08006831 	.word	0x08006831
 8005fbc:	08006853 	.word	0x08006853
 8005fc0:	0800688b 	.word	0x0800688b
 8005fc4:	080068af 	.word	0x080068af

08005fc8 <_cleanup_r>:
 8005fc8:	4901      	ldr	r1, [pc, #4]	; (8005fd0 <_cleanup_r+0x8>)
 8005fca:	f000 b8af 	b.w	800612c <_fwalk_reent>
 8005fce:	bf00      	nop
 8005fd0:	08005f09 	.word	0x08005f09

08005fd4 <__sfmoreglue>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	2268      	movs	r2, #104	; 0x68
 8005fd8:	1e4d      	subs	r5, r1, #1
 8005fda:	4355      	muls	r5, r2
 8005fdc:	460e      	mov	r6, r1
 8005fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fe2:	f7ff fd39 	bl	8005a58 <_malloc_r>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	b140      	cbz	r0, 8005ffc <__sfmoreglue+0x28>
 8005fea:	2100      	movs	r1, #0
 8005fec:	e9c0 1600 	strd	r1, r6, [r0]
 8005ff0:	300c      	adds	r0, #12
 8005ff2:	60a0      	str	r0, [r4, #8]
 8005ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ff8:	f7ff fcba 	bl	8005970 <memset>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}

08006000 <__sfp_lock_acquire>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__sfp_lock_acquire+0x8>)
 8006002:	f000 b8b3 	b.w	800616c <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	200001dd 	.word	0x200001dd

0800600c <__sfp_lock_release>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__sfp_lock_release+0x8>)
 800600e:	f000 b8ae 	b.w	800616e <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	200001dd 	.word	0x200001dd

08006018 <__sinit_lock_acquire>:
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <__sinit_lock_acquire+0x8>)
 800601a:	f000 b8a7 	b.w	800616c <__retarget_lock_acquire_recursive>
 800601e:	bf00      	nop
 8006020:	200001de 	.word	0x200001de

08006024 <__sinit_lock_release>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__sinit_lock_release+0x8>)
 8006026:	f000 b8a2 	b.w	800616e <__retarget_lock_release_recursive>
 800602a:	bf00      	nop
 800602c:	200001de 	.word	0x200001de

08006030 <__sinit>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4604      	mov	r4, r0
 8006034:	f7ff fff0 	bl	8006018 <__sinit_lock_acquire>
 8006038:	69a3      	ldr	r3, [r4, #24]
 800603a:	b11b      	cbz	r3, 8006044 <__sinit+0x14>
 800603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006040:	f7ff bff0 	b.w	8006024 <__sinit_lock_release>
 8006044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006048:	6523      	str	r3, [r4, #80]	; 0x50
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <__sinit+0x68>)
 800604c:	4a13      	ldr	r2, [pc, #76]	; (800609c <__sinit+0x6c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	62a2      	str	r2, [r4, #40]	; 0x28
 8006052:	42a3      	cmp	r3, r4
 8006054:	bf04      	itt	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	61a3      	streq	r3, [r4, #24]
 800605a:	4620      	mov	r0, r4
 800605c:	f000 f820 	bl	80060a0 <__sfp>
 8006060:	6060      	str	r0, [r4, #4]
 8006062:	4620      	mov	r0, r4
 8006064:	f000 f81c 	bl	80060a0 <__sfp>
 8006068:	60a0      	str	r0, [r4, #8]
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f818 	bl	80060a0 <__sfp>
 8006070:	2200      	movs	r2, #0
 8006072:	60e0      	str	r0, [r4, #12]
 8006074:	2104      	movs	r1, #4
 8006076:	6860      	ldr	r0, [r4, #4]
 8006078:	f7ff ff82 	bl	8005f80 <std>
 800607c:	68a0      	ldr	r0, [r4, #8]
 800607e:	2201      	movs	r2, #1
 8006080:	2109      	movs	r1, #9
 8006082:	f7ff ff7d 	bl	8005f80 <std>
 8006086:	68e0      	ldr	r0, [r4, #12]
 8006088:	2202      	movs	r2, #2
 800608a:	2112      	movs	r1, #18
 800608c:	f7ff ff78 	bl	8005f80 <std>
 8006090:	2301      	movs	r3, #1
 8006092:	61a3      	str	r3, [r4, #24]
 8006094:	e7d2      	b.n	800603c <__sinit+0xc>
 8006096:	bf00      	nop
 8006098:	0800b11c 	.word	0x0800b11c
 800609c:	08005fc9 	.word	0x08005fc9

080060a0 <__sfp>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	4607      	mov	r7, r0
 80060a4:	f7ff ffac 	bl	8006000 <__sfp_lock_acquire>
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <__sfp+0x84>)
 80060aa:	681e      	ldr	r6, [r3, #0]
 80060ac:	69b3      	ldr	r3, [r6, #24]
 80060ae:	b913      	cbnz	r3, 80060b6 <__sfp+0x16>
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff ffbd 	bl	8006030 <__sinit>
 80060b6:	3648      	adds	r6, #72	; 0x48
 80060b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060bc:	3b01      	subs	r3, #1
 80060be:	d503      	bpl.n	80060c8 <__sfp+0x28>
 80060c0:	6833      	ldr	r3, [r6, #0]
 80060c2:	b30b      	cbz	r3, 8006108 <__sfp+0x68>
 80060c4:	6836      	ldr	r6, [r6, #0]
 80060c6:	e7f7      	b.n	80060b8 <__sfp+0x18>
 80060c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060cc:	b9d5      	cbnz	r5, 8006104 <__sfp+0x64>
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <__sfp+0x88>)
 80060d0:	60e3      	str	r3, [r4, #12]
 80060d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060d6:	6665      	str	r5, [r4, #100]	; 0x64
 80060d8:	f000 f847 	bl	800616a <__retarget_lock_init_recursive>
 80060dc:	f7ff ff96 	bl	800600c <__sfp_lock_release>
 80060e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060e8:	6025      	str	r5, [r4, #0]
 80060ea:	61a5      	str	r5, [r4, #24]
 80060ec:	2208      	movs	r2, #8
 80060ee:	4629      	mov	r1, r5
 80060f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060f4:	f7ff fc3c 	bl	8005970 <memset>
 80060f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006100:	4620      	mov	r0, r4
 8006102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006104:	3468      	adds	r4, #104	; 0x68
 8006106:	e7d9      	b.n	80060bc <__sfp+0x1c>
 8006108:	2104      	movs	r1, #4
 800610a:	4638      	mov	r0, r7
 800610c:	f7ff ff62 	bl	8005fd4 <__sfmoreglue>
 8006110:	4604      	mov	r4, r0
 8006112:	6030      	str	r0, [r6, #0]
 8006114:	2800      	cmp	r0, #0
 8006116:	d1d5      	bne.n	80060c4 <__sfp+0x24>
 8006118:	f7ff ff78 	bl	800600c <__sfp_lock_release>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	e7ee      	b.n	8006100 <__sfp+0x60>
 8006122:	bf00      	nop
 8006124:	0800b11c 	.word	0x0800b11c
 8006128:	ffff0001 	.word	0xffff0001

0800612c <_fwalk_reent>:
 800612c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006130:	4606      	mov	r6, r0
 8006132:	4688      	mov	r8, r1
 8006134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006138:	2700      	movs	r7, #0
 800613a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800613e:	f1b9 0901 	subs.w	r9, r9, #1
 8006142:	d505      	bpl.n	8006150 <_fwalk_reent+0x24>
 8006144:	6824      	ldr	r4, [r4, #0]
 8006146:	2c00      	cmp	r4, #0
 8006148:	d1f7      	bne.n	800613a <_fwalk_reent+0xe>
 800614a:	4638      	mov	r0, r7
 800614c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006150:	89ab      	ldrh	r3, [r5, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d907      	bls.n	8006166 <_fwalk_reent+0x3a>
 8006156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800615a:	3301      	adds	r3, #1
 800615c:	d003      	beq.n	8006166 <_fwalk_reent+0x3a>
 800615e:	4629      	mov	r1, r5
 8006160:	4630      	mov	r0, r6
 8006162:	47c0      	blx	r8
 8006164:	4307      	orrs	r7, r0
 8006166:	3568      	adds	r5, #104	; 0x68
 8006168:	e7e9      	b.n	800613e <_fwalk_reent+0x12>

0800616a <__retarget_lock_init_recursive>:
 800616a:	4770      	bx	lr

0800616c <__retarget_lock_acquire_recursive>:
 800616c:	4770      	bx	lr

0800616e <__retarget_lock_release_recursive>:
 800616e:	4770      	bx	lr

08006170 <__swhatbuf_r>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	460e      	mov	r6, r1
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	2900      	cmp	r1, #0
 800617a:	b096      	sub	sp, #88	; 0x58
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	da08      	bge.n	8006194 <__swhatbuf_r+0x24>
 8006182:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	602a      	str	r2, [r5, #0]
 800618a:	061a      	lsls	r2, r3, #24
 800618c:	d410      	bmi.n	80061b0 <__swhatbuf_r+0x40>
 800618e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006192:	e00e      	b.n	80061b2 <__swhatbuf_r+0x42>
 8006194:	466a      	mov	r2, sp
 8006196:	f000 fbb1 	bl	80068fc <_fstat_r>
 800619a:	2800      	cmp	r0, #0
 800619c:	dbf1      	blt.n	8006182 <__swhatbuf_r+0x12>
 800619e:	9a01      	ldr	r2, [sp, #4]
 80061a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061a8:	425a      	negs	r2, r3
 80061aa:	415a      	adcs	r2, r3
 80061ac:	602a      	str	r2, [r5, #0]
 80061ae:	e7ee      	b.n	800618e <__swhatbuf_r+0x1e>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	2000      	movs	r0, #0
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	b016      	add	sp, #88	; 0x58
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080061bc <__smakebuf_r>:
 80061bc:	898b      	ldrh	r3, [r1, #12]
 80061be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061c0:	079d      	lsls	r5, r3, #30
 80061c2:	4606      	mov	r6, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	d507      	bpl.n	80061d8 <__smakebuf_r+0x1c>
 80061c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	2301      	movs	r3, #1
 80061d2:	6163      	str	r3, [r4, #20]
 80061d4:	b002      	add	sp, #8
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	ab01      	add	r3, sp, #4
 80061da:	466a      	mov	r2, sp
 80061dc:	f7ff ffc8 	bl	8006170 <__swhatbuf_r>
 80061e0:	9900      	ldr	r1, [sp, #0]
 80061e2:	4605      	mov	r5, r0
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff fc37 	bl	8005a58 <_malloc_r>
 80061ea:	b948      	cbnz	r0, 8006200 <__smakebuf_r+0x44>
 80061ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f0:	059a      	lsls	r2, r3, #22
 80061f2:	d4ef      	bmi.n	80061d4 <__smakebuf_r+0x18>
 80061f4:	f023 0303 	bic.w	r3, r3, #3
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	e7e3      	b.n	80061c8 <__smakebuf_r+0xc>
 8006200:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <__smakebuf_r+0x7c>)
 8006202:	62b3      	str	r3, [r6, #40]	; 0x28
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	6020      	str	r0, [r4, #0]
 8006208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620c:	81a3      	strh	r3, [r4, #12]
 800620e:	9b00      	ldr	r3, [sp, #0]
 8006210:	6163      	str	r3, [r4, #20]
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	6120      	str	r0, [r4, #16]
 8006216:	b15b      	cbz	r3, 8006230 <__smakebuf_r+0x74>
 8006218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621c:	4630      	mov	r0, r6
 800621e:	f000 fb7f 	bl	8006920 <_isatty_r>
 8006222:	b128      	cbz	r0, 8006230 <__smakebuf_r+0x74>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	89a0      	ldrh	r0, [r4, #12]
 8006232:	4305      	orrs	r5, r0
 8006234:	81a5      	strh	r5, [r4, #12]
 8006236:	e7cd      	b.n	80061d4 <__smakebuf_r+0x18>
 8006238:	08005fc9 	.word	0x08005fc9

0800623c <__malloc_lock>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__malloc_lock+0x8>)
 800623e:	f7ff bf95 	b.w	800616c <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	200001dc 	.word	0x200001dc

08006248 <__malloc_unlock>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__malloc_unlock+0x8>)
 800624a:	f7ff bf90 	b.w	800616e <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	200001dc 	.word	0x200001dc

08006254 <__sfputc_r>:
 8006254:	6893      	ldr	r3, [r2, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	b410      	push	{r4}
 800625c:	6093      	str	r3, [r2, #8]
 800625e:	da08      	bge.n	8006272 <__sfputc_r+0x1e>
 8006260:	6994      	ldr	r4, [r2, #24]
 8006262:	42a3      	cmp	r3, r4
 8006264:	db01      	blt.n	800626a <__sfputc_r+0x16>
 8006266:	290a      	cmp	r1, #10
 8006268:	d103      	bne.n	8006272 <__sfputc_r+0x1e>
 800626a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626e:	f7ff bd05 	b.w	8005c7c <__swbuf_r>
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	1c58      	adds	r0, r3, #1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	7019      	strb	r1, [r3, #0]
 800627a:	4608      	mov	r0, r1
 800627c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006280:	4770      	bx	lr

08006282 <__sfputs_r>:
 8006282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	4614      	mov	r4, r2
 800628a:	18d5      	adds	r5, r2, r3
 800628c:	42ac      	cmp	r4, r5
 800628e:	d101      	bne.n	8006294 <__sfputs_r+0x12>
 8006290:	2000      	movs	r0, #0
 8006292:	e007      	b.n	80062a4 <__sfputs_r+0x22>
 8006294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006298:	463a      	mov	r2, r7
 800629a:	4630      	mov	r0, r6
 800629c:	f7ff ffda 	bl	8006254 <__sfputc_r>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d1f3      	bne.n	800628c <__sfputs_r+0xa>
 80062a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a8 <_vfiprintf_r>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	460d      	mov	r5, r1
 80062ae:	b09d      	sub	sp, #116	; 0x74
 80062b0:	4614      	mov	r4, r2
 80062b2:	4698      	mov	r8, r3
 80062b4:	4606      	mov	r6, r0
 80062b6:	b118      	cbz	r0, 80062c0 <_vfiprintf_r+0x18>
 80062b8:	6983      	ldr	r3, [r0, #24]
 80062ba:	b90b      	cbnz	r3, 80062c0 <_vfiprintf_r+0x18>
 80062bc:	f7ff feb8 	bl	8006030 <__sinit>
 80062c0:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <_vfiprintf_r+0x240>)
 80062c2:	429d      	cmp	r5, r3
 80062c4:	d11b      	bne.n	80062fe <_vfiprintf_r+0x56>
 80062c6:	6875      	ldr	r5, [r6, #4]
 80062c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062ca:	07d9      	lsls	r1, r3, #31
 80062cc:	d405      	bmi.n	80062da <_vfiprintf_r+0x32>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	059a      	lsls	r2, r3, #22
 80062d2:	d402      	bmi.n	80062da <_vfiprintf_r+0x32>
 80062d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d6:	f7ff ff49 	bl	800616c <__retarget_lock_acquire_recursive>
 80062da:	89ab      	ldrh	r3, [r5, #12]
 80062dc:	071b      	lsls	r3, r3, #28
 80062de:	d501      	bpl.n	80062e4 <_vfiprintf_r+0x3c>
 80062e0:	692b      	ldr	r3, [r5, #16]
 80062e2:	b9eb      	cbnz	r3, 8006320 <_vfiprintf_r+0x78>
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff fd1a 	bl	8005d20 <__swsetup_r>
 80062ec:	b1c0      	cbz	r0, 8006320 <_vfiprintf_r+0x78>
 80062ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f0:	07dc      	lsls	r4, r3, #31
 80062f2:	d50e      	bpl.n	8006312 <_vfiprintf_r+0x6a>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	b01d      	add	sp, #116	; 0x74
 80062fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fe:	4b7b      	ldr	r3, [pc, #492]	; (80064ec <_vfiprintf_r+0x244>)
 8006300:	429d      	cmp	r5, r3
 8006302:	d101      	bne.n	8006308 <_vfiprintf_r+0x60>
 8006304:	68b5      	ldr	r5, [r6, #8]
 8006306:	e7df      	b.n	80062c8 <_vfiprintf_r+0x20>
 8006308:	4b79      	ldr	r3, [pc, #484]	; (80064f0 <_vfiprintf_r+0x248>)
 800630a:	429d      	cmp	r5, r3
 800630c:	bf08      	it	eq
 800630e:	68f5      	ldreq	r5, [r6, #12]
 8006310:	e7da      	b.n	80062c8 <_vfiprintf_r+0x20>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	0598      	lsls	r0, r3, #22
 8006316:	d4ed      	bmi.n	80062f4 <_vfiprintf_r+0x4c>
 8006318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800631a:	f7ff ff28 	bl	800616e <__retarget_lock_release_recursive>
 800631e:	e7e9      	b.n	80062f4 <_vfiprintf_r+0x4c>
 8006320:	2300      	movs	r3, #0
 8006322:	9309      	str	r3, [sp, #36]	; 0x24
 8006324:	2320      	movs	r3, #32
 8006326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800632a:	f8cd 800c 	str.w	r8, [sp, #12]
 800632e:	2330      	movs	r3, #48	; 0x30
 8006330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064f4 <_vfiprintf_r+0x24c>
 8006334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006338:	f04f 0901 	mov.w	r9, #1
 800633c:	4623      	mov	r3, r4
 800633e:	469a      	mov	sl, r3
 8006340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006344:	b10a      	cbz	r2, 800634a <_vfiprintf_r+0xa2>
 8006346:	2a25      	cmp	r2, #37	; 0x25
 8006348:	d1f9      	bne.n	800633e <_vfiprintf_r+0x96>
 800634a:	ebba 0b04 	subs.w	fp, sl, r4
 800634e:	d00b      	beq.n	8006368 <_vfiprintf_r+0xc0>
 8006350:	465b      	mov	r3, fp
 8006352:	4622      	mov	r2, r4
 8006354:	4629      	mov	r1, r5
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff93 	bl	8006282 <__sfputs_r>
 800635c:	3001      	adds	r0, #1
 800635e:	f000 80aa 	beq.w	80064b6 <_vfiprintf_r+0x20e>
 8006362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006364:	445a      	add	r2, fp
 8006366:	9209      	str	r2, [sp, #36]	; 0x24
 8006368:	f89a 3000 	ldrb.w	r3, [sl]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a2 	beq.w	80064b6 <_vfiprintf_r+0x20e>
 8006372:	2300      	movs	r3, #0
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800637c:	f10a 0a01 	add.w	sl, sl, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006388:	931a      	str	r3, [sp, #104]	; 0x68
 800638a:	4654      	mov	r4, sl
 800638c:	2205      	movs	r2, #5
 800638e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006392:	4858      	ldr	r0, [pc, #352]	; (80064f4 <_vfiprintf_r+0x24c>)
 8006394:	f7f9 ff3c 	bl	8000210 <memchr>
 8006398:	9a04      	ldr	r2, [sp, #16]
 800639a:	b9d8      	cbnz	r0, 80063d4 <_vfiprintf_r+0x12c>
 800639c:	06d1      	lsls	r1, r2, #27
 800639e:	bf44      	itt	mi
 80063a0:	2320      	movmi	r3, #32
 80063a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a6:	0713      	lsls	r3, r2, #28
 80063a8:	bf44      	itt	mi
 80063aa:	232b      	movmi	r3, #43	; 0x2b
 80063ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b0:	f89a 3000 	ldrb.w	r3, [sl]
 80063b4:	2b2a      	cmp	r3, #42	; 0x2a
 80063b6:	d015      	beq.n	80063e4 <_vfiprintf_r+0x13c>
 80063b8:	9a07      	ldr	r2, [sp, #28]
 80063ba:	4654      	mov	r4, sl
 80063bc:	2000      	movs	r0, #0
 80063be:	f04f 0c0a 	mov.w	ip, #10
 80063c2:	4621      	mov	r1, r4
 80063c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c8:	3b30      	subs	r3, #48	; 0x30
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d94e      	bls.n	800646c <_vfiprintf_r+0x1c4>
 80063ce:	b1b0      	cbz	r0, 80063fe <_vfiprintf_r+0x156>
 80063d0:	9207      	str	r2, [sp, #28]
 80063d2:	e014      	b.n	80063fe <_vfiprintf_r+0x156>
 80063d4:	eba0 0308 	sub.w	r3, r0, r8
 80063d8:	fa09 f303 	lsl.w	r3, r9, r3
 80063dc:	4313      	orrs	r3, r2
 80063de:	9304      	str	r3, [sp, #16]
 80063e0:	46a2      	mov	sl, r4
 80063e2:	e7d2      	b.n	800638a <_vfiprintf_r+0xe2>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	1d19      	adds	r1, r3, #4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	9103      	str	r1, [sp, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfbb      	ittet	lt
 80063f0:	425b      	neglt	r3, r3
 80063f2:	f042 0202 	orrlt.w	r2, r2, #2
 80063f6:	9307      	strge	r3, [sp, #28]
 80063f8:	9307      	strlt	r3, [sp, #28]
 80063fa:	bfb8      	it	lt
 80063fc:	9204      	strlt	r2, [sp, #16]
 80063fe:	7823      	ldrb	r3, [r4, #0]
 8006400:	2b2e      	cmp	r3, #46	; 0x2e
 8006402:	d10c      	bne.n	800641e <_vfiprintf_r+0x176>
 8006404:	7863      	ldrb	r3, [r4, #1]
 8006406:	2b2a      	cmp	r3, #42	; 0x2a
 8006408:	d135      	bne.n	8006476 <_vfiprintf_r+0x1ce>
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	1d1a      	adds	r2, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	9203      	str	r2, [sp, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	f04f 33ff 	movlt.w	r3, #4294967295
 800641a:	3402      	adds	r4, #2
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006504 <_vfiprintf_r+0x25c>
 8006422:	7821      	ldrb	r1, [r4, #0]
 8006424:	2203      	movs	r2, #3
 8006426:	4650      	mov	r0, sl
 8006428:	f7f9 fef2 	bl	8000210 <memchr>
 800642c:	b140      	cbz	r0, 8006440 <_vfiprintf_r+0x198>
 800642e:	2340      	movs	r3, #64	; 0x40
 8006430:	eba0 000a 	sub.w	r0, r0, sl
 8006434:	fa03 f000 	lsl.w	r0, r3, r0
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	4303      	orrs	r3, r0
 800643c:	3401      	adds	r4, #1
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	482c      	ldr	r0, [pc, #176]	; (80064f8 <_vfiprintf_r+0x250>)
 8006446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800644a:	2206      	movs	r2, #6
 800644c:	f7f9 fee0 	bl	8000210 <memchr>
 8006450:	2800      	cmp	r0, #0
 8006452:	d03f      	beq.n	80064d4 <_vfiprintf_r+0x22c>
 8006454:	4b29      	ldr	r3, [pc, #164]	; (80064fc <_vfiprintf_r+0x254>)
 8006456:	bb1b      	cbnz	r3, 80064a0 <_vfiprintf_r+0x1f8>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	3307      	adds	r3, #7
 800645c:	f023 0307 	bic.w	r3, r3, #7
 8006460:	3308      	adds	r3, #8
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006466:	443b      	add	r3, r7
 8006468:	9309      	str	r3, [sp, #36]	; 0x24
 800646a:	e767      	b.n	800633c <_vfiprintf_r+0x94>
 800646c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006470:	460c      	mov	r4, r1
 8006472:	2001      	movs	r0, #1
 8006474:	e7a5      	b.n	80063c2 <_vfiprintf_r+0x11a>
 8006476:	2300      	movs	r3, #0
 8006478:	3401      	adds	r4, #1
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	4619      	mov	r1, r3
 800647e:	f04f 0c0a 	mov.w	ip, #10
 8006482:	4620      	mov	r0, r4
 8006484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006488:	3a30      	subs	r2, #48	; 0x30
 800648a:	2a09      	cmp	r2, #9
 800648c:	d903      	bls.n	8006496 <_vfiprintf_r+0x1ee>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0c5      	beq.n	800641e <_vfiprintf_r+0x176>
 8006492:	9105      	str	r1, [sp, #20]
 8006494:	e7c3      	b.n	800641e <_vfiprintf_r+0x176>
 8006496:	fb0c 2101 	mla	r1, ip, r1, r2
 800649a:	4604      	mov	r4, r0
 800649c:	2301      	movs	r3, #1
 800649e:	e7f0      	b.n	8006482 <_vfiprintf_r+0x1da>
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	462a      	mov	r2, r5
 80064a6:	4b16      	ldr	r3, [pc, #88]	; (8006500 <_vfiprintf_r+0x258>)
 80064a8:	a904      	add	r1, sp, #16
 80064aa:	4630      	mov	r0, r6
 80064ac:	f3af 8000 	nop.w
 80064b0:	4607      	mov	r7, r0
 80064b2:	1c78      	adds	r0, r7, #1
 80064b4:	d1d6      	bne.n	8006464 <_vfiprintf_r+0x1bc>
 80064b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b8:	07d9      	lsls	r1, r3, #31
 80064ba:	d405      	bmi.n	80064c8 <_vfiprintf_r+0x220>
 80064bc:	89ab      	ldrh	r3, [r5, #12]
 80064be:	059a      	lsls	r2, r3, #22
 80064c0:	d402      	bmi.n	80064c8 <_vfiprintf_r+0x220>
 80064c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c4:	f7ff fe53 	bl	800616e <__retarget_lock_release_recursive>
 80064c8:	89ab      	ldrh	r3, [r5, #12]
 80064ca:	065b      	lsls	r3, r3, #25
 80064cc:	f53f af12 	bmi.w	80062f4 <_vfiprintf_r+0x4c>
 80064d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064d2:	e711      	b.n	80062f8 <_vfiprintf_r+0x50>
 80064d4:	ab03      	add	r3, sp, #12
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	462a      	mov	r2, r5
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <_vfiprintf_r+0x258>)
 80064dc:	a904      	add	r1, sp, #16
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 f880 	bl	80065e4 <_printf_i>
 80064e4:	e7e4      	b.n	80064b0 <_vfiprintf_r+0x208>
 80064e6:	bf00      	nop
 80064e8:	0800b140 	.word	0x0800b140
 80064ec:	0800b160 	.word	0x0800b160
 80064f0:	0800b120 	.word	0x0800b120
 80064f4:	0800b180 	.word	0x0800b180
 80064f8:	0800b18a 	.word	0x0800b18a
 80064fc:	00000000 	.word	0x00000000
 8006500:	08006283 	.word	0x08006283
 8006504:	0800b186 	.word	0x0800b186

08006508 <_printf_common>:
 8006508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	4616      	mov	r6, r2
 800650e:	4699      	mov	r9, r3
 8006510:	688a      	ldr	r2, [r1, #8]
 8006512:	690b      	ldr	r3, [r1, #16]
 8006514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006518:	4293      	cmp	r3, r2
 800651a:	bfb8      	it	lt
 800651c:	4613      	movlt	r3, r2
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006524:	4607      	mov	r7, r0
 8006526:	460c      	mov	r4, r1
 8006528:	b10a      	cbz	r2, 800652e <_printf_common+0x26>
 800652a:	3301      	adds	r3, #1
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	0699      	lsls	r1, r3, #26
 8006532:	bf42      	ittt	mi
 8006534:	6833      	ldrmi	r3, [r6, #0]
 8006536:	3302      	addmi	r3, #2
 8006538:	6033      	strmi	r3, [r6, #0]
 800653a:	6825      	ldr	r5, [r4, #0]
 800653c:	f015 0506 	ands.w	r5, r5, #6
 8006540:	d106      	bne.n	8006550 <_printf_common+0x48>
 8006542:	f104 0a19 	add.w	sl, r4, #25
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	6832      	ldr	r2, [r6, #0]
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	42ab      	cmp	r3, r5
 800654e:	dc26      	bgt.n	800659e <_printf_common+0x96>
 8006550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006554:	1e13      	subs	r3, r2, #0
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	bf18      	it	ne
 800655a:	2301      	movne	r3, #1
 800655c:	0692      	lsls	r2, r2, #26
 800655e:	d42b      	bmi.n	80065b8 <_printf_common+0xb0>
 8006560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006564:	4649      	mov	r1, r9
 8006566:	4638      	mov	r0, r7
 8006568:	47c0      	blx	r8
 800656a:	3001      	adds	r0, #1
 800656c:	d01e      	beq.n	80065ac <_printf_common+0xa4>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	68e5      	ldr	r5, [r4, #12]
 8006572:	6832      	ldr	r2, [r6, #0]
 8006574:	f003 0306 	and.w	r3, r3, #6
 8006578:	2b04      	cmp	r3, #4
 800657a:	bf08      	it	eq
 800657c:	1aad      	subeq	r5, r5, r2
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	bf0c      	ite	eq
 8006584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006588:	2500      	movne	r5, #0
 800658a:	4293      	cmp	r3, r2
 800658c:	bfc4      	itt	gt
 800658e:	1a9b      	subgt	r3, r3, r2
 8006590:	18ed      	addgt	r5, r5, r3
 8006592:	2600      	movs	r6, #0
 8006594:	341a      	adds	r4, #26
 8006596:	42b5      	cmp	r5, r6
 8006598:	d11a      	bne.n	80065d0 <_printf_common+0xc8>
 800659a:	2000      	movs	r0, #0
 800659c:	e008      	b.n	80065b0 <_printf_common+0xa8>
 800659e:	2301      	movs	r3, #1
 80065a0:	4652      	mov	r2, sl
 80065a2:	4649      	mov	r1, r9
 80065a4:	4638      	mov	r0, r7
 80065a6:	47c0      	blx	r8
 80065a8:	3001      	adds	r0, #1
 80065aa:	d103      	bne.n	80065b4 <_printf_common+0xac>
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b4:	3501      	adds	r5, #1
 80065b6:	e7c6      	b.n	8006546 <_printf_common+0x3e>
 80065b8:	18e1      	adds	r1, r4, r3
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	2030      	movs	r0, #48	; 0x30
 80065be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065c2:	4422      	add	r2, r4
 80065c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065cc:	3302      	adds	r3, #2
 80065ce:	e7c7      	b.n	8006560 <_printf_common+0x58>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4622      	mov	r2, r4
 80065d4:	4649      	mov	r1, r9
 80065d6:	4638      	mov	r0, r7
 80065d8:	47c0      	blx	r8
 80065da:	3001      	adds	r0, #1
 80065dc:	d0e6      	beq.n	80065ac <_printf_common+0xa4>
 80065de:	3601      	adds	r6, #1
 80065e0:	e7d9      	b.n	8006596 <_printf_common+0x8e>
	...

080065e4 <_printf_i>:
 80065e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	7e0f      	ldrb	r7, [r1, #24]
 80065ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065ec:	2f78      	cmp	r7, #120	; 0x78
 80065ee:	4691      	mov	r9, r2
 80065f0:	4680      	mov	r8, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	469a      	mov	sl, r3
 80065f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065fa:	d807      	bhi.n	800660c <_printf_i+0x28>
 80065fc:	2f62      	cmp	r7, #98	; 0x62
 80065fe:	d80a      	bhi.n	8006616 <_printf_i+0x32>
 8006600:	2f00      	cmp	r7, #0
 8006602:	f000 80d8 	beq.w	80067b6 <_printf_i+0x1d2>
 8006606:	2f58      	cmp	r7, #88	; 0x58
 8006608:	f000 80a3 	beq.w	8006752 <_printf_i+0x16e>
 800660c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006614:	e03a      	b.n	800668c <_printf_i+0xa8>
 8006616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800661a:	2b15      	cmp	r3, #21
 800661c:	d8f6      	bhi.n	800660c <_printf_i+0x28>
 800661e:	a101      	add	r1, pc, #4	; (adr r1, 8006624 <_printf_i+0x40>)
 8006620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006624:	0800667d 	.word	0x0800667d
 8006628:	08006691 	.word	0x08006691
 800662c:	0800660d 	.word	0x0800660d
 8006630:	0800660d 	.word	0x0800660d
 8006634:	0800660d 	.word	0x0800660d
 8006638:	0800660d 	.word	0x0800660d
 800663c:	08006691 	.word	0x08006691
 8006640:	0800660d 	.word	0x0800660d
 8006644:	0800660d 	.word	0x0800660d
 8006648:	0800660d 	.word	0x0800660d
 800664c:	0800660d 	.word	0x0800660d
 8006650:	0800679d 	.word	0x0800679d
 8006654:	080066c1 	.word	0x080066c1
 8006658:	0800677f 	.word	0x0800677f
 800665c:	0800660d 	.word	0x0800660d
 8006660:	0800660d 	.word	0x0800660d
 8006664:	080067bf 	.word	0x080067bf
 8006668:	0800660d 	.word	0x0800660d
 800666c:	080066c1 	.word	0x080066c1
 8006670:	0800660d 	.word	0x0800660d
 8006674:	0800660d 	.word	0x0800660d
 8006678:	08006787 	.word	0x08006787
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	602a      	str	r2, [r5, #0]
 8006684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800668c:	2301      	movs	r3, #1
 800668e:	e0a3      	b.n	80067d8 <_printf_i+0x1f4>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	6829      	ldr	r1, [r5, #0]
 8006694:	0606      	lsls	r6, r0, #24
 8006696:	f101 0304 	add.w	r3, r1, #4
 800669a:	d50a      	bpl.n	80066b2 <_printf_i+0xce>
 800669c:	680e      	ldr	r6, [r1, #0]
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xc8>
 80066a4:	232d      	movs	r3, #45	; 0x2d
 80066a6:	4276      	negs	r6, r6
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ac:	485e      	ldr	r0, [pc, #376]	; (8006828 <_printf_i+0x244>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e019      	b.n	80066e6 <_printf_i+0x102>
 80066b2:	680e      	ldr	r6, [r1, #0]
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066ba:	bf18      	it	ne
 80066bc:	b236      	sxthne	r6, r6
 80066be:	e7ef      	b.n	80066a0 <_printf_i+0xbc>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	6029      	str	r1, [r5, #0]
 80066c8:	0601      	lsls	r1, r0, #24
 80066ca:	d501      	bpl.n	80066d0 <_printf_i+0xec>
 80066cc:	681e      	ldr	r6, [r3, #0]
 80066ce:	e002      	b.n	80066d6 <_printf_i+0xf2>
 80066d0:	0646      	lsls	r6, r0, #25
 80066d2:	d5fb      	bpl.n	80066cc <_printf_i+0xe8>
 80066d4:	881e      	ldrh	r6, [r3, #0]
 80066d6:	4854      	ldr	r0, [pc, #336]	; (8006828 <_printf_i+0x244>)
 80066d8:	2f6f      	cmp	r7, #111	; 0x6f
 80066da:	bf0c      	ite	eq
 80066dc:	2308      	moveq	r3, #8
 80066de:	230a      	movne	r3, #10
 80066e0:	2100      	movs	r1, #0
 80066e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e6:	6865      	ldr	r5, [r4, #4]
 80066e8:	60a5      	str	r5, [r4, #8]
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	bfa2      	ittt	ge
 80066ee:	6821      	ldrge	r1, [r4, #0]
 80066f0:	f021 0104 	bicge.w	r1, r1, #4
 80066f4:	6021      	strge	r1, [r4, #0]
 80066f6:	b90e      	cbnz	r6, 80066fc <_printf_i+0x118>
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	d04d      	beq.n	8006798 <_printf_i+0x1b4>
 80066fc:	4615      	mov	r5, r2
 80066fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006702:	fb03 6711 	mls	r7, r3, r1, r6
 8006706:	5dc7      	ldrb	r7, [r0, r7]
 8006708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800670c:	4637      	mov	r7, r6
 800670e:	42bb      	cmp	r3, r7
 8006710:	460e      	mov	r6, r1
 8006712:	d9f4      	bls.n	80066fe <_printf_i+0x11a>
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10b      	bne.n	8006730 <_printf_i+0x14c>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07de      	lsls	r6, r3, #31
 800671c:	d508      	bpl.n	8006730 <_printf_i+0x14c>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	4299      	cmp	r1, r3
 8006724:	bfde      	ittt	le
 8006726:	2330      	movle	r3, #48	; 0x30
 8006728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800672c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006730:	1b52      	subs	r2, r2, r5
 8006732:	6122      	str	r2, [r4, #16]
 8006734:	f8cd a000 	str.w	sl, [sp]
 8006738:	464b      	mov	r3, r9
 800673a:	aa03      	add	r2, sp, #12
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fee2 	bl	8006508 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	d14c      	bne.n	80067e2 <_printf_i+0x1fe>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	b004      	add	sp, #16
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	4835      	ldr	r0, [pc, #212]	; (8006828 <_printf_i+0x244>)
 8006754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006758:	6829      	ldr	r1, [r5, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006760:	6029      	str	r1, [r5, #0]
 8006762:	061d      	lsls	r5, r3, #24
 8006764:	d514      	bpl.n	8006790 <_printf_i+0x1ac>
 8006766:	07df      	lsls	r7, r3, #31
 8006768:	bf44      	itt	mi
 800676a:	f043 0320 	orrmi.w	r3, r3, #32
 800676e:	6023      	strmi	r3, [r4, #0]
 8006770:	b91e      	cbnz	r6, 800677a <_printf_i+0x196>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f023 0320 	bic.w	r3, r3, #32
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	2310      	movs	r3, #16
 800677c:	e7b0      	b.n	80066e0 <_printf_i+0xfc>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f043 0320 	orr.w	r3, r3, #32
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	2378      	movs	r3, #120	; 0x78
 8006788:	4828      	ldr	r0, [pc, #160]	; (800682c <_printf_i+0x248>)
 800678a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678e:	e7e3      	b.n	8006758 <_printf_i+0x174>
 8006790:	0659      	lsls	r1, r3, #25
 8006792:	bf48      	it	mi
 8006794:	b2b6      	uxthmi	r6, r6
 8006796:	e7e6      	b.n	8006766 <_printf_i+0x182>
 8006798:	4615      	mov	r5, r2
 800679a:	e7bb      	b.n	8006714 <_printf_i+0x130>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	6826      	ldr	r6, [r4, #0]
 80067a0:	6961      	ldr	r1, [r4, #20]
 80067a2:	1d18      	adds	r0, r3, #4
 80067a4:	6028      	str	r0, [r5, #0]
 80067a6:	0635      	lsls	r5, r6, #24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0x1cc>
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0x1d2>
 80067b0:	0670      	lsls	r0, r6, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0x1c8>
 80067b4:	8019      	strh	r1, [r3, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	4615      	mov	r5, r2
 80067bc:	e7ba      	b.n	8006734 <_printf_i+0x150>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	602a      	str	r2, [r5, #0]
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7f9 fd20 	bl	8000210 <memchr>
 80067d0:	b108      	cbz	r0, 80067d6 <_printf_i+0x1f2>
 80067d2:	1b40      	subs	r0, r0, r5
 80067d4:	6060      	str	r0, [r4, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	e7a8      	b.n	8006734 <_printf_i+0x150>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0ab      	beq.n	8006748 <_printf_i+0x164>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d413      	bmi.n	800681e <_printf_i+0x23a>
 80067f6:	68e0      	ldr	r0, [r4, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	bfb8      	it	lt
 80067fe:	4618      	movlt	r0, r3
 8006800:	e7a4      	b.n	800674c <_printf_i+0x168>
 8006802:	2301      	movs	r3, #1
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d09b      	beq.n	8006748 <_printf_i+0x164>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf2      	bgt.n	8006802 <_printf_i+0x21e>
 800681c:	e7eb      	b.n	80067f6 <_printf_i+0x212>
 800681e:	2500      	movs	r5, #0
 8006820:	f104 0619 	add.w	r6, r4, #25
 8006824:	e7f5      	b.n	8006812 <_printf_i+0x22e>
 8006826:	bf00      	nop
 8006828:	0800b191 	.word	0x0800b191
 800682c:	0800b1a2 	.word	0x0800b1a2

08006830 <__sread>:
 8006830:	b510      	push	{r4, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006838:	f000 f894 	bl	8006964 <_read_r>
 800683c:	2800      	cmp	r0, #0
 800683e:	bfab      	itete	ge
 8006840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006842:	89a3      	ldrhlt	r3, [r4, #12]
 8006844:	181b      	addge	r3, r3, r0
 8006846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800684a:	bfac      	ite	ge
 800684c:	6563      	strge	r3, [r4, #84]	; 0x54
 800684e:	81a3      	strhlt	r3, [r4, #12]
 8006850:	bd10      	pop	{r4, pc}

08006852 <__swrite>:
 8006852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	461f      	mov	r7, r3
 8006858:	898b      	ldrh	r3, [r1, #12]
 800685a:	05db      	lsls	r3, r3, #23
 800685c:	4605      	mov	r5, r0
 800685e:	460c      	mov	r4, r1
 8006860:	4616      	mov	r6, r2
 8006862:	d505      	bpl.n	8006870 <__swrite+0x1e>
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	2302      	movs	r3, #2
 800686a:	2200      	movs	r2, #0
 800686c:	f000 f868 	bl	8006940 <_lseek_r>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	4632      	mov	r2, r6
 800687e:	463b      	mov	r3, r7
 8006880:	4628      	mov	r0, r5
 8006882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	f000 b817 	b.w	80068b8 <_write_r>

0800688a <__sseek>:
 800688a:	b510      	push	{r4, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006892:	f000 f855 	bl	8006940 <_lseek_r>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	bf15      	itete	ne
 800689c:	6560      	strne	r0, [r4, #84]	; 0x54
 800689e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068a6:	81a3      	strheq	r3, [r4, #12]
 80068a8:	bf18      	it	ne
 80068aa:	81a3      	strhne	r3, [r4, #12]
 80068ac:	bd10      	pop	{r4, pc}

080068ae <__sclose>:
 80068ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b2:	f000 b813 	b.w	80068dc <_close_r>
	...

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	; (80068d8 <_write_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fa f9dd 	bl	8000c86 <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200001e0 	.word	0x200001e0

080068dc <_close_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	; (80068f8 <_close_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa f9e9 	bl	8000cbe <_close>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_close_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_close_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	200001e0 	.word	0x200001e0

080068fc <_fstat_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	; (800691c <_fstat_r+0x20>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	f7fa f9e4 	bl	8000cd6 <_fstat>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d102      	bne.n	8006918 <_fstat_r+0x1c>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b103      	cbz	r3, 8006918 <_fstat_r+0x1c>
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200001e0 	.word	0x200001e0

08006920 <_isatty_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	; (800693c <_isatty_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fa f9e3 	bl	8000cf6 <_isatty>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_isatty_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_isatty_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200001e0 	.word	0x200001e0

08006940 <_lseek_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d07      	ldr	r5, [pc, #28]	; (8006960 <_lseek_r+0x20>)
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	602a      	str	r2, [r5, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fa f9dc 	bl	8000d0c <_lseek>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_lseek_r+0x1e>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_lseek_r+0x1e>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	200001e0 	.word	0x200001e0

08006964 <_read_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d07      	ldr	r5, [pc, #28]	; (8006984 <_read_r+0x20>)
 8006968:	4604      	mov	r4, r0
 800696a:	4608      	mov	r0, r1
 800696c:	4611      	mov	r1, r2
 800696e:	2200      	movs	r2, #0
 8006970:	602a      	str	r2, [r5, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	f7fa f96a 	bl	8000c4c <_read>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d102      	bne.n	8006982 <_read_r+0x1e>
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	b103      	cbz	r3, 8006982 <_read_r+0x1e>
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	200001e0 	.word	0x200001e0

08006988 <_init>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr

08006994 <_fini>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr
